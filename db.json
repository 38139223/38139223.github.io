{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/zhf_logo.png","path":"img/zhf_logo.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/zhenghewechat.png","path":"img/zhenghewechat.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"427c2b10bdc4d1391666a59747a89f58d16b582b","modified":1511941145000},{"_id":"source/.DS_Store","hash":"d04f9b0ca83d0fdf977bbc5db2a233743e8c744b","modified":1511941145000},{"_id":"themes/indigo/README.md","hash":"b188fb95a9c16eb188eeffa6caa0895a14676338","modified":1511941210000},{"_id":"themes/indigo/package.json","hash":"e98ab835bec65da0d482ac18c96fc750b58cc7b2","modified":1511941210000},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1511941210000},{"_id":"themes/indigo/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1511944339000},{"_id":"themes/indigo/_config.yml","hash":"52c178070fa70882fa2ffec920097e751a1c8b72","modified":1511946591000},{"_id":"source/_posts/.DS_Store","hash":"d98da96746c23b467de8ebcf4b16c439baa1cef5","modified":1511941145000},{"_id":"source/_posts/Best-practices-for-sysctl.md","hash":"8a833968e4d01b5ca00f6acf4ea180903651c59a","modified":1511941145000},{"_id":"source/_posts/How-install-laravel.md","hash":"f2521bb5830c47246bc9bffbf7f469bbfc56f3c7","modified":1511941145000},{"_id":"source/_posts/Laravel-create-model.md","hash":"fafe1d678a50286ef3dcae4b7d74ed08f63754ee","modified":1511941145000},{"_id":"source/_posts/How-to-write-Golang-code-in-china.md","hash":"9aeb943b1c379d2608665eb7a5300e1f7fe3b63d","modified":1512115548000},{"_id":"source/_posts/Laravel-dingo-jwt-auth.md","hash":"90867ecd03d8ebe1e166aeabd737815c3ffc2334","modified":1511941145000},{"_id":"source/_posts/Laravel-select-update-delete-insert.md","hash":"ad7eca146319646c89e047d9ee152df0f32e8f10","modified":1511941145000},{"_id":"source/_posts/PHP-debugging-skills.md","hash":"93bdec100dce14173c5e3116906ceaee5a2f3241","modified":1511941145000},{"_id":"source/_posts/Mail-tools-for-Linux.md","hash":"c9eb1fb23c6aaeeb5971cec82999966402577122","modified":1511941145000},{"_id":"source/_posts/about-array-map.md","hash":"41d22fdbbf4193db56e1fa3130279c152efb186e","modified":1511941145000},{"_id":"source/_posts/golang-array-slice-map.md","hash":"48dd0be878649335e429854f6280f964f9279b46","modified":1511941145000},{"_id":"source/categories/index.md","hash":"8dd1c5f347ae8fc92658a11cfe71536e533f758a","modified":1511943026000},{"_id":"source/_posts/map.md","hash":"41d22fdbbf4193db56e1fa3130279c152efb186e","modified":1511941145000},{"_id":"source/_posts/golang-struct-init.md","hash":"933e6bbe0d861772e6358b9b91536937bcd228eb","modified":1512545309000},{"_id":"source/_posts/package-strings.md","hash":"f62d61d045dae7d294e4b813d63891feda1c8415","modified":1514173871410},{"_id":"source/_posts/php-operator.md","hash":"3665163bd29adf727478e2680ca7db9b2f67cff3","modified":1512030347000},{"_id":"source/tags/index.md","hash":"66054fbb13e98bc5b4a4a431a39ad657078892cc","modified":1511943000000},{"_id":"source/_posts/golang-print-struct-md.md","hash":"51f2ac85383e6188cf7e852519093f8c23dd8213","modified":1512092603000},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1511941210000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1511941210000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1511941210000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1511941210000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1511941210000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1511941210000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1511941210000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1511941210000},{"_id":"source/_posts/what-is-oauth.md","hash":"5390b522c8fb488d1dea604894e21dfc9393ed45","modified":1512310377000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1511941210000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1511941210000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1511941210000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1511941210000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1511941210000},{"_id":"themes/indigo/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1512003356000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1511941210000},{"_id":"themes/indigo/source/css/style.less","hash":"3e151cd162e8af87d7ca90e3067f7bd99a25f823","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"b197b87b120b09b68aa3d79954ed039816a88664","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1511941210000},{"_id":"themes/indigo/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1511941210000},{"_id":"source/_posts/Computer-English.md","hash":"259068e7955e1926b7e97d09529bb4c07fa2a2e6","modified":1511941145000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1511941210000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"13031c81803a7a43c7ac36191ba829c910df5880","modified":1511948994000},{"_id":"themes/indigo/source/img/zhf_logo.png","hash":"fae5b12ff6278d1431f9e7b4beebe60a874a315a","modified":1511946990000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1511941210000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1511941210000},{"_id":"themes/indigo/source/js/main.min.js","hash":"70652f94832de4801ffe80bf59d09265ac84599f","modified":1511941210000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1511941210000},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"4ea7ef6dc47a3df8d31bac4bdf83c17d4161f593","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"84efee0ef2fbf4e222456ab6ab8b5141287537e6","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"968b27ca952d01b066cfe49fb670faf177d6b67e","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1511941210000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1511941210000},{"_id":"themes/indigo/source/js/main.js","hash":"411836a39a01be178e7bba14f8959b6949488de9","modified":1511941210000},{"_id":"themes/indigo/source/img/zhenghewechat.png","hash":"d68746448691146753e16b62415c005a8f1a2542","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1511941210000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511941210000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1511941210000},{"_id":"public/content.json","hash":"afd1c010dc3ce661188a6555a8d9e930db0ae314","modified":1530610332234},{"_id":"public/categories/index.html","hash":"879ea4b46ee8bd3a50b0b169c4288deb2680c1b5","modified":1530610332454},{"_id":"public/2017/07/04/PHP-debugging-skills/index.html","hash":"724dbe9f71df14c43d534ef7d702ad103ae8f308","modified":1530610332503},{"_id":"public/2017/06/22/How-install-laravel/index.html","hash":"fd5d0a6214017ae229f454c6da9db2b222327b5d","modified":1530610332504},{"_id":"public/archives/index.html","hash":"d2d294d1c25314f5cabf897513a983c94e50432e","modified":1530610332504},{"_id":"public/archives/page/2/index.html","hash":"932aa745581c2c22e0360d6012c7c5754dbfe398","modified":1530610332504},{"_id":"public/archives/2017/index.html","hash":"300f022c63186bfd77bac8b5b708807b7b2b4e34","modified":1530610332504},{"_id":"public/archives/2017/page/2/index.html","hash":"b3a8944f66b0739c6ca49f3391a56f154b90ad44","modified":1530610332504},{"_id":"public/archives/2017/06/index.html","hash":"a712cdc81efc04356152fb3e46608bdd01f9125b","modified":1530610332504},{"_id":"public/archives/2017/07/index.html","hash":"0c11e4bd48e89164e704458fe0744e1c3f310842","modified":1530610332504},{"_id":"public/archives/2017/11/index.html","hash":"9ed6a229933e96a84cc44e63d849d6a29a161ce4","modified":1530610332505},{"_id":"public/tags/object-Object/index.html","hash":"9361b8b3de9c680bb47259eca6097c7a30cc9ad9","modified":1530610332505},{"_id":"public/tags/Linux-mutt/index.html","hash":"86018c407e88f5b74a8dbd80bce339ffb62d6d8f","modified":1530610332505},{"_id":"public/tags/index.html","hash":"d99a542b12066c0a91802917f04b4660885fbaa8","modified":1530610332505},{"_id":"public/2017/07/14/golang-array-slice-map/index.html","hash":"c52c547dc934c987b3fca32a2b287b78c3edffc5","modified":1530610332505},{"_id":"public/2017/07/12/php-operator/index.html","hash":"31ea936aa319d723957148a7664ee94102447664","modified":1530610332505},{"_id":"public/2017/07/07/about-array-map/index.html","hash":"5ccc8b3a483fe7454070e91624c061e8854774bc","modified":1530610332505},{"_id":"public/2017/07/07/map/index.html","hash":"252bfcc0786695cc364b82b2c8ed7447a90af9a9","modified":1530610332505},{"_id":"public/2017/07/05/Laravel-create-model/index.html","hash":"2b1fe2521bf0b529d88d3639f6d3e47978e49f9f","modified":1530610332505},{"_id":"public/2017/07/05/Laravel-select-update-delete-insert/index.html","hash":"73d2ceed6af845b6629740f903a3a2273c308683","modified":1530610332505},{"_id":"public/2017/06/29/Best-practices-for-sysctl/index.html","hash":"16893f706c83d79f812ebd1055bb2910be639c29","modified":1530610332505},{"_id":"public/2017/06/29/Computer-English/index.html","hash":"b6b5d79779b8c66da9fb80860449d183bc7f297c","modified":1530610332505},{"_id":"public/2017/06/28/Laravel-dingo-jwt-auth/index.html","hash":"802dc1f7173ff2f4b87c6afd2ae40a91b4daf3d4","modified":1530610332505},{"_id":"public/2017/06/22/Mail-tools-for-Linux/index.html","hash":"264ce3f3e938595ee29805b9b06945ce782eb5c0","modified":1530610332505},{"_id":"public/index.html","hash":"e7f8faf67bc517645593210446823c56f24cbcc4","modified":1530610332505},{"_id":"public/page/2/index.html","hash":"ca423f2372a912af132869c1843e95aabfdf8e49","modified":1530610332506},{"_id":"public/2017/12/01/How-to-write-Golang-code-in-china/index.html","hash":"d7df9eecc5bb706ea1b10e9c41621d1716e95fb4","modified":1530610332513},{"_id":"public/archives/2017/12/index.html","hash":"135d85119ee015bfb931b8ccf5630c80d862d8ac","modified":1530610332513},{"_id":"public/categories/golang/index.html","hash":"cea0f8d02e3c685d0a080fdcc440f35175d44370","modified":1530610332513},{"_id":"public/tags/golang/index.html","hash":"158acfac9e57cb6b433b9ac0d56e7b9aa89e0c14","modified":1530610332513},{"_id":"public/tags/struct/index.html","hash":"7449dabfb7d096cdc5b2fe67a9c34fc7011f6751","modified":1530610332513},{"_id":"public/tags/Oauth/index.html","hash":"3b4112f4059a4257f38484c139d8ae34243b4577","modified":1530610332513},{"_id":"public/2017/12/06/golang-struct-init/index.html","hash":"22ee1cdfbaaaf83c98e6e1c9782924f96066d1f1","modified":1530610332514},{"_id":"public/2017/12/25/package-strings/index.html","hash":"39bb4363bbd6a3836a9346cc1fcb0e456386c82e","modified":1530610332514},{"_id":"public/2017/12/01/what-is-oauth/index.html","hash":"b2ca8d64de2e7895540876c427149233ac0ac61d","modified":1530610332514},{"_id":"public/2017/11/30/golang-print-struct-md/index.html","hash":"d9344a0fd2ad13beb9d03db57bf799ad10aeca9e","modified":1530610332514},{"_id":"public/CNAME","hash":"427c2b10bdc4d1391666a59747a89f58d16b582b","modified":1530610332551},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1530610332551},{"_id":"public/img/brand.jpg","hash":"13031c81803a7a43c7ac36191ba829c910df5880","modified":1530610332551},{"_id":"public/img/zhf_logo.png","hash":"fae5b12ff6278d1431f9e7b4beebe60a874a315a","modified":1530610332551},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1530610332552},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1530610332552},{"_id":"public/img/zhenghewechat.png","hash":"d68746448691146753e16b62415c005a8f1a2542","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1530610332552},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1530610332553},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1530610332583},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1530610332584},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530610332584},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1530610332584},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1530610332584},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1530610332584},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530610332584},{"_id":"public/js/main.min.js","hash":"70652f94832de4801ffe80bf59d09265ac84599f","modified":1530610332589},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1530610332589},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1530610332589},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1530610332589},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530610332590},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1530610332590},{"_id":"public/js/main.js","hash":"411836a39a01be178e7bba14f8959b6949488de9","modified":1530610332603},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1530610332610},{"_id":"public/css/style.css","hash":"f13f6bdb92efa9362a5e6a57ff80fba9170b430c","modified":1530610332978}],"Category":[{"name":"golang","_id":"cjj5hvecw000ryhfyjeowhm9x"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---\n","date":"2017-11-29T08:10:26.000Z","updated":"2017-11-29T08:10:26.000Z","path":"categories/index.html","title":"","_id":"cjj5hvec30001yhfymqrb00n0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---\n","date":"2017-11-29T08:10:00.000Z","updated":"2017-11-29T08:10:00.000Z","path":"tags/index.html","title":"","_id":"cjj5hvec40003yhfyqwk5l3xp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Best practices for sysctl","date":"2017-06-29T07:10:35.000Z","_content":"# Sysctl的最佳实践\n## Linux Server的系统优化\n显而易见，Linux已经成为绝大多数互联网企业首选的服务器操作系统。\n发行版会默认一些固定的系统设定，但显然这些设定并不适合你的业务。\n升级内核\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nrpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm\nyum --enablerepo=elrepo-kernel install kernel-lt -y\nvim /etc/grub.conf       'default 1 更改为default 0'\n\n### 第一要点：最大文件数（ulimit -a）\n默认的\"open files (-n) 1024 \"是Linux操作系统对一个进程打开的文件句柄数量的限制(也包含打开的SOCKET数量，可影响如MySQL的并发连接数目)。\n\"The nproc limit on Linux counts the number of threads within all processes that can exist for a given user.\"\n\"ulimit -a\"可以查看，修改则需要涉及到这几个文件1、'etc/security/limits.conf';2、'/etc/security/limits.d/90-nproc.conf'\ncat /etc/security/limits.conf\n* soft nofile 65535\n* hard nofile 65535\ncat /etc/security/limits.d/90-nproc.conf\n*          soft    nproc     1024\nroot       soft    nproc     unlimite\n\n### /etc/sysctl.conf\nnet.core.rmem_max=16777216 \nnet.core.wmem_max=16777216 \nnet.ipv4.tcp_rmem=4096 87380 16777216  \nnet.ipv4.tcp_wmem=4096 65536 16777216  \nnet.ipv4.tcp_fin_timeout = 30 \nnet.core.netdev_max_backlog = 30000 \nnet.ipv4.tcp_no_metrics_save=1 \nnet.core.somaxconn = 262144 \nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_max_orphans = 262144 \nnet.ipv4.tcp_max_syn_backlog = 262144 \nnet.ipv4.tcp_synack_retries = 2 \nnet.ipv4.tcp_syn_retries = 2\nnet.ipv4.ip_local_port_range = 1024 65535 \n-----------------------------------------\nfs.file-max = 1025500\nnet.core.netdev_max_backlog = 30000 \nnet.core.somaxconn = 10000 \nnet.core.rps_sock_flow_entries = 32768\nnet.ipv4.tcp_max_syn_backlog = 10000 \nnet.ipv4.tcp_max_tw_buckets = 10000 \nnet.ipv4.tcp_fin_timeout = 10 \nnet.ipv4.tcp_timestamps = 0\nnet.ipv4.tcp_tw_recycle = 0\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_synack_retries = 10 \nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_keepalive_time = 180\nnet.ipv4.tcp_keepalive_intvl = 30\nnet.ipv4.tcp_keepalive_probes =5\nnet.ipv4.ip_local_port_range = 1024 65536 \n","source":"_posts/Best-practices-for-sysctl.md","raw":"---\ntitle: Best practices for sysctl\ndate: 2017-06-29 15:10:35\ntags: {sysctl,centos}\n---\n# Sysctl的最佳实践\n## Linux Server的系统优化\n显而易见，Linux已经成为绝大多数互联网企业首选的服务器操作系统。\n发行版会默认一些固定的系统设定，但显然这些设定并不适合你的业务。\n升级内核\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nrpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm\nyum --enablerepo=elrepo-kernel install kernel-lt -y\nvim /etc/grub.conf       'default 1 更改为default 0'\n\n### 第一要点：最大文件数（ulimit -a）\n默认的\"open files (-n) 1024 \"是Linux操作系统对一个进程打开的文件句柄数量的限制(也包含打开的SOCKET数量，可影响如MySQL的并发连接数目)。\n\"The nproc limit on Linux counts the number of threads within all processes that can exist for a given user.\"\n\"ulimit -a\"可以查看，修改则需要涉及到这几个文件1、'etc/security/limits.conf';2、'/etc/security/limits.d/90-nproc.conf'\ncat /etc/security/limits.conf\n* soft nofile 65535\n* hard nofile 65535\ncat /etc/security/limits.d/90-nproc.conf\n*          soft    nproc     1024\nroot       soft    nproc     unlimite\n\n### /etc/sysctl.conf\nnet.core.rmem_max=16777216 \nnet.core.wmem_max=16777216 \nnet.ipv4.tcp_rmem=4096 87380 16777216  \nnet.ipv4.tcp_wmem=4096 65536 16777216  \nnet.ipv4.tcp_fin_timeout = 30 \nnet.core.netdev_max_backlog = 30000 \nnet.ipv4.tcp_no_metrics_save=1 \nnet.core.somaxconn = 262144 \nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_max_orphans = 262144 \nnet.ipv4.tcp_max_syn_backlog = 262144 \nnet.ipv4.tcp_synack_retries = 2 \nnet.ipv4.tcp_syn_retries = 2\nnet.ipv4.ip_local_port_range = 1024 65535 \n-----------------------------------------\nfs.file-max = 1025500\nnet.core.netdev_max_backlog = 30000 \nnet.core.somaxconn = 10000 \nnet.core.rps_sock_flow_entries = 32768\nnet.ipv4.tcp_max_syn_backlog = 10000 \nnet.ipv4.tcp_max_tw_buckets = 10000 \nnet.ipv4.tcp_fin_timeout = 10 \nnet.ipv4.tcp_timestamps = 0\nnet.ipv4.tcp_tw_recycle = 0\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_synack_retries = 10 \nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_keepalive_time = 180\nnet.ipv4.tcp_keepalive_intvl = 30\nnet.ipv4.tcp_keepalive_probes =5\nnet.ipv4.ip_local_port_range = 1024 65536 \n","slug":"Best-practices-for-sysctl","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvebz0000yhfymfsmlvur","content":"<h1 id=\"Sysctl的最佳实践\"><a href=\"#Sysctl的最佳实践\" class=\"headerlink\" title=\"Sysctl的最佳实践\"></a>Sysctl的最佳实践</h1><h2 id=\"Linux-Server的系统优化\"><a href=\"#Linux-Server的系统优化\" class=\"headerlink\" title=\"Linux Server的系统优化\"></a>Linux Server的系统优化</h2><p>显而易见，Linux已经成为绝大多数互联网企业首选的服务器操作系统。<br>发行版会默认一些固定的系统设定，但显然这些设定并不适合你的业务。<br>升级内核<br>rpm –import <a href=\"https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\" target=\"_blank\" rel=\"external\">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>rpm -Uvh <a href=\"http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm\" target=\"_blank\" rel=\"external\">http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</a><br>yum –enablerepo=elrepo-kernel install kernel-lt -y<br>vim /etc/grub.conf       ‘default 1 更改为default 0’</p>\n<h3 id=\"第一要点：最大文件数（ulimit-a）\"><a href=\"#第一要点：最大文件数（ulimit-a）\" class=\"headerlink\" title=\"第一要点：最大文件数（ulimit -a）\"></a>第一要点：最大文件数（ulimit -a）</h3><p>默认的”open files (-n) 1024 “是Linux操作系统对一个进程打开的文件句柄数量的限制(也包含打开的SOCKET数量，可影响如MySQL的并发连接数目)。<br>“The nproc limit on Linux counts the number of threads within all processes that can exist for a given user.”<br>“ulimit -a”可以查看，修改则需要涉及到这几个文件1、’etc/security/limits.conf’;2、’/etc/security/limits.d/90-nproc.conf’<br>cat /etc/security/limits.conf</p>\n<ul>\n<li>soft nofile 65535</li>\n<li>hard nofile 65535<br>cat /etc/security/limits.d/90-nproc.conf</li>\n<li>soft    nproc     1024<br>root       soft    nproc     unlimite</li>\n</ul>\n<h3 id=\"etc-sysctl-conf\"><a href=\"#etc-sysctl-conf\" class=\"headerlink\" title=\"/etc/sysctl.conf\"></a>/etc/sysctl.conf</h3><p>net.core.rmem_max=16777216<br>net.core.wmem_max=16777216<br>net.ipv4.tcp_rmem=4096 87380 16777216<br>net.ipv4.tcp_wmem=4096 65536 16777216<br>net.ipv4.tcp_fin_timeout = 30<br>net.core.netdev_max_backlog = 30000<br>net.ipv4.tcp_no_metrics_save=1<br>net.core.somaxconn = 262144<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_orphans = 262144<br>net.ipv4.tcp_max_syn_backlog = 262144<br>net.ipv4.tcp_synack_retries = 2<br>net.ipv4.tcp_syn_retries = 2</p>\n<h2 id=\"net-ipv4-ip-local-port-range-1024-65535\"><a href=\"#net-ipv4-ip-local-port-range-1024-65535\" class=\"headerlink\" title=\"net.ipv4.ip_local_port_range = 1024 65535 \"></a>net.ipv4.ip_local_port_range = 1024 65535 </h2><p>fs.file-max = 1025500<br>net.core.netdev_max_backlog = 30000<br>net.core.somaxconn = 10000<br>net.core.rps_sock_flow_entries = 32768<br>net.ipv4.tcp_max_syn_backlog = 10000<br>net.ipv4.tcp_max_tw_buckets = 10000<br>net.ipv4.tcp_fin_timeout = 10<br>net.ipv4.tcp_timestamps = 0<br>net.ipv4.tcp_tw_recycle = 0<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_synack_retries = 10<br>net.ipv4.tcp_window_scaling = 1<br>net.ipv4.tcp_keepalive_time = 180<br>net.ipv4.tcp_keepalive_intvl = 30<br>net.ipv4.tcp_keepalive_probes =5<br>net.ipv4.ip_local_port_range = 1024 65536 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Sysctl的最佳实践\"><a href=\"#Sysctl的最佳实践\" class=\"headerlink\" title=\"Sysctl的最佳实践\"></a>Sysctl的最佳实践</h1><h2 id=\"Linux-Server的系统优化\"><a href=\"#Linux-Server的系统优化\" class=\"headerlink\" title=\"Linux Server的系统优化\"></a>Linux Server的系统优化</h2><p>显而易见，Linux已经成为绝大多数互联网企业首选的服务器操作系统。<br>发行版会默认一些固定的系统设定，但显然这些设定并不适合你的业务。<br>升级内核<br>rpm –import <a href=\"https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\" target=\"_blank\" rel=\"external\">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a><br>rpm -Uvh <a href=\"http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm\" target=\"_blank\" rel=\"external\">http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</a><br>yum –enablerepo=elrepo-kernel install kernel-lt -y<br>vim /etc/grub.conf       ‘default 1 更改为default 0’</p>\n<h3 id=\"第一要点：最大文件数（ulimit-a）\"><a href=\"#第一要点：最大文件数（ulimit-a）\" class=\"headerlink\" title=\"第一要点：最大文件数（ulimit -a）\"></a>第一要点：最大文件数（ulimit -a）</h3><p>默认的”open files (-n) 1024 “是Linux操作系统对一个进程打开的文件句柄数量的限制(也包含打开的SOCKET数量，可影响如MySQL的并发连接数目)。<br>“The nproc limit on Linux counts the number of threads within all processes that can exist for a given user.”<br>“ulimit -a”可以查看，修改则需要涉及到这几个文件1、’etc/security/limits.conf’;2、’/etc/security/limits.d/90-nproc.conf’<br>cat /etc/security/limits.conf</p>\n<ul>\n<li>soft nofile 65535</li>\n<li>hard nofile 65535<br>cat /etc/security/limits.d/90-nproc.conf</li>\n<li>soft    nproc     1024<br>root       soft    nproc     unlimite</li>\n</ul>\n<h3 id=\"etc-sysctl-conf\"><a href=\"#etc-sysctl-conf\" class=\"headerlink\" title=\"/etc/sysctl.conf\"></a>/etc/sysctl.conf</h3><p>net.core.rmem_max=16777216<br>net.core.wmem_max=16777216<br>net.ipv4.tcp_rmem=4096 87380 16777216<br>net.ipv4.tcp_wmem=4096 65536 16777216<br>net.ipv4.tcp_fin_timeout = 30<br>net.core.netdev_max_backlog = 30000<br>net.ipv4.tcp_no_metrics_save=1<br>net.core.somaxconn = 262144<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_orphans = 262144<br>net.ipv4.tcp_max_syn_backlog = 262144<br>net.ipv4.tcp_synack_retries = 2<br>net.ipv4.tcp_syn_retries = 2</p>\n<h2 id=\"net-ipv4-ip-local-port-range-1024-65535\"><a href=\"#net-ipv4-ip-local-port-range-1024-65535\" class=\"headerlink\" title=\"net.ipv4.ip_local_port_range = 1024 65535 \"></a>net.ipv4.ip_local_port_range = 1024 65535 </h2><p>fs.file-max = 1025500<br>net.core.netdev_max_backlog = 30000<br>net.core.somaxconn = 10000<br>net.core.rps_sock_flow_entries = 32768<br>net.ipv4.tcp_max_syn_backlog = 10000<br>net.ipv4.tcp_max_tw_buckets = 10000<br>net.ipv4.tcp_fin_timeout = 10<br>net.ipv4.tcp_timestamps = 0<br>net.ipv4.tcp_tw_recycle = 0<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_synack_retries = 10<br>net.ipv4.tcp_window_scaling = 1<br>net.ipv4.tcp_keepalive_time = 180<br>net.ipv4.tcp_keepalive_intvl = 30<br>net.ipv4.tcp_keepalive_probes =5<br>net.ipv4.ip_local_port_range = 1024 65536 </p>\n"},{"title":"How-install-laravel","date":"2017-06-22T09:04:08.000Z","_content":"","source":"_posts/How-install-laravel.md","raw":"---\ntitle: How-install-laravel\ndate: 2017-06-22 17:04:08\ntags:\n---\n","slug":"How-install-laravel","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvec30002yhfyyniduwk8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Laravel create model","date":"2017-07-05T12:48:39.000Z","_content":"laravel的 Eloquent 模型其实就是我们平时说的MVC里Model，只是换了个名字而已~\n\n \n\n1）Eloquent 是啥？\n\nEloquent 本质就一个查询构建器（laravel里叫查询构建器，想上面所说的一样，它其实就是一个Model），所以它使用查询构建器的所以方法，\n\n如果你不知道laravel查询构建器都有些什么方法，看这里：http://www.cnblogs.com/tujia/p/6292832.html\n\n \n\n2）Eloquent 怎么用？\n\n1、创建一个Eloquent 模型（生成的model方法位于app目录下）\n\nphp artisan make:model Goods\n \n\n2、指定一下Model绑定的数据表及表主键（如果不声明表名及主键，默认的表名是model名字的复数，例如我这里的话，默认表名就成了Goodss了，默认主键是id）\n\n复制代码\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Goods extends Model\n{\n    protected $table         = \"goods\";\n    protected $primaryKey     = \"goods_id\";\n    //\n}\n复制代码\n \n\n3、数据库操作的话，这按之前的查询构建器的写法来就行了，不过这里不再是用的 DB::table('table_name') 了，直接用$this就行了，例如：\n\n$goods = $this->where('goods_id', '1')->first();\n当然，这时在Model里方法的写法，在别的地方（例如控制器）调用Model的话，要实例化一个模型来调用\n\n$goods = \\App\\Goods::where('goods_id', '1')->first();\n如果我们需要通过模型查询多次的话，先实例化一个模型并赋值给一个变量是一个不错的选择\n\n$goodsModel = new \\App\\Goods();\n$row        = $goodsModel->where('goods_id', $id)->first();\n$count      = $goodsModel->count();\n \n\n3）Eloquent 模型特有的方法\n\nEloquent 除了具备 “查询构建器” 的所有功能（方法），它还自己的一些“更强大”的方法（DB::table不能使用的方法）\n\n1、find 方法，find 方法可以查询一行或多行\n\n$goodsModel = \\App\\Goods();\n$one        = $goodsModel->find(1);\n$some       = $goodsModel->find([1,2,3,4]);\n \n\n2、save 方法，save 方法具备 insert 方法和 update 方法的功能（记录不存在时insert，记录存在时update）\n\n复制代码\n$model->save(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\n$model->save(\n    ['id'=>1,'email' => 'john@example.com', 'votes' => 0]\n);\n复制代码\n更新时，需要提示数据表的主键字段，例如上面的id字段\n\nPS：如果你在做数据迁移时，有设置到 $table->timestamps()，生成数据表时会有一个 created_at 字段 和 updated_at 字段，而使用save方法插入或更新记录时，这两个字段会被自动更新（使用insert和update方法没这种效果）\n","source":"_posts/Laravel-create-model.md","raw":"---\ntitle: Laravel create model\ndate: 2017-07-05 20:48:39\ntags:\n---\nlaravel的 Eloquent 模型其实就是我们平时说的MVC里Model，只是换了个名字而已~\n\n \n\n1）Eloquent 是啥？\n\nEloquent 本质就一个查询构建器（laravel里叫查询构建器，想上面所说的一样，它其实就是一个Model），所以它使用查询构建器的所以方法，\n\n如果你不知道laravel查询构建器都有些什么方法，看这里：http://www.cnblogs.com/tujia/p/6292832.html\n\n \n\n2）Eloquent 怎么用？\n\n1、创建一个Eloquent 模型（生成的model方法位于app目录下）\n\nphp artisan make:model Goods\n \n\n2、指定一下Model绑定的数据表及表主键（如果不声明表名及主键，默认的表名是model名字的复数，例如我这里的话，默认表名就成了Goodss了，默认主键是id）\n\n复制代码\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Goods extends Model\n{\n    protected $table         = \"goods\";\n    protected $primaryKey     = \"goods_id\";\n    //\n}\n复制代码\n \n\n3、数据库操作的话，这按之前的查询构建器的写法来就行了，不过这里不再是用的 DB::table('table_name') 了，直接用$this就行了，例如：\n\n$goods = $this->where('goods_id', '1')->first();\n当然，这时在Model里方法的写法，在别的地方（例如控制器）调用Model的话，要实例化一个模型来调用\n\n$goods = \\App\\Goods::where('goods_id', '1')->first();\n如果我们需要通过模型查询多次的话，先实例化一个模型并赋值给一个变量是一个不错的选择\n\n$goodsModel = new \\App\\Goods();\n$row        = $goodsModel->where('goods_id', $id)->first();\n$count      = $goodsModel->count();\n \n\n3）Eloquent 模型特有的方法\n\nEloquent 除了具备 “查询构建器” 的所有功能（方法），它还自己的一些“更强大”的方法（DB::table不能使用的方法）\n\n1、find 方法，find 方法可以查询一行或多行\n\n$goodsModel = \\App\\Goods();\n$one        = $goodsModel->find(1);\n$some       = $goodsModel->find([1,2,3,4]);\n \n\n2、save 方法，save 方法具备 insert 方法和 update 方法的功能（记录不存在时insert，记录存在时update）\n\n复制代码\n$model->save(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\n$model->save(\n    ['id'=>1,'email' => 'john@example.com', 'votes' => 0]\n);\n复制代码\n更新时，需要提示数据表的主键字段，例如上面的id字段\n\nPS：如果你在做数据迁移时，有设置到 $table->timestamps()，生成数据表时会有一个 created_at 字段 和 updated_at 字段，而使用save方法插入或更新记录时，这两个字段会被自动更新（使用insert和update方法没这种效果）\n","slug":"Laravel-create-model","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvec70005yhfypsvw6jgk","content":"<p>laravel的 Eloquent 模型其实就是我们平时说的MVC里Model，只是换了个名字而已~</p>\n<p>1）Eloquent 是啥？</p>\n<p>Eloquent 本质就一个查询构建器（laravel里叫查询构建器，想上面所说的一样，它其实就是一个Model），所以它使用查询构建器的所以方法，</p>\n<p>如果你不知道laravel查询构建器都有些什么方法，看这里：<a href=\"http://www.cnblogs.com/tujia/p/6292832.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tujia/p/6292832.html</a></p>\n<p>2）Eloquent 怎么用？</p>\n<p>1、创建一个Eloquent 模型（生成的model方法位于app目录下）</p>\n<p>php artisan make:model Goods</p>\n<p>2、指定一下Model绑定的数据表及表主键（如果不声明表名及主键，默认的表名是model名字的复数，例如我这里的话，默认表名就成了Goodss了，默认主键是id）</p>\n<p>复制代码<br>&lt;?php</p>\n<p>namespace App;</p>\n<p>use Illuminate\\Database\\Eloquent\\Model;</p>\n<p>class Goods extends Model<br>{<br>    protected $table         = “goods”;<br>    protected $primaryKey     = “goods_id”;<br>    //<br>}<br>复制代码</p>\n<p>3、数据库操作的话，这按之前的查询构建器的写法来就行了，不过这里不再是用的 DB::table(‘table_name’) 了，直接用$this就行了，例如：</p>\n<p>$goods = $this-&gt;where(‘goods_id’, ‘1’)-&gt;first();<br>当然，这时在Model里方法的写法，在别的地方（例如控制器）调用Model的话，要实例化一个模型来调用</p>\n<p>$goods = \\App\\Goods::where(‘goods_id’, ‘1’)-&gt;first();<br>如果我们需要通过模型查询多次的话，先实例化一个模型并赋值给一个变量是一个不错的选择</p>\n<p>$goodsModel = new \\App\\Goods();<br>$row        = $goodsModel-&gt;where(‘goods_id’, $id)-&gt;first();<br>$count      = $goodsModel-&gt;count();</p>\n<p>3）Eloquent 模型特有的方法</p>\n<p>Eloquent 除了具备 “查询构建器” 的所有功能（方法），它还自己的一些“更强大”的方法（DB::table不能使用的方法）</p>\n<p>1、find 方法，find 方法可以查询一行或多行</p>\n<p>$goodsModel = \\App\\Goods();<br>$one        = $goodsModel-&gt;find(1);<br>$some       = $goodsModel-&gt;find([1,2,3,4]);</p>\n<p>2、save 方法，save 方法具备 insert 方法和 update 方法的功能（记录不存在时insert，记录存在时update）</p>\n<p>复制代码<br>$model-&gt;save(<br>    [‘email’ =&gt; ‘john@example.com’, ‘votes’ =&gt; 0]<br>);</p>\n<p>$model-&gt;save(<br>    [‘id’=&gt;1,’email’ =&gt; ‘john@example.com’, ‘votes’ =&gt; 0]<br>);<br>复制代码<br>更新时，需要提示数据表的主键字段，例如上面的id字段</p>\n<p>PS：如果你在做数据迁移时，有设置到 $table-&gt;timestamps()，生成数据表时会有一个 created_at 字段 和 updated_at 字段，而使用save方法插入或更新记录时，这两个字段会被自动更新（使用insert和update方法没这种效果）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>laravel的 Eloquent 模型其实就是我们平时说的MVC里Model，只是换了个名字而已~</p>\n<p>1）Eloquent 是啥？</p>\n<p>Eloquent 本质就一个查询构建器（laravel里叫查询构建器，想上面所说的一样，它其实就是一个Model），所以它使用查询构建器的所以方法，</p>\n<p>如果你不知道laravel查询构建器都有些什么方法，看这里：<a href=\"http://www.cnblogs.com/tujia/p/6292832.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tujia/p/6292832.html</a></p>\n<p>2）Eloquent 怎么用？</p>\n<p>1、创建一个Eloquent 模型（生成的model方法位于app目录下）</p>\n<p>php artisan make:model Goods</p>\n<p>2、指定一下Model绑定的数据表及表主键（如果不声明表名及主键，默认的表名是model名字的复数，例如我这里的话，默认表名就成了Goodss了，默认主键是id）</p>\n<p>复制代码<br>&lt;?php</p>\n<p>namespace App;</p>\n<p>use Illuminate\\Database\\Eloquent\\Model;</p>\n<p>class Goods extends Model<br>{<br>    protected $table         = “goods”;<br>    protected $primaryKey     = “goods_id”;<br>    //<br>}<br>复制代码</p>\n<p>3、数据库操作的话，这按之前的查询构建器的写法来就行了，不过这里不再是用的 DB::table(‘table_name’) 了，直接用$this就行了，例如：</p>\n<p>$goods = $this-&gt;where(‘goods_id’, ‘1’)-&gt;first();<br>当然，这时在Model里方法的写法，在别的地方（例如控制器）调用Model的话，要实例化一个模型来调用</p>\n<p>$goods = \\App\\Goods::where(‘goods_id’, ‘1’)-&gt;first();<br>如果我们需要通过模型查询多次的话，先实例化一个模型并赋值给一个变量是一个不错的选择</p>\n<p>$goodsModel = new \\App\\Goods();<br>$row        = $goodsModel-&gt;where(‘goods_id’, $id)-&gt;first();<br>$count      = $goodsModel-&gt;count();</p>\n<p>3）Eloquent 模型特有的方法</p>\n<p>Eloquent 除了具备 “查询构建器” 的所有功能（方法），它还自己的一些“更强大”的方法（DB::table不能使用的方法）</p>\n<p>1、find 方法，find 方法可以查询一行或多行</p>\n<p>$goodsModel = \\App\\Goods();<br>$one        = $goodsModel-&gt;find(1);<br>$some       = $goodsModel-&gt;find([1,2,3,4]);</p>\n<p>2、save 方法，save 方法具备 insert 方法和 update 方法的功能（记录不存在时insert，记录存在时update）</p>\n<p>复制代码<br>$model-&gt;save(<br>    [‘email’ =&gt; ‘john@example.com’, ‘votes’ =&gt; 0]<br>);</p>\n<p>$model-&gt;save(<br>    [‘id’=&gt;1,’email’ =&gt; ‘john@example.com’, ‘votes’ =&gt; 0]<br>);<br>复制代码<br>更新时，需要提示数据表的主键字段，例如上面的id字段</p>\n<p>PS：如果你在做数据迁移时，有设置到 $table-&gt;timestamps()，生成数据表时会有一个 created_at 字段 和 updated_at 字段，而使用save方法插入或更新记录时，这两个字段会被自动更新（使用insert和update方法没这种效果）</p>\n"},{"title":"How to write Golang code in china","date":"2017-12-01T08:03:10.000Z","_content":"","source":"_posts/How-to-write-Golang-code-in-china.md","raw":"---\ntitle: How to write Golang code in china\ndate: 2017-12-01 16:03:10\ntags:\n---\n","slug":"How-to-write-Golang-code-in-china","published":1,"updated":"2017-12-01T08:05:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvec80006yhfyc9ma7fed","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Laravel-dingo-jwt-auth","date":"2017-06-28T12:37:29.000Z","_content":"\n# Laravel5&dingo&Jwt-auth组合开启API时代\n\n##  前面的话\n\n如同运维日志处理方面的ELK黄金组合一样，如今API大道其行，LDJ也是RESTful-API的绝佳组合。\n\n## 安装\n### composer安装Laravel\n\ncomposer是当下PHP包管理利器，其安装就不在此占用篇幅了。\ncomposer create-project laravel/laravel  myapi\n### 集成Dingo JWT-auth\n\n","source":"_posts/Laravel-dingo-jwt-auth.md","raw":"---\ntitle: Laravel-dingo-jwt-auth\ndate: 2017-06-28 20:37:29\ntags: {php,Laravel,dingo,Jwt-auth}\n---\n\n# Laravel5&dingo&Jwt-auth组合开启API时代\n\n##  前面的话\n\n如同运维日志处理方面的ELK黄金组合一样，如今API大道其行，LDJ也是RESTful-API的绝佳组合。\n\n## 安装\n### composer安装Laravel\n\ncomposer是当下PHP包管理利器，其安装就不在此占用篇幅了。\ncomposer create-project laravel/laravel  myapi\n### 集成Dingo JWT-auth\n\n","slug":"Laravel-dingo-jwt-auth","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvec90007yhfye0ymw42d","content":"<h1 id=\"Laravel5-amp-dingo-amp-Jwt-auth组合开启API时代\"><a href=\"#Laravel5-amp-dingo-amp-Jwt-auth组合开启API时代\" class=\"headerlink\" title=\"Laravel5&amp;dingo&amp;Jwt-auth组合开启API时代\"></a>Laravel5&amp;dingo&amp;Jwt-auth组合开启API时代</h1><h2 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h2><p>如同运维日志处理方面的ELK黄金组合一样，如今API大道其行，LDJ也是RESTful-API的绝佳组合。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"composer安装Laravel\"><a href=\"#composer安装Laravel\" class=\"headerlink\" title=\"composer安装Laravel\"></a>composer安装Laravel</h3><p>composer是当下PHP包管理利器，其安装就不在此占用篇幅了。<br>composer create-project laravel/laravel  myapi</p>\n<h3 id=\"集成Dingo-JWT-auth\"><a href=\"#集成Dingo-JWT-auth\" class=\"headerlink\" title=\"集成Dingo JWT-auth\"></a>集成Dingo JWT-auth</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Laravel5-amp-dingo-amp-Jwt-auth组合开启API时代\"><a href=\"#Laravel5-amp-dingo-amp-Jwt-auth组合开启API时代\" class=\"headerlink\" title=\"Laravel5&amp;dingo&amp;Jwt-auth组合开启API时代\"></a>Laravel5&amp;dingo&amp;Jwt-auth组合开启API时代</h1><h2 id=\"前面的话\"><a href=\"#前面的话\" class=\"headerlink\" title=\"前面的话\"></a>前面的话</h2><p>如同运维日志处理方面的ELK黄金组合一样，如今API大道其行，LDJ也是RESTful-API的绝佳组合。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"composer安装Laravel\"><a href=\"#composer安装Laravel\" class=\"headerlink\" title=\"composer安装Laravel\"></a>composer安装Laravel</h3><p>composer是当下PHP包管理利器，其安装就不在此占用篇幅了。<br>composer create-project laravel/laravel  myapi</p>\n<h3 id=\"集成Dingo-JWT-auth\"><a href=\"#集成Dingo-JWT-auth\" class=\"headerlink\" title=\"集成Dingo JWT-auth\"></a>集成Dingo JWT-auth</h3>"},{"title":"Laravel-select-update-delete-insert","date":"2017-07-05T08:11:44.000Z","_content":"\nLaravel框架——增删改查\n\n增：\n\n//save返回true false\n\n$res = new member();\n\nres->username = 'a';\n\n$res->password = 'b';\n\ndd($res->save());\n\n　　\n\n//返回插入数据的数组array\n\n$res = member::create(['username'=>'add','password'=>'addp'])->asArray();\n\ndd($res);\n\n//create只能添加一条，如果需要批量插入用insert\n\nMember::insert($data)\n\n \n\n//先去数据库中找，如果没有找到则创建，返回的都是对象\n\n$res = member::firstOrCreate(['username'=>'asfsds']);\n\ndd($res['id']);\n\n　　\n\n删：\n\n \n\n//通过主键删除 返回删除的条数\n\n$res = member::destroy(13);\n\nmember::destroy([1, 2, 3]);\n\nmember::destroy(1, 2, 3);\n\ndd($res);\n\n　　\n\n//通过查询删除，返回删除条数\n\n$res = member::where('id',12)->delete();\n\ndd($res);\n\n　　\n\n改：\n\n//返回修改成功的条数\n\n$res = member::where('username','XJ')->update(['username'=>'xj']);\n\ndd($res);\n\n \n\n//save()返回true or false\n\n$res = member::where('username','xj')->first();\n\n$res->username = 'XJ';\n\nif ($res->save()){\n\n    dd('修改成功');\n\n} else {\n\n     dd('修改失败');\n\n}\n\n　　\n\n查：\n\n　　查询一条信息：\n\n// 通过主键获取模型...\n\nmodel::find(1);\n\n// 获取匹配查询条件的第一个模型...\n\nmodel::where('id', 1)->first();\n\n//如果有时候你可能想要在模型找不到的时候抛出异常(如果没找到跳转到404页面)\n\nmodel::findOrFail(1);\n\nmodel::where('id','>',0)->firstOrFail();\n\n　　\n\n　　获取聚合：例如count、sum、max　\n\nmodel::where('active', 1)->count();\n\nmodel::where('active', 1)->max('col');\n\n　　判断查询结果是否为空，并且转成数组　　\n\n$result = Model::where(...)->get();\n\n//不为空则\n\nif ($result->first()) { }\n\nif (!$result->isEmpty()) { }\n\nif ($result->count()) { }\n\n　　多条件查询：\n\n$res = member::where('id','>',0)->where('username','aaa')->get();\n\nor\n\n$res = member::where([['id','>',0],['username','aaa']])->get();\n\n　　IN查询\n\n//可以用get获取单个字段，但是也必须是数组类型\n\n$res = member::whereIn('id',[1,2,3])->get(['username'])->toArray();\n\n$res = member::whereNotIn('id',[1,2,3])->get()->toArray();\n\n　　between查询\n\n$res = member::whereBetween('id',[1,3])->get()->toArray();\n\n$res = member::whereNotBetween('id',[1,3])->get()->toArray();\n\n　　null/notnull查询\n\n$res = member::whereNull('username')->get()->toArray();\n\n$res = member::whereNotNull('username')->get()->toArray();\n\n","source":"_posts/Laravel-select-update-delete-insert.md","raw":"---\n\ntitle: Laravel-select-update-delete-insert\n\ndate: 2017-07-05 16:11:44\n\ntags:\n\n---\n\nLaravel框架——增删改查\n\n增：\n\n//save返回true false\n\n$res = new member();\n\nres->username = 'a';\n\n$res->password = 'b';\n\ndd($res->save());\n\n　　\n\n//返回插入数据的数组array\n\n$res = member::create(['username'=>'add','password'=>'addp'])->asArray();\n\ndd($res);\n\n//create只能添加一条，如果需要批量插入用insert\n\nMember::insert($data)\n\n \n\n//先去数据库中找，如果没有找到则创建，返回的都是对象\n\n$res = member::firstOrCreate(['username'=>'asfsds']);\n\ndd($res['id']);\n\n　　\n\n删：\n\n \n\n//通过主键删除 返回删除的条数\n\n$res = member::destroy(13);\n\nmember::destroy([1, 2, 3]);\n\nmember::destroy(1, 2, 3);\n\ndd($res);\n\n　　\n\n//通过查询删除，返回删除条数\n\n$res = member::where('id',12)->delete();\n\ndd($res);\n\n　　\n\n改：\n\n//返回修改成功的条数\n\n$res = member::where('username','XJ')->update(['username'=>'xj']);\n\ndd($res);\n\n \n\n//save()返回true or false\n\n$res = member::where('username','xj')->first();\n\n$res->username = 'XJ';\n\nif ($res->save()){\n\n    dd('修改成功');\n\n} else {\n\n     dd('修改失败');\n\n}\n\n　　\n\n查：\n\n　　查询一条信息：\n\n// 通过主键获取模型...\n\nmodel::find(1);\n\n// 获取匹配查询条件的第一个模型...\n\nmodel::where('id', 1)->first();\n\n//如果有时候你可能想要在模型找不到的时候抛出异常(如果没找到跳转到404页面)\n\nmodel::findOrFail(1);\n\nmodel::where('id','>',0)->firstOrFail();\n\n　　\n\n　　获取聚合：例如count、sum、max　\n\nmodel::where('active', 1)->count();\n\nmodel::where('active', 1)->max('col');\n\n　　判断查询结果是否为空，并且转成数组　　\n\n$result = Model::where(...)->get();\n\n//不为空则\n\nif ($result->first()) { }\n\nif (!$result->isEmpty()) { }\n\nif ($result->count()) { }\n\n　　多条件查询：\n\n$res = member::where('id','>',0)->where('username','aaa')->get();\n\nor\n\n$res = member::where([['id','>',0],['username','aaa']])->get();\n\n　　IN查询\n\n//可以用get获取单个字段，但是也必须是数组类型\n\n$res = member::whereIn('id',[1,2,3])->get(['username'])->toArray();\n\n$res = member::whereNotIn('id',[1,2,3])->get()->toArray();\n\n　　between查询\n\n$res = member::whereBetween('id',[1,3])->get()->toArray();\n\n$res = member::whereNotBetween('id',[1,3])->get()->toArray();\n\n　　null/notnull查询\n\n$res = member::whereNull('username')->get()->toArray();\n\n$res = member::whereNotNull('username')->get()->toArray();\n\n","slug":"Laravel-select-update-delete-insert","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecb0009yhfyujfm4qg0","content":"<p>Laravel框架——增删改查</p>\n<p>增：</p>\n<p>//save返回true false</p>\n<p>$res = new member();</p>\n<p>res-&gt;username = ‘a’;</p>\n<p>$res-&gt;password = ‘b’;</p>\n<p>dd($res-&gt;save());</p>\n<p>　　</p>\n<p>//返回插入数据的数组array</p>\n<p>$res = member::create([‘username’=&gt;’add’,’password’=&gt;’addp’])-&gt;asArray();</p>\n<p>dd($res);</p>\n<p>//create只能添加一条，如果需要批量插入用insert</p>\n<p>Member::insert($data)</p>\n<p>//先去数据库中找，如果没有找到则创建，返回的都是对象</p>\n<p>$res = member::firstOrCreate([‘username’=&gt;’asfsds’]);</p>\n<p>dd($res[‘id’]);</p>\n<p>　　</p>\n<p>删：</p>\n<p>//通过主键删除 返回删除的条数</p>\n<p>$res = member::destroy(13);</p>\n<p>member::destroy([1, 2, 3]);</p>\n<p>member::destroy(1, 2, 3);</p>\n<p>dd($res);</p>\n<p>　　</p>\n<p>//通过查询删除，返回删除条数</p>\n<p>$res = member::where(‘id’,12)-&gt;delete();</p>\n<p>dd($res);</p>\n<p>　　</p>\n<p>改：</p>\n<p>//返回修改成功的条数</p>\n<p>$res = member::where(‘username’,’XJ’)-&gt;update([‘username’=&gt;’xj’]);</p>\n<p>dd($res);</p>\n<p>//save()返回true or false</p>\n<p>$res = member::where(‘username’,’xj’)-&gt;first();</p>\n<p>$res-&gt;username = ‘XJ’;</p>\n<p>if ($res-&gt;save()){</p>\n<pre><code>dd(&apos;修改成功&apos;);\n</code></pre><p>} else {</p>\n<pre><code>dd(&apos;修改失败&apos;);\n</code></pre><p>}</p>\n<p>　　</p>\n<p>查：</p>\n<p>　　查询一条信息：</p>\n<p>// 通过主键获取模型…</p>\n<p>model::find(1);</p>\n<p>// 获取匹配查询条件的第一个模型…</p>\n<p>model::where(‘id’, 1)-&gt;first();</p>\n<p>//如果有时候你可能想要在模型找不到的时候抛出异常(如果没找到跳转到404页面)</p>\n<p>model::findOrFail(1);</p>\n<p>model::where(‘id’,’&gt;’,0)-&gt;firstOrFail();</p>\n<p>　　</p>\n<p>　　获取聚合：例如count、sum、max　</p>\n<p>model::where(‘active’, 1)-&gt;count();</p>\n<p>model::where(‘active’, 1)-&gt;max(‘col’);</p>\n<p>　　判断查询结果是否为空，并且转成数组　　</p>\n<p>$result = Model::where(…)-&gt;get();</p>\n<p>//不为空则</p>\n<p>if ($result-&gt;first()) { }</p>\n<p>if (!$result-&gt;isEmpty()) { }</p>\n<p>if ($result-&gt;count()) { }</p>\n<p>　　多条件查询：</p>\n<p>$res = member::where(‘id’,’&gt;’,0)-&gt;where(‘username’,’aaa’)-&gt;get();</p>\n<p>or</p>\n<p>$res = member::where([[‘id’,’&gt;’,0],[‘username’,’aaa’]])-&gt;get();</p>\n<p>　　IN查询</p>\n<p>//可以用get获取单个字段，但是也必须是数组类型</p>\n<p>$res = member::whereIn(‘id’,[1,2,3])-&gt;get([‘username’])-&gt;toArray();</p>\n<p>$res = member::whereNotIn(‘id’,[1,2,3])-&gt;get()-&gt;toArray();</p>\n<p>　　between查询</p>\n<p>$res = member::whereBetween(‘id’,[1,3])-&gt;get()-&gt;toArray();</p>\n<p>$res = member::whereNotBetween(‘id’,[1,3])-&gt;get()-&gt;toArray();</p>\n<p>　　null/notnull查询</p>\n<p>$res = member::whereNull(‘username’)-&gt;get()-&gt;toArray();</p>\n<p>$res = member::whereNotNull(‘username’)-&gt;get()-&gt;toArray();</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Laravel框架——增删改查</p>\n<p>增：</p>\n<p>//save返回true false</p>\n<p>$res = new member();</p>\n<p>res-&gt;username = ‘a’;</p>\n<p>$res-&gt;password = ‘b’;</p>\n<p>dd($res-&gt;save());</p>\n<p>　　</p>\n<p>//返回插入数据的数组array</p>\n<p>$res = member::create([‘username’=&gt;’add’,’password’=&gt;’addp’])-&gt;asArray();</p>\n<p>dd($res);</p>\n<p>//create只能添加一条，如果需要批量插入用insert</p>\n<p>Member::insert($data)</p>\n<p>//先去数据库中找，如果没有找到则创建，返回的都是对象</p>\n<p>$res = member::firstOrCreate([‘username’=&gt;’asfsds’]);</p>\n<p>dd($res[‘id’]);</p>\n<p>　　</p>\n<p>删：</p>\n<p>//通过主键删除 返回删除的条数</p>\n<p>$res = member::destroy(13);</p>\n<p>member::destroy([1, 2, 3]);</p>\n<p>member::destroy(1, 2, 3);</p>\n<p>dd($res);</p>\n<p>　　</p>\n<p>//通过查询删除，返回删除条数</p>\n<p>$res = member::where(‘id’,12)-&gt;delete();</p>\n<p>dd($res);</p>\n<p>　　</p>\n<p>改：</p>\n<p>//返回修改成功的条数</p>\n<p>$res = member::where(‘username’,’XJ’)-&gt;update([‘username’=&gt;’xj’]);</p>\n<p>dd($res);</p>\n<p>//save()返回true or false</p>\n<p>$res = member::where(‘username’,’xj’)-&gt;first();</p>\n<p>$res-&gt;username = ‘XJ’;</p>\n<p>if ($res-&gt;save()){</p>\n<pre><code>dd(&apos;修改成功&apos;);\n</code></pre><p>} else {</p>\n<pre><code>dd(&apos;修改失败&apos;);\n</code></pre><p>}</p>\n<p>　　</p>\n<p>查：</p>\n<p>　　查询一条信息：</p>\n<p>// 通过主键获取模型…</p>\n<p>model::find(1);</p>\n<p>// 获取匹配查询条件的第一个模型…</p>\n<p>model::where(‘id’, 1)-&gt;first();</p>\n<p>//如果有时候你可能想要在模型找不到的时候抛出异常(如果没找到跳转到404页面)</p>\n<p>model::findOrFail(1);</p>\n<p>model::where(‘id’,’&gt;’,0)-&gt;firstOrFail();</p>\n<p>　　</p>\n<p>　　获取聚合：例如count、sum、max　</p>\n<p>model::where(‘active’, 1)-&gt;count();</p>\n<p>model::where(‘active’, 1)-&gt;max(‘col’);</p>\n<p>　　判断查询结果是否为空，并且转成数组　　</p>\n<p>$result = Model::where(…)-&gt;get();</p>\n<p>//不为空则</p>\n<p>if ($result-&gt;first()) { }</p>\n<p>if (!$result-&gt;isEmpty()) { }</p>\n<p>if ($result-&gt;count()) { }</p>\n<p>　　多条件查询：</p>\n<p>$res = member::where(‘id’,’&gt;’,0)-&gt;where(‘username’,’aaa’)-&gt;get();</p>\n<p>or</p>\n<p>$res = member::where([[‘id’,’&gt;’,0],[‘username’,’aaa’]])-&gt;get();</p>\n<p>　　IN查询</p>\n<p>//可以用get获取单个字段，但是也必须是数组类型</p>\n<p>$res = member::whereIn(‘id’,[1,2,3])-&gt;get([‘username’])-&gt;toArray();</p>\n<p>$res = member::whereNotIn(‘id’,[1,2,3])-&gt;get()-&gt;toArray();</p>\n<p>　　between查询</p>\n<p>$res = member::whereBetween(‘id’,[1,3])-&gt;get()-&gt;toArray();</p>\n<p>$res = member::whereNotBetween(‘id’,[1,3])-&gt;get()-&gt;toArray();</p>\n<p>　　null/notnull查询</p>\n<p>$res = member::whereNull(‘username’)-&gt;get()-&gt;toArray();</p>\n<p>$res = member::whereNotNull(‘username’)-&gt;get()-&gt;toArray();</p>\n"},{"title":"PHP debugging skills","date":"2017-07-04T04:47:29.000Z","_content":"# php 初学者的一些调试技巧\n程序不是一次成型，遇到问题了，怎么定位问题，初学者请看以下：\n法宝１：\nini_set('display_errors',true);ini_set('error_reporting',E_ERROR);\n\n程序前面加上这个语句，会有明确的错误提示。\n法宝２：\ndie('L:'.__LINE__);\n出了问题，在疑似有问题的地方插入一句，直到不出现‘L:行数’，可以确定此句前一行存在问题。\n\n法宝3：\nvar_dump(变量1,变量2,...,变量n);die('L:'.__LINE__);\n看到的是不是预想的？\n","source":"_posts/PHP-debugging-skills.md","raw":"---\ntitle: PHP debugging skills\ndate: 2017-07-04 12:47:29\ntags:\n---\n# php 初学者的一些调试技巧\n程序不是一次成型，遇到问题了，怎么定位问题，初学者请看以下：\n法宝１：\nini_set('display_errors',true);ini_set('error_reporting',E_ERROR);\n\n程序前面加上这个语句，会有明确的错误提示。\n法宝２：\ndie('L:'.__LINE__);\n出了问题，在疑似有问题的地方插入一句，直到不出现‘L:行数’，可以确定此句前一行存在问题。\n\n法宝3：\nvar_dump(变量1,变量2,...,变量n);die('L:'.__LINE__);\n看到的是不是预想的？\n","slug":"PHP-debugging-skills","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecc000byhfyi5da9i2l","content":"<h1 id=\"php-初学者的一些调试技巧\"><a href=\"#php-初学者的一些调试技巧\" class=\"headerlink\" title=\"php 初学者的一些调试技巧\"></a>php 初学者的一些调试技巧</h1><p>程序不是一次成型，遇到问题了，怎么定位问题，初学者请看以下：<br>法宝１：<br>ini_set(‘display_errors’,true);ini_set(‘error_reporting’,E_ERROR);</p>\n<p>程序前面加上这个语句，会有明确的错误提示。<br>法宝２：<br>die(‘L:’.<strong>LINE</strong>);<br>出了问题，在疑似有问题的地方插入一句，直到不出现‘L:行数’，可以确定此句前一行存在问题。</p>\n<p>法宝3：<br>var_dump(变量1,变量2,…,变量n);die(‘L:’.<strong>LINE</strong>);<br>看到的是不是预想的？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"php-初学者的一些调试技巧\"><a href=\"#php-初学者的一些调试技巧\" class=\"headerlink\" title=\"php 初学者的一些调试技巧\"></a>php 初学者的一些调试技巧</h1><p>程序不是一次成型，遇到问题了，怎么定位问题，初学者请看以下：<br>法宝１：<br>ini_set(‘display_errors’,true);ini_set(‘error_reporting’,E_ERROR);</p>\n<p>程序前面加上这个语句，会有明确的错误提示。<br>法宝２：<br>die(‘L:’.<strong>LINE</strong>);<br>出了问题，在疑似有问题的地方插入一句，直到不出现‘L:行数’，可以确定此句前一行存在问题。</p>\n<p>法宝3：<br>var_dump(变量1,变量2,…,变量n);die(‘L:’.<strong>LINE</strong>);<br>看到的是不是预想的？</p>\n"},{"layout":"Mutt","title":"1","date":"2017-06-22T08:46:44.000Z","_content":"# 从Linux发送邮件说起\n##  运维之道\n\n没有绝对稳定的系统，能在第一时间发现故障并解决它，就是一个合格的运维工程师。\n如何第一时间发现故障，甚至防患于未然，本文不做讨论。\n今天要说的是，如何把故障消息迅速传送给一线的运维工程师。\n发邮件、发短信、打电话，最基础的当然是发邮件。\n\n##  Linux邮件之旅\n最早的Linux老鸟，应该都熟悉mail/mailx;\n### mail/mailx 老牌的信使\nmail／mailx这是Linux发行版标配的邮件客户端\nmailx [-BDdEFintv~] [-s subject] [-a attachment ] [-c cc-addr] [-b bcc-addr] [-r from-addr] [-h hops] [-A account] [-S variable[=value]] to-addr . . .\neg：echo \"Email text\" | mail -s \"Test Subject\" user@example.com\n-s后面注明主题\necho “Body with attachment \"| mail -a foo.tar.gz -s \"attached file\" user@example.com\n-a用来制定附件路径\nmail -s \"message send from file\" user@example.com < /path/to/file\n也可以读取文件作为邮件内容。\n\n### Mutt 邮件利器\nmutt在Unix上历史悠久，Linux也是声名远扬。\n相对mail/mailx来说，它甚至不依赖sendmail服务。\n命令格式与mail基本相同\necho \"This is the body\" | mutt -s \"Testing\" user@example.com -a foo.tar.gz –a bar.tar.gz\nmutt以来postfix,要求这个服务必须开启。\n另外如果安装后，后来又修改了主机名hostname也是会出问题的。\n---------------\n邮件传输系统设计之初用于传送7位编码（类似ASCII）的文本内容，对于8位的二进制内容（如程序文件或者图片）必须借助一个uuencode的工具完成。\neg：uuencode example.jpeg example.jpeg | mutt user@example.com","source":"_posts/Mail-tools-for-Linux.md","raw":"---\nlayout: Mutt\ntitle: 1\ndate: 2017-06-22 16:46:44\ntags: Linux,mutt\n---\n# 从Linux发送邮件说起\n##  运维之道\n\n没有绝对稳定的系统，能在第一时间发现故障并解决它，就是一个合格的运维工程师。\n如何第一时间发现故障，甚至防患于未然，本文不做讨论。\n今天要说的是，如何把故障消息迅速传送给一线的运维工程师。\n发邮件、发短信、打电话，最基础的当然是发邮件。\n\n##  Linux邮件之旅\n最早的Linux老鸟，应该都熟悉mail/mailx;\n### mail/mailx 老牌的信使\nmail／mailx这是Linux发行版标配的邮件客户端\nmailx [-BDdEFintv~] [-s subject] [-a attachment ] [-c cc-addr] [-b bcc-addr] [-r from-addr] [-h hops] [-A account] [-S variable[=value]] to-addr . . .\neg：echo \"Email text\" | mail -s \"Test Subject\" user@example.com\n-s后面注明主题\necho “Body with attachment \"| mail -a foo.tar.gz -s \"attached file\" user@example.com\n-a用来制定附件路径\nmail -s \"message send from file\" user@example.com < /path/to/file\n也可以读取文件作为邮件内容。\n\n### Mutt 邮件利器\nmutt在Unix上历史悠久，Linux也是声名远扬。\n相对mail/mailx来说，它甚至不依赖sendmail服务。\n命令格式与mail基本相同\necho \"This is the body\" | mutt -s \"Testing\" user@example.com -a foo.tar.gz –a bar.tar.gz\nmutt以来postfix,要求这个服务必须开启。\n另外如果安装后，后来又修改了主机名hostname也是会出问题的。\n---------------\n邮件传输系统设计之初用于传送7位编码（类似ASCII）的文本内容，对于8位的二进制内容（如程序文件或者图片）必须借助一个uuencode的工具完成。\neg：uuencode example.jpeg example.jpeg | mutt user@example.com","slug":"Mail-tools-for-Linux","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"photos":[],"link":"","_id":"cjj5hvece000cyhfygubpmv9v","content":"<h1 id=\"从Linux发送邮件说起\"><a href=\"#从Linux发送邮件说起\" class=\"headerlink\" title=\"从Linux发送邮件说起\"></a>从Linux发送邮件说起</h1><h2 id=\"运维之道\"><a href=\"#运维之道\" class=\"headerlink\" title=\"运维之道\"></a>运维之道</h2><p>没有绝对稳定的系统，能在第一时间发现故障并解决它，就是一个合格的运维工程师。<br>如何第一时间发现故障，甚至防患于未然，本文不做讨论。<br>今天要说的是，如何把故障消息迅速传送给一线的运维工程师。<br>发邮件、发短信、打电话，最基础的当然是发邮件。</p>\n<h2 id=\"Linux邮件之旅\"><a href=\"#Linux邮件之旅\" class=\"headerlink\" title=\"Linux邮件之旅\"></a>Linux邮件之旅</h2><p>最早的Linux老鸟，应该都熟悉mail/mailx;</p>\n<h3 id=\"mail-mailx-老牌的信使\"><a href=\"#mail-mailx-老牌的信使\" class=\"headerlink\" title=\"mail/mailx 老牌的信使\"></a>mail/mailx 老牌的信使</h3><p>mail／mailx这是Linux发行版标配的邮件客户端<br>mailx [-BDdEFintv~] [-s subject] [-a attachment ] [-c cc-addr] [-b bcc-addr] [-r from-addr] [-h hops] [-A account] [-S variable[=value]] to-addr . . .<br>eg：echo “Email text” | mail -s “Test Subject” user@example.com<br>-s后面注明主题<br>echo “Body with attachment “| mail -a foo.tar.gz -s “attached file” user@example.com<br>-a用来制定附件路径<br>mail -s “message send from file” user@example.com &lt; /path/to/file<br>也可以读取文件作为邮件内容。</p>\n<h3 id=\"Mutt-邮件利器\"><a href=\"#Mutt-邮件利器\" class=\"headerlink\" title=\"Mutt 邮件利器\"></a>Mutt 邮件利器</h3><p>mutt在Unix上历史悠久，Linux也是声名远扬。<br>相对mail/mailx来说，它甚至不依赖sendmail服务。<br>命令格式与mail基本相同<br>echo “This is the body” | mutt -s “Testing” user@example.com -a foo.tar.gz –a bar.tar.gz<br>mutt以来postfix,要求这个服务必须开启。</p>\n<h2 id=\"另外如果安装后，后来又修改了主机名hostname也是会出问题的。\"><a href=\"#另外如果安装后，后来又修改了主机名hostname也是会出问题的。\" class=\"headerlink\" title=\"另外如果安装后，后来又修改了主机名hostname也是会出问题的。\"></a>另外如果安装后，后来又修改了主机名hostname也是会出问题的。</h2><p>邮件传输系统设计之初用于传送7位编码（类似ASCII）的文本内容，对于8位的二进制内容（如程序文件或者图片）必须借助一个uuencode的工具完成。<br>eg：uuencode example.jpeg example.jpeg | mutt user@example.com</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"从Linux发送邮件说起\"><a href=\"#从Linux发送邮件说起\" class=\"headerlink\" title=\"从Linux发送邮件说起\"></a>从Linux发送邮件说起</h1><h2 id=\"运维之道\"><a href=\"#运维之道\" class=\"headerlink\" title=\"运维之道\"></a>运维之道</h2><p>没有绝对稳定的系统，能在第一时间发现故障并解决它，就是一个合格的运维工程师。<br>如何第一时间发现故障，甚至防患于未然，本文不做讨论。<br>今天要说的是，如何把故障消息迅速传送给一线的运维工程师。<br>发邮件、发短信、打电话，最基础的当然是发邮件。</p>\n<h2 id=\"Linux邮件之旅\"><a href=\"#Linux邮件之旅\" class=\"headerlink\" title=\"Linux邮件之旅\"></a>Linux邮件之旅</h2><p>最早的Linux老鸟，应该都熟悉mail/mailx;</p>\n<h3 id=\"mail-mailx-老牌的信使\"><a href=\"#mail-mailx-老牌的信使\" class=\"headerlink\" title=\"mail/mailx 老牌的信使\"></a>mail/mailx 老牌的信使</h3><p>mail／mailx这是Linux发行版标配的邮件客户端<br>mailx [-BDdEFintv~] [-s subject] [-a attachment ] [-c cc-addr] [-b bcc-addr] [-r from-addr] [-h hops] [-A account] [-S variable[=value]] to-addr . . .<br>eg：echo “Email text” | mail -s “Test Subject” user@example.com<br>-s后面注明主题<br>echo “Body with attachment “| mail -a foo.tar.gz -s “attached file” user@example.com<br>-a用来制定附件路径<br>mail -s “message send from file” user@example.com &lt; /path/to/file<br>也可以读取文件作为邮件内容。</p>\n<h3 id=\"Mutt-邮件利器\"><a href=\"#Mutt-邮件利器\" class=\"headerlink\" title=\"Mutt 邮件利器\"></a>Mutt 邮件利器</h3><p>mutt在Unix上历史悠久，Linux也是声名远扬。<br>相对mail/mailx来说，它甚至不依赖sendmail服务。<br>命令格式与mail基本相同<br>echo “This is the body” | mutt -s “Testing” user@example.com -a foo.tar.gz –a bar.tar.gz<br>mutt以来postfix,要求这个服务必须开启。</p>\n<h2 id=\"另外如果安装后，后来又修改了主机名hostname也是会出问题的。\"><a href=\"#另外如果安装后，后来又修改了主机名hostname也是会出问题的。\" class=\"headerlink\" title=\"另外如果安装后，后来又修改了主机名hostname也是会出问题的。\"></a>另外如果安装后，后来又修改了主机名hostname也是会出问题的。</h2><p>邮件传输系统设计之初用于传送7位编码（类似ASCII）的文本内容，对于8位的二进制内容（如程序文件或者图片）必须借助一个uuencode的工具完成。<br>eg：uuencode example.jpeg example.jpeg | mutt user@example.com</p>\n"},{"title":"golang array slice map","date":"2017-07-14T06:26:28.000Z","_content":"# golang 中array\\slice\\map之间的区别\n\n\n## 声明和初始化\n1、指明存储数据的类型；2、存储元素的数量\n### 数组： \n\tvar array [5]int\n\tarray=[5]int{1,2,3,4,5}\n\t以上两步可以省略为array:=[5]int{1,2,3,4,5} 或者 array:=[...]int{1,0,3,0,5} 也可以array:=[5]int{1:2,3:9}\n### 切片：\n\tslice:=make([]int,5)默认切片容量是其长度，也可以指定其容量slice:=make([]int,5,10)\n\tslice:=[]int{1,2,3,4,5}或者slice:=[]int{4:2}切片不用数组那样制定[]中的值。\n\tvar nliSlice []int nil切片表示不存在的切片，slice:=[]int{}而空切片表示一个空集合，它们各有用处。\neg:\n对于底层数组容量是k的切片slice[i:j]来说\n长度：j-i len()\n容量:k-i  cap()\nslice := []int{1, 2, 3, 4, 5}\nslice1 := slice[:]\nslice2 := slice[0:]\nslice3 := slice[:5]\n### map:\n\tdict=make(map[string]int)\n\tdict[\"sa\"] = 6 \n\t以上可以简写dict:=map[string]int{\"sa\":6,\"yue\":2}\n## 使用\n### 数组：\n\tarray[1]=3 //修改\n### 切片：\n\tslice[1]=3 //  newSlice=append(newSlice,10,20,30)\n### map:\n\tdict[\"sa\"]=6 \n\tage,exists := dict[\"sa\"] ;delete(dict,\"alibaba\")\n## 遍历\n\tfor i,k = range array{\n\tfmt.Println(\"索引:%d,值:%d\\n\",i,v)\n}\n\t\n\tfor i,k = range slice{\n\tfmt.Println(\"索引:%d,值:%d\\n\",i,v)\n}\n\n\tfor key,value =range dict{\n\tfmt.Println(key,value)\n}\n","source":"_posts/golang-array-slice-map.md","raw":"---\ntitle: golang array slice map\ndate: 2017-07-14 14:26:28\ntags:\n---\n# golang 中array\\slice\\map之间的区别\n\n\n## 声明和初始化\n1、指明存储数据的类型；2、存储元素的数量\n### 数组： \n\tvar array [5]int\n\tarray=[5]int{1,2,3,4,5}\n\t以上两步可以省略为array:=[5]int{1,2,3,4,5} 或者 array:=[...]int{1,0,3,0,5} 也可以array:=[5]int{1:2,3:9}\n### 切片：\n\tslice:=make([]int,5)默认切片容量是其长度，也可以指定其容量slice:=make([]int,5,10)\n\tslice:=[]int{1,2,3,4,5}或者slice:=[]int{4:2}切片不用数组那样制定[]中的值。\n\tvar nliSlice []int nil切片表示不存在的切片，slice:=[]int{}而空切片表示一个空集合，它们各有用处。\neg:\n对于底层数组容量是k的切片slice[i:j]来说\n长度：j-i len()\n容量:k-i  cap()\nslice := []int{1, 2, 3, 4, 5}\nslice1 := slice[:]\nslice2 := slice[0:]\nslice3 := slice[:5]\n### map:\n\tdict=make(map[string]int)\n\tdict[\"sa\"] = 6 \n\t以上可以简写dict:=map[string]int{\"sa\":6,\"yue\":2}\n## 使用\n### 数组：\n\tarray[1]=3 //修改\n### 切片：\n\tslice[1]=3 //  newSlice=append(newSlice,10,20,30)\n### map:\n\tdict[\"sa\"]=6 \n\tage,exists := dict[\"sa\"] ;delete(dict,\"alibaba\")\n## 遍历\n\tfor i,k = range array{\n\tfmt.Println(\"索引:%d,值:%d\\n\",i,v)\n}\n\t\n\tfor i,k = range slice{\n\tfmt.Println(\"索引:%d,值:%d\\n\",i,v)\n}\n\n\tfor key,value =range dict{\n\tfmt.Println(key,value)\n}\n","slug":"golang-array-slice-map","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecf000dyhfyeq5l73ma","content":"<h1 id=\"golang-中array-slice-map之间的区别\"><a href=\"#golang-中array-slice-map之间的区别\" class=\"headerlink\" title=\"golang 中array\\slice\\map之间的区别\"></a>golang 中array\\slice\\map之间的区别</h1><h2 id=\"声明和初始化\"><a href=\"#声明和初始化\" class=\"headerlink\" title=\"声明和初始化\"></a>声明和初始化</h2><p>1、指明存储数据的类型；2、存储元素的数量</p>\n<h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><pre><code>var array [5]int\narray=[5]int{1,2,3,4,5}\n以上两步可以省略为array:=[5]int{1,2,3,4,5} 或者 array:=[...]int{1,0,3,0,5} 也可以array:=[5]int{1:2,3:9}\n</code></pre><h3 id=\"切片：\"><a href=\"#切片：\" class=\"headerlink\" title=\"切片：\"></a>切片：</h3><pre><code>slice:=make([]int,5)默认切片容量是其长度，也可以指定其容量slice:=make([]int,5,10)\nslice:=[]int{1,2,3,4,5}或者slice:=[]int{4:2}切片不用数组那样制定[]中的值。\nvar nliSlice []int nil切片表示不存在的切片，slice:=[]int{}而空切片表示一个空集合，它们各有用处。\n</code></pre><p>eg:<br>对于底层数组容量是k的切片slice[i:j]来说<br>长度：j-i len()<br>容量:k-i  cap()<br>slice := []int{1, 2, 3, 4, 5}<br>slice1 := slice[:]<br>slice2 := slice[0:]<br>slice3 := slice[:5]</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map:\"></a>map:</h3><pre><code>dict=make(map[string]int)\ndict[&quot;sa&quot;] = 6 \n以上可以简写dict:=map[string]int{&quot;sa&quot;:6,&quot;yue&quot;:2}\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"数组：-1\"><a href=\"#数组：-1\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><pre><code>array[1]=3 //修改\n</code></pre><h3 id=\"切片：-1\"><a href=\"#切片：-1\" class=\"headerlink\" title=\"切片：\"></a>切片：</h3><pre><code>slice[1]=3 //  newSlice=append(newSlice,10,20,30)\n</code></pre><h3 id=\"map-1\"><a href=\"#map-1\" class=\"headerlink\" title=\"map:\"></a>map:</h3><pre><code>dict[&quot;sa&quot;]=6 \nage,exists := dict[&quot;sa&quot;] ;delete(dict,&quot;alibaba&quot;)\n</code></pre><h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><pre><code>for i,k = range array{\nfmt.Println(&quot;索引:%d,值:%d\\n&quot;,i,v)\n</code></pre><p>}</p>\n<pre><code>for i,k = range slice{\nfmt.Println(&quot;索引:%d,值:%d\\n&quot;,i,v)\n</code></pre><p>}</p>\n<pre><code>for key,value =range dict{\nfmt.Println(key,value)\n</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-中array-slice-map之间的区别\"><a href=\"#golang-中array-slice-map之间的区别\" class=\"headerlink\" title=\"golang 中array\\slice\\map之间的区别\"></a>golang 中array\\slice\\map之间的区别</h1><h2 id=\"声明和初始化\"><a href=\"#声明和初始化\" class=\"headerlink\" title=\"声明和初始化\"></a>声明和初始化</h2><p>1、指明存储数据的类型；2、存储元素的数量</p>\n<h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><pre><code>var array [5]int\narray=[5]int{1,2,3,4,5}\n以上两步可以省略为array:=[5]int{1,2,3,4,5} 或者 array:=[...]int{1,0,3,0,5} 也可以array:=[5]int{1:2,3:9}\n</code></pre><h3 id=\"切片：\"><a href=\"#切片：\" class=\"headerlink\" title=\"切片：\"></a>切片：</h3><pre><code>slice:=make([]int,5)默认切片容量是其长度，也可以指定其容量slice:=make([]int,5,10)\nslice:=[]int{1,2,3,4,5}或者slice:=[]int{4:2}切片不用数组那样制定[]中的值。\nvar nliSlice []int nil切片表示不存在的切片，slice:=[]int{}而空切片表示一个空集合，它们各有用处。\n</code></pre><p>eg:<br>对于底层数组容量是k的切片slice[i:j]来说<br>长度：j-i len()<br>容量:k-i  cap()<br>slice := []int{1, 2, 3, 4, 5}<br>slice1 := slice[:]<br>slice2 := slice[0:]<br>slice3 := slice[:5]</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map:\"></a>map:</h3><pre><code>dict=make(map[string]int)\ndict[&quot;sa&quot;] = 6 \n以上可以简写dict:=map[string]int{&quot;sa&quot;:6,&quot;yue&quot;:2}\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"数组：-1\"><a href=\"#数组：-1\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><pre><code>array[1]=3 //修改\n</code></pre><h3 id=\"切片：-1\"><a href=\"#切片：-1\" class=\"headerlink\" title=\"切片：\"></a>切片：</h3><pre><code>slice[1]=3 //  newSlice=append(newSlice,10,20,30)\n</code></pre><h3 id=\"map-1\"><a href=\"#map-1\" class=\"headerlink\" title=\"map:\"></a>map:</h3><pre><code>dict[&quot;sa&quot;]=6 \nage,exists := dict[&quot;sa&quot;] ;delete(dict,&quot;alibaba&quot;)\n</code></pre><h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><pre><code>for i,k = range array{\nfmt.Println(&quot;索引:%d,值:%d\\n&quot;,i,v)\n</code></pre><p>}</p>\n<pre><code>for i,k = range slice{\nfmt.Println(&quot;索引:%d,值:%d\\n&quot;,i,v)\n</code></pre><p>}</p>\n<pre><code>for key,value =range dict{\nfmt.Println(key,value)\n</code></pre><p>}</p>\n"},{"title":"about/array_map","date":"2017-07-07T08:51:55.000Z","_content":"# 关于array_map和array_walk\n## array_map\narray array_map ( callable $callback , array $array1 [, array $... ] )\n返回值是一个数组\n## array_walk\nbool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )\n返回值是一个布尔值\n## 两者的不同之处\n|------|---------|\n map    主要是为了得到你的回调函数处理后的新数组，要的是结果。\n map    主要是对数组中的值进行操作后返回数组，以得到一个新数组\n\n walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。\n walk   可以认为提供额外参数给回调函数，map不可以\n walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组\n walk   可以没有返回值 map要有，因为要填充数组\n","source":"_posts/about-array-map.md","raw":"---\ntitle: about/array_map\ndate: 2017-07-07 16:51:55\ntags:\n---\n# 关于array_map和array_walk\n## array_map\narray array_map ( callable $callback , array $array1 [, array $... ] )\n返回值是一个数组\n## array_walk\nbool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )\n返回值是一个布尔值\n## 两者的不同之处\n|------|---------|\n map    主要是为了得到你的回调函数处理后的新数组，要的是结果。\n map    主要是对数组中的值进行操作后返回数组，以得到一个新数组\n\n walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。\n walk   可以认为提供额外参数给回调函数，map不可以\n walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组\n walk   可以没有返回值 map要有，因为要填充数组\n","slug":"about-array-map","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecg000fyhfyife1a20z","content":"<h1 id=\"关于array-map和array-walk\"><a href=\"#关于array-map和array-walk\" class=\"headerlink\" title=\"关于array_map和array_walk\"></a>关于array_map和array_walk</h1><h2 id=\"array-map\"><a href=\"#array-map\" class=\"headerlink\" title=\"array_map\"></a>array_map</h2><p>array array_map ( callable $callback , array $array1 [, array $… ] )<br>返回值是一个数组</p>\n<h2 id=\"array-walk\"><a href=\"#array-walk\" class=\"headerlink\" title=\"array_walk\"></a>array_walk</h2><p>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )<br>返回值是一个布尔值</p>\n<h2 id=\"两者的不同之处\"><a href=\"#两者的不同之处\" class=\"headerlink\" title=\"两者的不同之处\"></a>两者的不同之处</h2><p>|——|———|<br> map    主要是为了得到你的回调函数处理后的新数组，要的是结果。<br> map    主要是对数组中的值进行操作后返回数组，以得到一个新数组</p>\n<p> walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。<br> walk   可以认为提供额外参数给回调函数，map不可以<br> walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组<br> walk   可以没有返回值 map要有，因为要填充数组</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于array-map和array-walk\"><a href=\"#关于array-map和array-walk\" class=\"headerlink\" title=\"关于array_map和array_walk\"></a>关于array_map和array_walk</h1><h2 id=\"array-map\"><a href=\"#array-map\" class=\"headerlink\" title=\"array_map\"></a>array_map</h2><p>array array_map ( callable $callback , array $array1 [, array $… ] )<br>返回值是一个数组</p>\n<h2 id=\"array-walk\"><a href=\"#array-walk\" class=\"headerlink\" title=\"array_walk\"></a>array_walk</h2><p>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )<br>返回值是一个布尔值</p>\n<h2 id=\"两者的不同之处\"><a href=\"#两者的不同之处\" class=\"headerlink\" title=\"两者的不同之处\"></a>两者的不同之处</h2><p>|——|———|<br> map    主要是为了得到你的回调函数处理后的新数组，要的是结果。<br> map    主要是对数组中的值进行操作后返回数组，以得到一个新数组</p>\n<p> walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。<br> walk   可以认为提供额外参数给回调函数，map不可以<br> walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组<br> walk   可以没有返回值 map要有，因为要填充数组</p>\n"},{"title":"about/array_map","date":"2017-07-07T08:51:55.000Z","_content":"# 关于array_map和array_walk\n## array_map\narray array_map ( callable $callback , array $array1 [, array $... ] )\n返回值是一个数组\n## array_walk\nbool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )\n返回值是一个布尔值\n## 两者的不同之处\n|------|---------|\n map    主要是为了得到你的回调函数处理后的新数组，要的是结果。\n map    主要是对数组中的值进行操作后返回数组，以得到一个新数组\n\n walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。\n walk   可以认为提供额外参数给回调函数，map不可以\n walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组\n walk   可以没有返回值 map要有，因为要填充数组\n","source":"_posts/map.md","raw":"---\ntitle: about/array_map\ndate: 2017-07-07 16:51:55\ntags:\n---\n# 关于array_map和array_walk\n## array_map\narray array_map ( callable $callback , array $array1 [, array $... ] )\n返回值是一个数组\n## array_walk\nbool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )\n返回值是一个布尔值\n## 两者的不同之处\n|------|---------|\n map    主要是为了得到你的回调函数处理后的新数组，要的是结果。\n map    主要是对数组中的值进行操作后返回数组，以得到一个新数组\n\n walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。\n walk   可以认为提供额外参数给回调函数，map不可以\n walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组\n walk   可以没有返回值 map要有，因为要填充数组\n","slug":"map","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecg000gyhfyxm703mj8","content":"<h1 id=\"关于array-map和array-walk\"><a href=\"#关于array-map和array-walk\" class=\"headerlink\" title=\"关于array_map和array_walk\"></a>关于array_map和array_walk</h1><h2 id=\"array-map\"><a href=\"#array-map\" class=\"headerlink\" title=\"array_map\"></a>array_map</h2><p>array array_map ( callable $callback , array $array1 [, array $… ] )<br>返回值是一个数组</p>\n<h2 id=\"array-walk\"><a href=\"#array-walk\" class=\"headerlink\" title=\"array_walk\"></a>array_walk</h2><p>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )<br>返回值是一个布尔值</p>\n<h2 id=\"两者的不同之处\"><a href=\"#两者的不同之处\" class=\"headerlink\" title=\"两者的不同之处\"></a>两者的不同之处</h2><p>|——|———|<br> map    主要是为了得到你的回调函数处理后的新数组，要的是结果。<br> map    主要是对数组中的值进行操作后返回数组，以得到一个新数组</p>\n<p> walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。<br> walk   可以认为提供额外参数给回调函数，map不可以<br> walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组<br> walk   可以没有返回值 map要有，因为要填充数组</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于array-map和array-walk\"><a href=\"#关于array-map和array-walk\" class=\"headerlink\" title=\"关于array_map和array_walk\"></a>关于array_map和array_walk</h1><h2 id=\"array-map\"><a href=\"#array-map\" class=\"headerlink\" title=\"array_map\"></a>array_map</h2><p>array array_map ( callable $callback , array $array1 [, array $… ] )<br>返回值是一个数组</p>\n<h2 id=\"array-walk\"><a href=\"#array-walk\" class=\"headerlink\" title=\"array_walk\"></a>array_walk</h2><p>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )<br>返回值是一个布尔值</p>\n<h2 id=\"两者的不同之处\"><a href=\"#两者的不同之处\" class=\"headerlink\" title=\"两者的不同之处\"></a>两者的不同之处</h2><p>|——|———|<br> map    主要是为了得到你的回调函数处理后的新数组，要的是结果。<br> map    主要是对数组中的值进行操作后返回数组，以得到一个新数组</p>\n<p> walk   主要是对每个参数都使用一次你的回调函数，要的是处理的过程。<br> walk   可以认为提供额外参数给回调函数，map不可以<br> walk   主要是要对数组内的每个值进行操作，操作结果影响原来的数组<br> walk   可以没有返回值 map要有，因为要填充数组</p>\n"},{"title":"golang struct init","date":"2017-12-06T07:03:52.000Z","_content":"^在Go语言中，未进行初始化的变量都会被初始化为该类型的零值，例如bool类型的零值为false, int类型的零值为0, string类型的零值为空字符串． 在Go语言中没有构造函数的概念,对象的创建通常交由一个全局的创建函数来完成,以NewXXX来命令,表示\"构造函数\":\n\n```\ntype UserInfo struct {\n\tUsername string\n\tAge int\n\tId  int\n} \n\nfunc NewUserInfo(username string,age,id int){\n\treturn &UserInfo{username,age,id}\n}\n```\n\n^ 结构体的初始化，因为使用了new()函数和&操作符，这几个变量全部是指向UserInfo结构的指针，即它们是指针变量。\n\n```\n a1 := new(UserInfo)\n a2 := &UserInfo{}\n a3 := &UserInfo{\"zhangsan\",23,3}\n a4 := &UserInfo{Username:\"zhangsan\"}\n```\n直接定义，将获得一个UserInfo{}类型的变量。\n\n```\nb1 := UserInfo{}\nb2 := UserInfo{Username:\"zhangsan\"}\n```\n\n\n用 new 分配内存 内建函数 new 本质上说跟其他语言中的同名函数功能一样：new(T) 分配了零值填充的 T 类型的内存空间，并且返回其地址，一个 *T 类型的值。用 Go 的术语说，它返回了一个指针，指向新分配的类型 T 的零值。记住这点非常重要。 这意味着使用者可以用 new 创建一个数据结构的实例并且可以直接工作。如 bytes.Buffer的文档所述 “Buffer 的零值是一个准备好了的空缓冲。” 类似的，sync.Mutex 也没有明确的构造函数或 Init 方法。取而代之，sync.Mutex 的零值被定义为非锁定的互斥量。 零值是非常有用的。务必记得 make 仅适用于 map，slice 和 channel，并且返回的不是指针。应当用 new获得特定的指针。\n\n","source":"_posts/golang-struct-init.md","raw":"---\ntitle: golang struct init\ndate: 2017-12-06 15:03:52\ntags: [golang,struct]\n---\n^在Go语言中，未进行初始化的变量都会被初始化为该类型的零值，例如bool类型的零值为false, int类型的零值为0, string类型的零值为空字符串． 在Go语言中没有构造函数的概念,对象的创建通常交由一个全局的创建函数来完成,以NewXXX来命令,表示\"构造函数\":\n\n```\ntype UserInfo struct {\n\tUsername string\n\tAge int\n\tId  int\n} \n\nfunc NewUserInfo(username string,age,id int){\n\treturn &UserInfo{username,age,id}\n}\n```\n\n^ 结构体的初始化，因为使用了new()函数和&操作符，这几个变量全部是指向UserInfo结构的指针，即它们是指针变量。\n\n```\n a1 := new(UserInfo)\n a2 := &UserInfo{}\n a3 := &UserInfo{\"zhangsan\",23,3}\n a4 := &UserInfo{Username:\"zhangsan\"}\n```\n直接定义，将获得一个UserInfo{}类型的变量。\n\n```\nb1 := UserInfo{}\nb2 := UserInfo{Username:\"zhangsan\"}\n```\n\n\n用 new 分配内存 内建函数 new 本质上说跟其他语言中的同名函数功能一样：new(T) 分配了零值填充的 T 类型的内存空间，并且返回其地址，一个 *T 类型的值。用 Go 的术语说，它返回了一个指针，指向新分配的类型 T 的零值。记住这点非常重要。 这意味着使用者可以用 new 创建一个数据结构的实例并且可以直接工作。如 bytes.Buffer的文档所述 “Buffer 的零值是一个准备好了的空缓冲。” 类似的，sync.Mutex 也没有明确的构造函数或 Init 方法。取而代之，sync.Mutex 的零值被定义为非锁定的互斥量。 零值是非常有用的。务必记得 make 仅适用于 map，slice 和 channel，并且返回的不是指针。应当用 new获得特定的指针。\n\n","slug":"golang-struct-init","published":1,"updated":"2017-12-06T07:28:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvech000hyhfyonytyfad","content":"<p>^在Go语言中，未进行初始化的变量都会被初始化为该类型的零值，例如bool类型的零值为false, int类型的零值为0, string类型的零值为空字符串． 在Go语言中没有构造函数的概念,对象的创建通常交由一个全局的创建函数来完成,以NewXXX来命令,表示”构造函数”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">type UserInfo struct &#123;</div><div class=\"line\">\tUsername string</div><div class=\"line\">\tAge int</div><div class=\"line\">\tId  int</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">func NewUserInfo(username string,age,id int)&#123;</div><div class=\"line\">\treturn &amp;UserInfo&#123;username,age,id&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>^ 结构体的初始化，因为使用了new()函数和&amp;操作符，这几个变量全部是指向UserInfo结构的指针，即它们是指针变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a1 := new(UserInfo)</div><div class=\"line\">a2 := &amp;UserInfo&#123;&#125;</div><div class=\"line\">a3 := &amp;UserInfo&#123;&quot;zhangsan&quot;,23,3&#125;</div><div class=\"line\">a4 := &amp;UserInfo&#123;Username:&quot;zhangsan&quot;&#125;</div></pre></td></tr></table></figure>\n<p>直接定义，将获得一个UserInfo{}类型的变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">b1 := UserInfo&#123;&#125;</div><div class=\"line\">b2 := UserInfo&#123;Username:&quot;zhangsan&quot;&#125;</div></pre></td></tr></table></figure>\n<p>用 new 分配内存 内建函数 new 本质上说跟其他语言中的同名函数功能一样：new(T) 分配了零值填充的 T 类型的内存空间，并且返回其地址，一个 *T 类型的值。用 Go 的术语说，它返回了一个指针，指向新分配的类型 T 的零值。记住这点非常重要。 这意味着使用者可以用 new 创建一个数据结构的实例并且可以直接工作。如 bytes.Buffer的文档所述 “Buffer 的零值是一个准备好了的空缓冲。” 类似的，sync.Mutex 也没有明确的构造函数或 Init 方法。取而代之，sync.Mutex 的零值被定义为非锁定的互斥量。 零值是非常有用的。务必记得 make 仅适用于 map，slice 和 channel，并且返回的不是指针。应当用 new获得特定的指针。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>^在Go语言中，未进行初始化的变量都会被初始化为该类型的零值，例如bool类型的零值为false, int类型的零值为0, string类型的零值为空字符串． 在Go语言中没有构造函数的概念,对象的创建通常交由一个全局的创建函数来完成,以NewXXX来命令,表示”构造函数”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">type UserInfo struct &#123;</div><div class=\"line\">\tUsername string</div><div class=\"line\">\tAge int</div><div class=\"line\">\tId  int</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">func NewUserInfo(username string,age,id int)&#123;</div><div class=\"line\">\treturn &amp;UserInfo&#123;username,age,id&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>^ 结构体的初始化，因为使用了new()函数和&amp;操作符，这几个变量全部是指向UserInfo结构的指针，即它们是指针变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a1 := new(UserInfo)</div><div class=\"line\">a2 := &amp;UserInfo&#123;&#125;</div><div class=\"line\">a3 := &amp;UserInfo&#123;&quot;zhangsan&quot;,23,3&#125;</div><div class=\"line\">a4 := &amp;UserInfo&#123;Username:&quot;zhangsan&quot;&#125;</div></pre></td></tr></table></figure>\n<p>直接定义，将获得一个UserInfo{}类型的变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">b1 := UserInfo&#123;&#125;</div><div class=\"line\">b2 := UserInfo&#123;Username:&quot;zhangsan&quot;&#125;</div></pre></td></tr></table></figure>\n<p>用 new 分配内存 内建函数 new 本质上说跟其他语言中的同名函数功能一样：new(T) 分配了零值填充的 T 类型的内存空间，并且返回其地址，一个 *T 类型的值。用 Go 的术语说，它返回了一个指针，指向新分配的类型 T 的零值。记住这点非常重要。 这意味着使用者可以用 new 创建一个数据结构的实例并且可以直接工作。如 bytes.Buffer的文档所述 “Buffer 的零值是一个准备好了的空缓冲。” 类似的，sync.Mutex 也没有明确的构造函数或 Init 方法。取而代之，sync.Mutex 的零值被定义为非锁定的互斥量。 零值是非常有用的。务必记得 make 仅适用于 map，slice 和 channel，并且返回的不是指针。应当用 new获得特定的指针。</p>\n"},{"title":"package strings","date":"2017-12-25T03:50:30.000Z","_content":"```\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    //\"unicode/utf8\"\n)\n\nfunc main() {\n    fmt.Println(\"查找子串是否在指定的字符串中\")\n    fmt.Println(\" Contains 函数的用法\")\n    fmt.Println(strings.Contains(\"seafood\", \"foo\")) //true\n    fmt.Println(strings.Contains(\"seafood\", \"bar\")) //false\n    fmt.Println(strings.Contains(\"seafood\", \"\"))    //true\n    fmt.Println(strings.Contains(\"\", \"\"))           //true 这里要特别注意\n    fmt.Println(strings.Contains(\"我是中国人\", \"我\"))     //true\n\n    fmt.Println(\"\")\n    fmt.Println(\" ContainsAny 函数的用法\")\n    fmt.Println(strings.ContainsAny(\"team\", \"i\"))        // false\n    fmt.Println(strings.ContainsAny(\"failure\", \"u & i\")) // true\n    fmt.Println(strings.ContainsAny(\"foo\", \"\"))          // false\n    fmt.Println(strings.ContainsAny(\"\", \"\"))             // false\n\n    fmt.Println(\"\")\n    fmt.Println(\" ContainsRune 函数的用法\")\n    fmt.Println(strings.ContainsRune(\"我是中国\", '我')) // true 注意第二个参数，用的是字符\n\n    fmt.Println(\"\")\n    fmt.Println(\" Count 函数的用法\")\n    fmt.Println(strings.Count(\"cheese\", \"e\")) // 3 \n    fmt.Println(strings.Count(\"five\", \"\"))    // before & after each rune result: 5 , 源码中有实现\n\n    fmt.Println(\"\")\n    fmt.Println(\" EqualFold 函数的用法\")\n    fmt.Println(strings.EqualFold(\"Go\", \"go\")) //大小写忽略 \n\n    fmt.Println(\"\")\n    fmt.Println(\" Fields 函数的用法\")\n    fmt.Println(\"Fields are: %q\", strings.Fields(\"  foo bar  baz   \")) //[\"foo\" \"bar\" \"baz\"] 返回一个列表\n\n    //相当于用函数做为参数，支持匿名函数\n    for _, record := range []string{\" aaa*1892*122\", \"aaa\\taa\\t\", \"124|939|22\"} {\n        fmt.Println(strings.FieldsFunc(record, func(ch rune) bool {\n            switch {\n            case ch > '5':\n                return true\n            }\n            return false\n        }))\n    }\n\n    fmt.Println(\"\")\n    fmt.Println(\" HasPrefix 函数的用法\")\n    fmt.Println(strings.HasPrefix(\"NLT_abc\", \"NLT\")) //前缀是以NLT开头的\n\n    fmt.Println(\"\")\n    fmt.Println(\" HasSuffix 函数的用法\")\n    fmt.Println(strings.HasSuffix(\"NLT_abc\", \"abc\")) //后缀是以NLT开头的\n\n    fmt.Println(\"\")\n    fmt.Println(\" Index 函数的用法\")\n    fmt.Println(strings.Index(\"NLT_abc\", \"abc\")) // 返回第一个匹配字符的位置，这里是4\n    fmt.Println(strings.Index(\"NLT_abc\", \"aaa\")) // 在存在返回 -1\n    fmt.Println(strings.Index(\"我是中国人\", \"中\"))     // 在存在返回 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" IndexAny 函数的用法\")\n    fmt.Println(strings.IndexAny(\"我是中国人\", \"中\")) // 在存在返回 6\n    fmt.Println(strings.IndexAny(\"我是中国人\", \"和\")) // 在存在返回 -1\n\n    fmt.Println(\"\")\n    fmt.Println(\" Index 函数的用法\")\n    fmt.Println(strings.IndexRune(\"NLT_abc\", 'b')) // 返回第一个匹配字符的位置，这里是4\n    fmt.Println(strings.IndexRune(\"NLT_abc\", 's')) // 在存在返回 -1\n    fmt.Println(strings.IndexRune(\"我是中国人\", '中'))   // 在存在返回 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" Join 函数的用法\")\n    s := []string{\"foo\", \"bar\", \"baz\"}\n    fmt.Println(strings.Join(s, \", \")) // 返回字符串：foo, bar, baz \n\n    fmt.Println(\"\")\n    fmt.Println(\" LastIndex 函数的用法\")\n    fmt.Println(strings.LastIndex(\"go gopher\", \"go\")) // 3\n\n    fmt.Println(\"\")\n    fmt.Println(\" LastIndexAny 函数的用法\")\n    fmt.Println(strings.LastIndexAny(\"go gopher\", \"go\")) // 4\n    fmt.Println(strings.LastIndexAny(\"我是中国人\", \"中\"))      // 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" Map 函数的用法\")\n    rot13 := func(r rune) rune {\n        switch {\n        case r >= 'A' && r <= 'Z':\n            return 'A' + (r-'A'+13)%26\n        case r >= 'a' && r <= 'z':\n            return 'a' + (r-'a'+13)%26\n        }\n        return r\n    }\n    fmt.Println(strings.Map(rot13, \"'Twas brillig and the slithy gopher...\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Repeat 函数的用法\")\n    fmt.Println(\"ba\" + strings.Repeat(\"na\", 2)) //banana \n\n    fmt.Println(\"\")\n    fmt.Println(\" Replace 函数的用法\")\n    fmt.Println(strings.Replace(\"oink oink oink\", \"k\", \"ky\", 2))\n    fmt.Println(strings.Replace(\"oink oink oink\", \"oink\", \"moo\", -1))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Split 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.Split(\"a,b,c\", \",\"))\n    fmt.Printf(\"%q\\n\", strings.Split(\"a man a plan a canal panama\", \"a \"))\n    fmt.Printf(\"%q\\n\", strings.Split(\" xyz \", \"\"))\n    fmt.Printf(\"%q\\n\", strings.Split(\"\", \"Bernardo O'Higgins\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitAfter 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitAfter(\"/home/m_ta/src\", \"/\")) //[\"/\" \"home/\" \"m_ta/\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitAfterN 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitAfterN(\"/home/m_ta/src\", \"/\", 2))  //[\"/\" \"home/m_ta/src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitAfterN(\"#home#m_ta#src\", \"#\", -1)) //[\"#\" \"home#\" \"m_ta#\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitN 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", 1))\n\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", 2))  //[\"\" \"home/m_ta/src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", -1)) //[\"\" \"home\" \"m_ta\" \"src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"home,m_ta,src\", \",\", 2))   //[\"home\" \"m_ta,src\"]\n\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"#home#m_ta#src\", \"#\", -1)) //[\"/\" \"home/\" \"m_ta/\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" Title 函数的用法\") //这个函数，还真不知道有什么用\n    fmt.Println(strings.Title(\"her royal highness\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToLower 函数的用法\")\n    fmt.Println(strings.ToLower(\"Gopher\")) //gopher \n\n    fmt.Println(\"\")\n    fmt.Println(\" ToLowerSpecial 函数的用法\")\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToTitle 函数的用法\")\n    fmt.Println(strings.ToTitle(\"loud noises\"))\n    fmt.Println(strings.ToTitle(\"loud 中国\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Replace 函数的用法\")\n    fmt.Println(strings.Replace(\"ABAACEDF\", \"A\", \"a\", 2)) // aBaACEDF\n    //第四个参数小于0，表示所有的都替换， 可以看下golang的文档\n    fmt.Println(strings.Replace(\"ABAACEDF\", \"A\", \"a\", -1)) // aBaaCEDF\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToUpper 函数的用法\")\n    fmt.Println(strings.ToUpper(\"Gopher\")) //GOPHER\n\n    fmt.Println(\"\")\n    fmt.Println(\" Trim  函数的用法\")\n    fmt.Printf(\"[%q]\", strings.Trim(\" !!! Achtung !!! \", \"! \")) // [\"Achtung\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" TrimLeft 函数的用法\")\n    fmt.Printf(\"[%q]\", strings.TrimLeft(\" !!! Achtung !!! \", \"! \")) // [\"Achtung !!! \"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" TrimSpace 函数的用法\")\n    fmt.Println(strings.TrimSpace(\" \\t\\n a lone gopher \\n\\t\\r\\n\")) // a lone gopher\n\n}\n```\n","source":"_posts/package-strings.md","raw":"---\ntitle: package strings\ndate: 2017-12-25 11:50:30\ntags:\n---\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    //\"unicode/utf8\"\n)\n\nfunc main() {\n    fmt.Println(\"查找子串是否在指定的字符串中\")\n    fmt.Println(\" Contains 函数的用法\")\n    fmt.Println(strings.Contains(\"seafood\", \"foo\")) //true\n    fmt.Println(strings.Contains(\"seafood\", \"bar\")) //false\n    fmt.Println(strings.Contains(\"seafood\", \"\"))    //true\n    fmt.Println(strings.Contains(\"\", \"\"))           //true 这里要特别注意\n    fmt.Println(strings.Contains(\"我是中国人\", \"我\"))     //true\n\n    fmt.Println(\"\")\n    fmt.Println(\" ContainsAny 函数的用法\")\n    fmt.Println(strings.ContainsAny(\"team\", \"i\"))        // false\n    fmt.Println(strings.ContainsAny(\"failure\", \"u & i\")) // true\n    fmt.Println(strings.ContainsAny(\"foo\", \"\"))          // false\n    fmt.Println(strings.ContainsAny(\"\", \"\"))             // false\n\n    fmt.Println(\"\")\n    fmt.Println(\" ContainsRune 函数的用法\")\n    fmt.Println(strings.ContainsRune(\"我是中国\", '我')) // true 注意第二个参数，用的是字符\n\n    fmt.Println(\"\")\n    fmt.Println(\" Count 函数的用法\")\n    fmt.Println(strings.Count(\"cheese\", \"e\")) // 3 \n    fmt.Println(strings.Count(\"five\", \"\"))    // before & after each rune result: 5 , 源码中有实现\n\n    fmt.Println(\"\")\n    fmt.Println(\" EqualFold 函数的用法\")\n    fmt.Println(strings.EqualFold(\"Go\", \"go\")) //大小写忽略 \n\n    fmt.Println(\"\")\n    fmt.Println(\" Fields 函数的用法\")\n    fmt.Println(\"Fields are: %q\", strings.Fields(\"  foo bar  baz   \")) //[\"foo\" \"bar\" \"baz\"] 返回一个列表\n\n    //相当于用函数做为参数，支持匿名函数\n    for _, record := range []string{\" aaa*1892*122\", \"aaa\\taa\\t\", \"124|939|22\"} {\n        fmt.Println(strings.FieldsFunc(record, func(ch rune) bool {\n            switch {\n            case ch > '5':\n                return true\n            }\n            return false\n        }))\n    }\n\n    fmt.Println(\"\")\n    fmt.Println(\" HasPrefix 函数的用法\")\n    fmt.Println(strings.HasPrefix(\"NLT_abc\", \"NLT\")) //前缀是以NLT开头的\n\n    fmt.Println(\"\")\n    fmt.Println(\" HasSuffix 函数的用法\")\n    fmt.Println(strings.HasSuffix(\"NLT_abc\", \"abc\")) //后缀是以NLT开头的\n\n    fmt.Println(\"\")\n    fmt.Println(\" Index 函数的用法\")\n    fmt.Println(strings.Index(\"NLT_abc\", \"abc\")) // 返回第一个匹配字符的位置，这里是4\n    fmt.Println(strings.Index(\"NLT_abc\", \"aaa\")) // 在存在返回 -1\n    fmt.Println(strings.Index(\"我是中国人\", \"中\"))     // 在存在返回 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" IndexAny 函数的用法\")\n    fmt.Println(strings.IndexAny(\"我是中国人\", \"中\")) // 在存在返回 6\n    fmt.Println(strings.IndexAny(\"我是中国人\", \"和\")) // 在存在返回 -1\n\n    fmt.Println(\"\")\n    fmt.Println(\" Index 函数的用法\")\n    fmt.Println(strings.IndexRune(\"NLT_abc\", 'b')) // 返回第一个匹配字符的位置，这里是4\n    fmt.Println(strings.IndexRune(\"NLT_abc\", 's')) // 在存在返回 -1\n    fmt.Println(strings.IndexRune(\"我是中国人\", '中'))   // 在存在返回 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" Join 函数的用法\")\n    s := []string{\"foo\", \"bar\", \"baz\"}\n    fmt.Println(strings.Join(s, \", \")) // 返回字符串：foo, bar, baz \n\n    fmt.Println(\"\")\n    fmt.Println(\" LastIndex 函数的用法\")\n    fmt.Println(strings.LastIndex(\"go gopher\", \"go\")) // 3\n\n    fmt.Println(\"\")\n    fmt.Println(\" LastIndexAny 函数的用法\")\n    fmt.Println(strings.LastIndexAny(\"go gopher\", \"go\")) // 4\n    fmt.Println(strings.LastIndexAny(\"我是中国人\", \"中\"))      // 6\n\n    fmt.Println(\"\")\n    fmt.Println(\" Map 函数的用法\")\n    rot13 := func(r rune) rune {\n        switch {\n        case r >= 'A' && r <= 'Z':\n            return 'A' + (r-'A'+13)%26\n        case r >= 'a' && r <= 'z':\n            return 'a' + (r-'a'+13)%26\n        }\n        return r\n    }\n    fmt.Println(strings.Map(rot13, \"'Twas brillig and the slithy gopher...\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Repeat 函数的用法\")\n    fmt.Println(\"ba\" + strings.Repeat(\"na\", 2)) //banana \n\n    fmt.Println(\"\")\n    fmt.Println(\" Replace 函数的用法\")\n    fmt.Println(strings.Replace(\"oink oink oink\", \"k\", \"ky\", 2))\n    fmt.Println(strings.Replace(\"oink oink oink\", \"oink\", \"moo\", -1))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Split 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.Split(\"a,b,c\", \",\"))\n    fmt.Printf(\"%q\\n\", strings.Split(\"a man a plan a canal panama\", \"a \"))\n    fmt.Printf(\"%q\\n\", strings.Split(\" xyz \", \"\"))\n    fmt.Printf(\"%q\\n\", strings.Split(\"\", \"Bernardo O'Higgins\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitAfter 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitAfter(\"/home/m_ta/src\", \"/\")) //[\"/\" \"home/\" \"m_ta/\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitAfterN 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitAfterN(\"/home/m_ta/src\", \"/\", 2))  //[\"/\" \"home/m_ta/src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitAfterN(\"#home#m_ta#src\", \"#\", -1)) //[\"#\" \"home#\" \"m_ta#\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" SplitN 函数的用法\")\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", 1))\n\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", 2))  //[\"\" \"home/m_ta/src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"/home/m_ta/src\", \"/\", -1)) //[\"\" \"home\" \"m_ta\" \"src\"]\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"home,m_ta,src\", \",\", 2))   //[\"home\" \"m_ta,src\"]\n\n    fmt.Printf(\"%q\\n\", strings.SplitN(\"#home#m_ta#src\", \"#\", -1)) //[\"/\" \"home/\" \"m_ta/\" \"src\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" Title 函数的用法\") //这个函数，还真不知道有什么用\n    fmt.Println(strings.Title(\"her royal highness\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToLower 函数的用法\")\n    fmt.Println(strings.ToLower(\"Gopher\")) //gopher \n\n    fmt.Println(\"\")\n    fmt.Println(\" ToLowerSpecial 函数的用法\")\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToTitle 函数的用法\")\n    fmt.Println(strings.ToTitle(\"loud noises\"))\n    fmt.Println(strings.ToTitle(\"loud 中国\"))\n\n    fmt.Println(\"\")\n    fmt.Println(\" Replace 函数的用法\")\n    fmt.Println(strings.Replace(\"ABAACEDF\", \"A\", \"a\", 2)) // aBaACEDF\n    //第四个参数小于0，表示所有的都替换， 可以看下golang的文档\n    fmt.Println(strings.Replace(\"ABAACEDF\", \"A\", \"a\", -1)) // aBaaCEDF\n\n    fmt.Println(\"\")\n    fmt.Println(\" ToUpper 函数的用法\")\n    fmt.Println(strings.ToUpper(\"Gopher\")) //GOPHER\n\n    fmt.Println(\"\")\n    fmt.Println(\" Trim  函数的用法\")\n    fmt.Printf(\"[%q]\", strings.Trim(\" !!! Achtung !!! \", \"! \")) // [\"Achtung\"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" TrimLeft 函数的用法\")\n    fmt.Printf(\"[%q]\", strings.TrimLeft(\" !!! Achtung !!! \", \"! \")) // [\"Achtung !!! \"]\n\n    fmt.Println(\"\")\n    fmt.Println(\" TrimSpace 函数的用法\")\n    fmt.Println(strings.TrimSpace(\" \\t\\n a lone gopher \\n\\t\\r\\n\")) // a lone gopher\n\n}\n```\n","slug":"package-strings","published":1,"updated":"2017-12-25T03:51:11.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hveci000jyhfypos21gz7","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">    &quot;strings&quot;</div><div class=\"line\">    //&quot;unicode/utf8&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    fmt.Println(&quot;查找子串是否在指定的字符串中&quot;)</div><div class=\"line\">    fmt.Println(&quot; Contains 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;foo&quot;)) //true</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;bar&quot;)) //false</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;&quot;))    //true</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;&quot;, &quot;&quot;))           //true 这里要特别注意</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;我是中国人&quot;, &quot;我&quot;))     //true</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ContainsAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;team&quot;, &quot;i&quot;))        // false</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;failure&quot;, &quot;u &amp; i&quot;)) // true</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;foo&quot;, &quot;&quot;))          // false</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;&quot;, &quot;&quot;))             // false</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ContainsRune 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ContainsRune(&quot;我是中国&quot;, &apos;我&apos;)) // true 注意第二个参数，用的是字符</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Count 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Count(&quot;cheese&quot;, &quot;e&quot;)) // 3 </div><div class=\"line\">    fmt.Println(strings.Count(&quot;five&quot;, &quot;&quot;))    // before &amp; after each rune result: 5 , 源码中有实现</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; EqualFold 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.EqualFold(&quot;Go&quot;, &quot;go&quot;)) //大小写忽略 </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Fields 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(&quot;Fields are: %q&quot;, strings.Fields(&quot;  foo bar  baz   &quot;)) //[&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;] 返回一个列表</div><div class=\"line\"></div><div class=\"line\">    //相当于用函数做为参数，支持匿名函数</div><div class=\"line\">    for _, record := range []string&#123;&quot; aaa*1892*122&quot;, &quot;aaa\\taa\\t&quot;, &quot;124|939|22&quot;&#125; &#123;</div><div class=\"line\">        fmt.Println(strings.FieldsFunc(record, func(ch rune) bool &#123;</div><div class=\"line\">            switch &#123;</div><div class=\"line\">            case ch &gt; &apos;5&apos;:</div><div class=\"line\">                return true</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false</div><div class=\"line\">        &#125;))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; HasPrefix 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.HasPrefix(&quot;NLT_abc&quot;, &quot;NLT&quot;)) //前缀是以NLT开头的</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; HasSuffix 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.HasSuffix(&quot;NLT_abc&quot;, &quot;abc&quot;)) //后缀是以NLT开头的</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Index 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Index(&quot;NLT_abc&quot;, &quot;abc&quot;)) // 返回第一个匹配字符的位置，这里是4</div><div class=\"line\">    fmt.Println(strings.Index(&quot;NLT_abc&quot;, &quot;aaa&quot;)) // 在存在返回 -1</div><div class=\"line\">    fmt.Println(strings.Index(&quot;我是中国人&quot;, &quot;中&quot;))     // 在存在返回 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; IndexAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.IndexAny(&quot;我是中国人&quot;, &quot;中&quot;)) // 在存在返回 6</div><div class=\"line\">    fmt.Println(strings.IndexAny(&quot;我是中国人&quot;, &quot;和&quot;)) // 在存在返回 -1</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Index 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;NLT_abc&quot;, &apos;b&apos;)) // 返回第一个匹配字符的位置，这里是4</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;NLT_abc&quot;, &apos;s&apos;)) // 在存在返回 -1</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;我是中国人&quot;, &apos;中&apos;))   // 在存在返回 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Join 函数的用法&quot;)</div><div class=\"line\">    s := []string&#123;&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;&#125;</div><div class=\"line\">    fmt.Println(strings.Join(s, &quot;, &quot;)) // 返回字符串：foo, bar, baz </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; LastIndex 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.LastIndex(&quot;go gopher&quot;, &quot;go&quot;)) // 3</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; LastIndexAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.LastIndexAny(&quot;go gopher&quot;, &quot;go&quot;)) // 4</div><div class=\"line\">    fmt.Println(strings.LastIndexAny(&quot;我是中国人&quot;, &quot;中&quot;))      // 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Map 函数的用法&quot;)</div><div class=\"line\">    rot13 := func(r rune) rune &#123;</div><div class=\"line\">        switch &#123;</div><div class=\"line\">        case r &gt;= &apos;A&apos; &amp;&amp; r &lt;= &apos;Z&apos;:</div><div class=\"line\">            return &apos;A&apos; + (r-&apos;A&apos;+13)%26</div><div class=\"line\">        case r &gt;= &apos;a&apos; &amp;&amp; r &lt;= &apos;z&apos;:</div><div class=\"line\">            return &apos;a&apos; + (r-&apos;a&apos;+13)%26</div><div class=\"line\">        &#125;</div><div class=\"line\">        return r</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println(strings.Map(rot13, &quot;&apos;Twas brillig and the slithy gopher...&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Repeat 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(&quot;ba&quot; + strings.Repeat(&quot;na&quot;, 2)) //banana </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Replace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;oink oink oink&quot;, &quot;k&quot;, &quot;ky&quot;, 2))</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;oink oink oink&quot;, &quot;oink&quot;, &quot;moo&quot;, -1))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Split 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;a,b,c&quot;, &quot;,&quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;a man a plan a canal panama&quot;, &quot;a &quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot; xyz &quot;, &quot;&quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;&quot;, &quot;Bernardo O&apos;Higgins&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitAfter 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfter(&quot;/home/m_ta/src&quot;, &quot;/&quot;)) //[&quot;/&quot; &quot;home/&quot; &quot;m_ta/&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitAfterN 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfterN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 2))  //[&quot;/&quot; &quot;home/m_ta/src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfterN(&quot;#home#m_ta#src&quot;, &quot;#&quot;, -1)) //[&quot;#&quot; &quot;home#&quot; &quot;m_ta#&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitN 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 1))</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 2))  //[&quot;&quot; &quot;home/m_ta/src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, -1)) //[&quot;&quot; &quot;home&quot; &quot;m_ta&quot; &quot;src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;home,m_ta,src&quot;, &quot;,&quot;, 2))   //[&quot;home&quot; &quot;m_ta,src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;#home#m_ta#src&quot;, &quot;#&quot;, -1)) //[&quot;/&quot; &quot;home/&quot; &quot;m_ta/&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Title 函数的用法&quot;) //这个函数，还真不知道有什么用</div><div class=\"line\">    fmt.Println(strings.Title(&quot;her royal highness&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToLower 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToLower(&quot;Gopher&quot;)) //gopher </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToLowerSpecial 函数的用法&quot;)</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToTitle 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToTitle(&quot;loud noises&quot;))</div><div class=\"line\">    fmt.Println(strings.ToTitle(&quot;loud 中国&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Replace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;ABAACEDF&quot;, &quot;A&quot;, &quot;a&quot;, 2)) // aBaACEDF</div><div class=\"line\">    //第四个参数小于0，表示所有的都替换， 可以看下golang的文档</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;ABAACEDF&quot;, &quot;A&quot;, &quot;a&quot;, -1)) // aBaaCEDF</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToUpper 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToUpper(&quot;Gopher&quot;)) //GOPHER</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Trim  函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;[%q]&quot;, strings.Trim(&quot; !!! Achtung !!! &quot;, &quot;! &quot;)) // [&quot;Achtung&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; TrimLeft 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;[%q]&quot;, strings.TrimLeft(&quot; !!! Achtung !!! &quot;, &quot;! &quot;)) // [&quot;Achtung !!! &quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; TrimSpace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.TrimSpace(&quot; \\t\\n a lone gopher \\n\\t\\r\\n&quot;)) // a lone gopher</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">    &quot;strings&quot;</div><div class=\"line\">    //&quot;unicode/utf8&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    fmt.Println(&quot;查找子串是否在指定的字符串中&quot;)</div><div class=\"line\">    fmt.Println(&quot; Contains 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;foo&quot;)) //true</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;bar&quot;)) //false</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;seafood&quot;, &quot;&quot;))    //true</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;&quot;, &quot;&quot;))           //true 这里要特别注意</div><div class=\"line\">    fmt.Println(strings.Contains(&quot;我是中国人&quot;, &quot;我&quot;))     //true</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ContainsAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;team&quot;, &quot;i&quot;))        // false</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;failure&quot;, &quot;u &amp; i&quot;)) // true</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;foo&quot;, &quot;&quot;))          // false</div><div class=\"line\">    fmt.Println(strings.ContainsAny(&quot;&quot;, &quot;&quot;))             // false</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ContainsRune 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ContainsRune(&quot;我是中国&quot;, &apos;我&apos;)) // true 注意第二个参数，用的是字符</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Count 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Count(&quot;cheese&quot;, &quot;e&quot;)) // 3 </div><div class=\"line\">    fmt.Println(strings.Count(&quot;five&quot;, &quot;&quot;))    // before &amp; after each rune result: 5 , 源码中有实现</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; EqualFold 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.EqualFold(&quot;Go&quot;, &quot;go&quot;)) //大小写忽略 </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Fields 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(&quot;Fields are: %q&quot;, strings.Fields(&quot;  foo bar  baz   &quot;)) //[&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;] 返回一个列表</div><div class=\"line\"></div><div class=\"line\">    //相当于用函数做为参数，支持匿名函数</div><div class=\"line\">    for _, record := range []string&#123;&quot; aaa*1892*122&quot;, &quot;aaa\\taa\\t&quot;, &quot;124|939|22&quot;&#125; &#123;</div><div class=\"line\">        fmt.Println(strings.FieldsFunc(record, func(ch rune) bool &#123;</div><div class=\"line\">            switch &#123;</div><div class=\"line\">            case ch &gt; &apos;5&apos;:</div><div class=\"line\">                return true</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false</div><div class=\"line\">        &#125;))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; HasPrefix 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.HasPrefix(&quot;NLT_abc&quot;, &quot;NLT&quot;)) //前缀是以NLT开头的</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; HasSuffix 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.HasSuffix(&quot;NLT_abc&quot;, &quot;abc&quot;)) //后缀是以NLT开头的</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Index 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Index(&quot;NLT_abc&quot;, &quot;abc&quot;)) // 返回第一个匹配字符的位置，这里是4</div><div class=\"line\">    fmt.Println(strings.Index(&quot;NLT_abc&quot;, &quot;aaa&quot;)) // 在存在返回 -1</div><div class=\"line\">    fmt.Println(strings.Index(&quot;我是中国人&quot;, &quot;中&quot;))     // 在存在返回 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; IndexAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.IndexAny(&quot;我是中国人&quot;, &quot;中&quot;)) // 在存在返回 6</div><div class=\"line\">    fmt.Println(strings.IndexAny(&quot;我是中国人&quot;, &quot;和&quot;)) // 在存在返回 -1</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Index 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;NLT_abc&quot;, &apos;b&apos;)) // 返回第一个匹配字符的位置，这里是4</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;NLT_abc&quot;, &apos;s&apos;)) // 在存在返回 -1</div><div class=\"line\">    fmt.Println(strings.IndexRune(&quot;我是中国人&quot;, &apos;中&apos;))   // 在存在返回 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Join 函数的用法&quot;)</div><div class=\"line\">    s := []string&#123;&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;&#125;</div><div class=\"line\">    fmt.Println(strings.Join(s, &quot;, &quot;)) // 返回字符串：foo, bar, baz </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; LastIndex 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.LastIndex(&quot;go gopher&quot;, &quot;go&quot;)) // 3</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; LastIndexAny 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.LastIndexAny(&quot;go gopher&quot;, &quot;go&quot;)) // 4</div><div class=\"line\">    fmt.Println(strings.LastIndexAny(&quot;我是中国人&quot;, &quot;中&quot;))      // 6</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Map 函数的用法&quot;)</div><div class=\"line\">    rot13 := func(r rune) rune &#123;</div><div class=\"line\">        switch &#123;</div><div class=\"line\">        case r &gt;= &apos;A&apos; &amp;&amp; r &lt;= &apos;Z&apos;:</div><div class=\"line\">            return &apos;A&apos; + (r-&apos;A&apos;+13)%26</div><div class=\"line\">        case r &gt;= &apos;a&apos; &amp;&amp; r &lt;= &apos;z&apos;:</div><div class=\"line\">            return &apos;a&apos; + (r-&apos;a&apos;+13)%26</div><div class=\"line\">        &#125;</div><div class=\"line\">        return r</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println(strings.Map(rot13, &quot;&apos;Twas brillig and the slithy gopher...&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Repeat 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(&quot;ba&quot; + strings.Repeat(&quot;na&quot;, 2)) //banana </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Replace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;oink oink oink&quot;, &quot;k&quot;, &quot;ky&quot;, 2))</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;oink oink oink&quot;, &quot;oink&quot;, &quot;moo&quot;, -1))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Split 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;a,b,c&quot;, &quot;,&quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;a man a plan a canal panama&quot;, &quot;a &quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot; xyz &quot;, &quot;&quot;))</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.Split(&quot;&quot;, &quot;Bernardo O&apos;Higgins&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitAfter 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfter(&quot;/home/m_ta/src&quot;, &quot;/&quot;)) //[&quot;/&quot; &quot;home/&quot; &quot;m_ta/&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitAfterN 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfterN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 2))  //[&quot;/&quot; &quot;home/m_ta/src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitAfterN(&quot;#home#m_ta#src&quot;, &quot;#&quot;, -1)) //[&quot;#&quot; &quot;home#&quot; &quot;m_ta#&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; SplitN 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 1))</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, 2))  //[&quot;&quot; &quot;home/m_ta/src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;/home/m_ta/src&quot;, &quot;/&quot;, -1)) //[&quot;&quot; &quot;home&quot; &quot;m_ta&quot; &quot;src&quot;]</div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;home,m_ta,src&quot;, &quot;,&quot;, 2))   //[&quot;home&quot; &quot;m_ta,src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Printf(&quot;%q\\n&quot;, strings.SplitN(&quot;#home#m_ta#src&quot;, &quot;#&quot;, -1)) //[&quot;/&quot; &quot;home/&quot; &quot;m_ta/&quot; &quot;src&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Title 函数的用法&quot;) //这个函数，还真不知道有什么用</div><div class=\"line\">    fmt.Println(strings.Title(&quot;her royal highness&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToLower 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToLower(&quot;Gopher&quot;)) //gopher </div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToLowerSpecial 函数的用法&quot;)</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToTitle 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToTitle(&quot;loud noises&quot;))</div><div class=\"line\">    fmt.Println(strings.ToTitle(&quot;loud 中国&quot;))</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Replace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;ABAACEDF&quot;, &quot;A&quot;, &quot;a&quot;, 2)) // aBaACEDF</div><div class=\"line\">    //第四个参数小于0，表示所有的都替换， 可以看下golang的文档</div><div class=\"line\">    fmt.Println(strings.Replace(&quot;ABAACEDF&quot;, &quot;A&quot;, &quot;a&quot;, -1)) // aBaaCEDF</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; ToUpper 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.ToUpper(&quot;Gopher&quot;)) //GOPHER</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; Trim  函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;[%q]&quot;, strings.Trim(&quot; !!! Achtung !!! &quot;, &quot;! &quot;)) // [&quot;Achtung&quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; TrimLeft 函数的用法&quot;)</div><div class=\"line\">    fmt.Printf(&quot;[%q]&quot;, strings.TrimLeft(&quot; !!! Achtung !!! &quot;, &quot;! &quot;)) // [&quot;Achtung !!! &quot;]</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(&quot;&quot;)</div><div class=\"line\">    fmt.Println(&quot; TrimSpace 函数的用法&quot;)</div><div class=\"line\">    fmt.Println(strings.TrimSpace(&quot; \\t\\n a lone gopher \\n\\t\\r\\n&quot;)) // a lone gopher</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"php operator","date":"2017-07-12T02:33:10.000Z","_content":"# php基础之运算符\n   运算符是所有编程语言的基本功，任何语言，这都是基础。\n## 算数运算符\n  '+ - * ／ %'，简单讲就是加、减、乘、除、余（模数）。\neg:\n```\n<?php\n   $a = 50;\n   $b = 4\n   echo($a + $b); \n   echo($a - $b); \n   echo($a * $b); \n   echo($a / $b); \n   echo($a % $b);\n```\n## 赋值运算符\n  赋值运算符，最容易理解也最常用的就是$a = 100;$a = $b; '='右侧的表达式为其左侧变量设置值。\n  在此基础上演变出来了一些其他的赋值符号：\n  $a += 10;  等同于 $a = $a+10; 其他同理如：\"-=\"、\"*=\"、\"/=\"、\"%=\" \n## 字符串运算符\n  字符串运算符，\".\"和演变出的\".=\"\neg:\n```\n<?php\n  $a = \"Hello\";\n  $b = $a.\"world!\";\n  echo $b;\n  $a .= \"world!\";\n  echo $a;\n```\n## 递增／递减运算符\n  之所以把这类单独拎出来是因为，常有人混淆，常有人拿这个来面试。++、--符号分别表示递增、递减。\n  ++$a 和 $a++ 的区别：++$a是先运算再返回变量值，$a++则是先返回值在运算。\n## 比较运算符\n  比较运算符顾名思义是比较两个值（数字或者字符串）。\n\n | 运算符 | 名称           | 例子                           | 结果                                                      |\n | :-------: | ---------------:| -------------------------------: | ----------------------------------------------------------: |\n | ==\t| 等于   \t|\t\t\t$x == $y| 如果 $x 等于 $y，则返回 true。                            |\n | ===\t| 全等（完全相同）\t| $x === $y\t| 如果 $x 等于 $y，且它们类型相同，则返回 true。|\n | !=\t| 不等于\t| $x != $y\t| 如果 $x 不等于 $y，则返回 true。|\n | <>\t| 不等于\t| $x <> $y\t| 如果 $x 不等于 $y，则返回 true。|\n | !==\t| 不全等（完全不同）\t| $x !== $y\t| 如果 $x 不等于 $y，或它们类型不相同，则返回 true。|\n | >\t| 大于\t|$x > $y\t| 如果 $x 大于 $y，则返回 true。|\n | <\t| 大于\t|$x < $y\t| 如果 $x 小于 $y，则返回 true。|\n | >=\t| 大于或等于\t| $x >= $y\t| 如果 $x 大于或者等于 $y，则返回 true。|\n | <=\t| 小于或等于\t| $x <= $y\t| 如果 $x 小于或者等于 $y，则返回 true。|\n## 逻辑运算符\n  与或非，&&、||、!，还有and、or、xor，需要注意的是xor不是'非'，而是表示'异或',与'或'的区别是'有且仅有一个为 true，才返回 true'。\n比较运算符和逻辑运算符构成的表达式，其结果均为布尔型。\n\n## 数组运算符\n  数组运算符里除了'+'号是表示两个数组的联合（不覆盖重复值），其返回值还是数组。其他的\"==、===、!=、<>、!==\"和比较运算符一样，其返回值均为布尔型。\n","source":"_posts/php-operator.md","raw":"---\ntitle: php operator\ndate: 2017-07-12 10:33:10\ntags:\n---\n# php基础之运算符\n   运算符是所有编程语言的基本功，任何语言，这都是基础。\n## 算数运算符\n  '+ - * ／ %'，简单讲就是加、减、乘、除、余（模数）。\neg:\n```\n<?php\n   $a = 50;\n   $b = 4\n   echo($a + $b); \n   echo($a - $b); \n   echo($a * $b); \n   echo($a / $b); \n   echo($a % $b);\n```\n## 赋值运算符\n  赋值运算符，最容易理解也最常用的就是$a = 100;$a = $b; '='右侧的表达式为其左侧变量设置值。\n  在此基础上演变出来了一些其他的赋值符号：\n  $a += 10;  等同于 $a = $a+10; 其他同理如：\"-=\"、\"*=\"、\"/=\"、\"%=\" \n## 字符串运算符\n  字符串运算符，\".\"和演变出的\".=\"\neg:\n```\n<?php\n  $a = \"Hello\";\n  $b = $a.\"world!\";\n  echo $b;\n  $a .= \"world!\";\n  echo $a;\n```\n## 递增／递减运算符\n  之所以把这类单独拎出来是因为，常有人混淆，常有人拿这个来面试。++、--符号分别表示递增、递减。\n  ++$a 和 $a++ 的区别：++$a是先运算再返回变量值，$a++则是先返回值在运算。\n## 比较运算符\n  比较运算符顾名思义是比较两个值（数字或者字符串）。\n\n | 运算符 | 名称           | 例子                           | 结果                                                      |\n | :-------: | ---------------:| -------------------------------: | ----------------------------------------------------------: |\n | ==\t| 等于   \t|\t\t\t$x == $y| 如果 $x 等于 $y，则返回 true。                            |\n | ===\t| 全等（完全相同）\t| $x === $y\t| 如果 $x 等于 $y，且它们类型相同，则返回 true。|\n | !=\t| 不等于\t| $x != $y\t| 如果 $x 不等于 $y，则返回 true。|\n | <>\t| 不等于\t| $x <> $y\t| 如果 $x 不等于 $y，则返回 true。|\n | !==\t| 不全等（完全不同）\t| $x !== $y\t| 如果 $x 不等于 $y，或它们类型不相同，则返回 true。|\n | >\t| 大于\t|$x > $y\t| 如果 $x 大于 $y，则返回 true。|\n | <\t| 大于\t|$x < $y\t| 如果 $x 小于 $y，则返回 true。|\n | >=\t| 大于或等于\t| $x >= $y\t| 如果 $x 大于或者等于 $y，则返回 true。|\n | <=\t| 小于或等于\t| $x <= $y\t| 如果 $x 小于或者等于 $y，则返回 true。|\n## 逻辑运算符\n  与或非，&&、||、!，还有and、or、xor，需要注意的是xor不是'非'，而是表示'异或',与'或'的区别是'有且仅有一个为 true，才返回 true'。\n比较运算符和逻辑运算符构成的表达式，其结果均为布尔型。\n\n## 数组运算符\n  数组运算符里除了'+'号是表示两个数组的联合（不覆盖重复值），其返回值还是数组。其他的\"==、===、!=、<>、!==\"和比较运算符一样，其返回值均为布尔型。\n","slug":"php-operator","published":1,"updated":"2017-11-30T08:25:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecj000lyhfyfxq2wdhb","content":"<h1 id=\"php基础之运算符\"><a href=\"#php基础之运算符\" class=\"headerlink\" title=\"php基础之运算符\"></a>php基础之运算符</h1><p>   运算符是所有编程语言的基本功，任何语言，这都是基础。</p>\n<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p>  ‘+ - * ／ %’，简单讲就是加、减、乘、除、余（模数）。<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">   $a = 50;</div><div class=\"line\">   $b = 4</div><div class=\"line\">   echo($a + $b); </div><div class=\"line\">   echo($a - $b); </div><div class=\"line\">   echo($a * $b); </div><div class=\"line\">   echo($a / $b); </div><div class=\"line\">   echo($a % $b);</div></pre></td></tr></table></figure></p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>  赋值运算符，最容易理解也最常用的就是$a = 100;$a = $b; ‘=’右侧的表达式为其左侧变量设置值。<br>  在此基础上演变出来了一些其他的赋值符号：<br>  $a += 10;  等同于 $a = $a+10; 其他同理如：”-=”、”*=”、”/=”、”%=” </p>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p>  字符串运算符，”.”和演变出的”.=”<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">  $a = &quot;Hello&quot;;</div><div class=\"line\">  $b = $a.&quot;world!&quot;;</div><div class=\"line\">  echo $b;</div><div class=\"line\">  $a .= &quot;world!&quot;;</div><div class=\"line\">  echo $a;</div></pre></td></tr></table></figure></p>\n<h2 id=\"递增／递减运算符\"><a href=\"#递增／递减运算符\" class=\"headerlink\" title=\"递增／递减运算符\"></a>递增／递减运算符</h2><p>  之所以把这类单独拎出来是因为，常有人混淆，常有人拿这个来面试。++、–符号分别表示递增、递减。<br>  ++$a 和 $a++ 的区别：++$a是先运算再返回变量值，$a++则是先返回值在运算。</p>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>  比较运算符顾名思义是比较两个值（数字或者字符串）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:right\">名称</th>\n<th style=\"text-align:right\">例子</th>\n<th style=\"text-align:right\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:right\">等于</td>\n<td style=\"text-align:right\">$x == $y</td>\n<td style=\"text-align:right\">如果 $x 等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">===</td>\n<td style=\"text-align:right\">全等（完全相同）</td>\n<td style=\"text-align:right\">$x === $y</td>\n<td style=\"text-align:right\">如果 $x 等于 $y，且它们类型相同，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:right\">不等于</td>\n<td style=\"text-align:right\">$x != $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&gt;</td>\n<td style=\"text-align:right\">不等于</td>\n<td style=\"text-align:right\">$x &lt;&gt; $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!==</td>\n<td style=\"text-align:right\">不全等（完全不同）</td>\n<td style=\"text-align:right\">$x !== $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，或它们类型不相同，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:right\">大于</td>\n<td style=\"text-align:right\">$x &gt; $y</td>\n<td style=\"text-align:right\">如果 $x 大于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:right\">大于</td>\n<td style=\"text-align:right\">$x &lt; $y</td>\n<td style=\"text-align:right\">如果 $x 小于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:right\">大于或等于</td>\n<td style=\"text-align:right\">$x &gt;= $y</td>\n<td style=\"text-align:right\">如果 $x 大于或者等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:right\">小于或等于</td>\n<td style=\"text-align:right\">$x &lt;= $y</td>\n<td style=\"text-align:right\">如果 $x 小于或者等于 $y，则返回 true。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>  与或非，&amp;&amp;、||、!，还有and、or、xor，需要注意的是xor不是’非’，而是表示’异或’,与’或’的区别是’有且仅有一个为 true，才返回 true’。<br>比较运算符和逻辑运算符构成的表达式，其结果均为布尔型。</p>\n<h2 id=\"数组运算符\"><a href=\"#数组运算符\" class=\"headerlink\" title=\"数组运算符\"></a>数组运算符</h2><p>  数组运算符里除了’+’号是表示两个数组的联合（不覆盖重复值），其返回值还是数组。其他的”==、===、!=、&lt;&gt;、!==”和比较运算符一样，其返回值均为布尔型。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"php基础之运算符\"><a href=\"#php基础之运算符\" class=\"headerlink\" title=\"php基础之运算符\"></a>php基础之运算符</h1><p>   运算符是所有编程语言的基本功，任何语言，这都是基础。</p>\n<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><p>  ‘+ - * ／ %’，简单讲就是加、减、乘、除、余（模数）。<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">   $a = 50;</div><div class=\"line\">   $b = 4</div><div class=\"line\">   echo($a + $b); </div><div class=\"line\">   echo($a - $b); </div><div class=\"line\">   echo($a * $b); </div><div class=\"line\">   echo($a / $b); </div><div class=\"line\">   echo($a % $b);</div></pre></td></tr></table></figure></p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>  赋值运算符，最容易理解也最常用的就是$a = 100;$a = $b; ‘=’右侧的表达式为其左侧变量设置值。<br>  在此基础上演变出来了一些其他的赋值符号：<br>  $a += 10;  等同于 $a = $a+10; 其他同理如：”-=”、”*=”、”/=”、”%=” </p>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p>  字符串运算符，”.”和演变出的”.=”<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">  $a = &quot;Hello&quot;;</div><div class=\"line\">  $b = $a.&quot;world!&quot;;</div><div class=\"line\">  echo $b;</div><div class=\"line\">  $a .= &quot;world!&quot;;</div><div class=\"line\">  echo $a;</div></pre></td></tr></table></figure></p>\n<h2 id=\"递增／递减运算符\"><a href=\"#递增／递减运算符\" class=\"headerlink\" title=\"递增／递减运算符\"></a>递增／递减运算符</h2><p>  之所以把这类单独拎出来是因为，常有人混淆，常有人拿这个来面试。++、–符号分别表示递增、递减。<br>  ++$a 和 $a++ 的区别：++$a是先运算再返回变量值，$a++则是先返回值在运算。</p>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><p>  比较运算符顾名思义是比较两个值（数字或者字符串）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:right\">名称</th>\n<th style=\"text-align:right\">例子</th>\n<th style=\"text-align:right\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:right\">等于</td>\n<td style=\"text-align:right\">$x == $y</td>\n<td style=\"text-align:right\">如果 $x 等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">===</td>\n<td style=\"text-align:right\">全等（完全相同）</td>\n<td style=\"text-align:right\">$x === $y</td>\n<td style=\"text-align:right\">如果 $x 等于 $y，且它们类型相同，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:right\">不等于</td>\n<td style=\"text-align:right\">$x != $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&gt;</td>\n<td style=\"text-align:right\">不等于</td>\n<td style=\"text-align:right\">$x &lt;&gt; $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!==</td>\n<td style=\"text-align:right\">不全等（完全不同）</td>\n<td style=\"text-align:right\">$x !== $y</td>\n<td style=\"text-align:right\">如果 $x 不等于 $y，或它们类型不相同，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:right\">大于</td>\n<td style=\"text-align:right\">$x &gt; $y</td>\n<td style=\"text-align:right\">如果 $x 大于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:right\">大于</td>\n<td style=\"text-align:right\">$x &lt; $y</td>\n<td style=\"text-align:right\">如果 $x 小于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:right\">大于或等于</td>\n<td style=\"text-align:right\">$x &gt;= $y</td>\n<td style=\"text-align:right\">如果 $x 大于或者等于 $y，则返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:right\">小于或等于</td>\n<td style=\"text-align:right\">$x &lt;= $y</td>\n<td style=\"text-align:right\">如果 $x 小于或者等于 $y，则返回 true。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>  与或非，&amp;&amp;、||、!，还有and、or、xor，需要注意的是xor不是’非’，而是表示’异或’,与’或’的区别是’有且仅有一个为 true，才返回 true’。<br>比较运算符和逻辑运算符构成的表达式，其结果均为布尔型。</p>\n<h2 id=\"数组运算符\"><a href=\"#数组运算符\" class=\"headerlink\" title=\"数组运算符\"></a>数组运算符</h2><p>  数组运算符里除了’+’号是表示两个数组的联合（不覆盖重复值），其返回值还是数组。其他的”==、===、!=、&lt;&gt;、!==”和比较运算符一样，其返回值均为布尔型。</p>\n"},{"title":"golang print struct","date":"2017-11-30T09:24:25.000Z","_content":"## golang 如何打印出结构体struct的全部信息？\n在程序调试中，经常用到fmt.Println(a)或者fmt.Printf(\"%v\",a)。\n```\npackage main\nimport \"fmt\"\n\ntype Eg struct {\n   name string\n   age  int  \n}\n\nfunc main() {\n     a: = Eg{\"tom\",21}\n     fmt.Println(a)\n     fmt.Printf(\"%v\",a)\n     fmt.Printf(\"%+v\",a)\n}\n```\n此例输出：\n```\n{tom 21}\n{tom 21}{name:tom age:21}\n```\n## 知识拓展\nPrintf 类的函数，都有一个不接受任何格式化的Print 函数，等价于对每一个操作数都应用 %v。另一个变参函数 Println 会在操作数之间插入空白，并在末尾追加一个换行符。\n### 占位符\n\n#### 普通占位符\n 在打印结构体时，“加号”标记（%+v）会添加字段名\n\n占位符                        说明                        举例                                        输出\n%v        相应值的默认格式。                            Printf(\"%v\", site)，Printf(\"%+v\", site)   {studygolang}，{Name:studygolang}\n%#v       相应值的Go语法表示                            Printf(\"#v\", site)                        main.Website{Name:\"studygolang\"}\n%T        相应值的类型的Go语法表示                      Printf(\"%T\", site)                        main.Website\n%%        字面上的百分号，并非值的占位符                Printf(\"%%\")                              %\n\n#### 布尔占位符\n占位符                        说明                        举例                                        输出\n%t        单词 true 或 false。                            Printf(\"%t\", true)                        true\n\n#### 整数占位符\n占位符                        说明                        举例                                    输出\n%b        二进制表示                                    Printf(\"%b\", 5)                        101\n%c        相应Unicode码点所表示的字符                    Printf(\"%c\", 0x4E2D)                中\n%d        十进制表示                                    Printf(\"%d\", 0x12)                    18\n%o        八进制表示                                    Printf(\"%d\", 10)                    12\n%q        单引号围绕的字符字面值，由Go语法安全地转义        Printf(\"%q\", 0x4E2D)                '中'\n%x        十六进制表示，字母形式为小写 a-f                Printf(\"%x\", 13)                    d\n%X        十六进制表示，字母形式为大写 A-F                Printf(\"%x\", 13)                    D\n%U        Unicode格式：U+1234，等同于 \"U+%04X\"            Printf(\"%U\", 0x4E2D)                U+4E2D\n#### 浮点数和复数的组成部分（实部和虚部）\n占位符                        说明                                                举例                                    输出\n%b        无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat    \n        的 'b' 转换格式一致。例如 -123456p-78\n%e        科学计数法，例如 -1234.456e+78                                    Printf(\"%e\", 10.2)                            1.020000e+01\n%E        科学计数法，例如 -1234.456E+78                                    Printf(\"%e\", 10.2)                            1.020000E+01\n%f        有小数点而无指数，例如 123.456                                    Printf(\"%f\", 10.2)                            10.200000\n%g        根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(\"%g\", 10.20)                            10.2\n%G        根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(\"%G\", 10.20+2i)                        (10.2+2i)\n#### 字符串与字节切片\n占位符                        说明                                                举例                                    输出\n%s        输出字符串表示（string类型或[]byte)                            Printf(\"%s\", []byte(\"Go语言中文网\"))        Go语言中文网\n%q        双引号围绕的字符串，由Go语法安全地转义                            Printf(\"%q\", \"Go语言中文网\")                \"Go语言中文网\"\n%x        十六进制，小写字母，每字节两个字符                                Printf(\"%x\", \"golang\")                        676f6c616e67\n%X        十六进制，大写字母，每字节两个字符                                Printf(\"%X\", \"golang\")                        676F6C616E67\n#### 指针\n占位符                        说明                                                举例                                    输出\n%p        十六进制表示，前缀 0x                                            Printf(\"%p\", &site)                            0x4f57f0\n#### 其他占位符标记\n占位符                        说明                                                举例                                    输出\n\\+        总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。            Printf(\"%+q\", \"中文\")                    \"\\u4e2d\\u6587\"\n\\-        在右侧而非左侧填充空格（左对齐该区域）\n\\#        备用格式：为八进制添加前导 0（%#o），为十六进制添加前导 0x（%#x）或    Printf(\"%#U\", '中')                        U+4E2D '中'\n        0X（%#X），为 %p（%#p）去掉前导 0x；如果可能的话，%q（%#q）会打印原始\n        （即反引号围绕的）字符串；如果是可打印字符，%U（%#U）会写出该字符的\n        Unicode 编码形式（如字符 x 会被打印成 U+0078 'x'）。\n' '        （空格）为数值中省略的正负号留出空白（% d）；\n        以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开\n0        填充前导的0而非空格；对于数字，这会将填充移到正负号之后\n\n##  Print 序列函数\n这里说的 Print 序列函数包括：Fprint/Fprintf/Fprintln/Sprint/Sprintf/Sprintln/Print/Printf/Println。之所以将放在一起介绍，是因为它们的使用方式类似、参数意思也类似。\n\n一般的，我们将Fprint/Fprintf/Fprintln归为一类；Sprint/Sprintf/Sprintln归为一类；Print/Printf/Println归为另一类。其中，Print/Printf/Println会调用相应的F开头一类函数。如：\n\nfunc Print(a ...interface{}) (n int, err error) {\n    return Fprint(os.Stdout, a...)\n}\nFprint/Fprintf/Fprintln 函数的第一个参数接收一个io.Writer类型，会将内容输出到io.Writer中去。而Print/Printf/Println 函数是将内容输出到标准输出中，因此，直接调用F类函数做这件事，并将os.Stdout作为第一个参数传入。\n\nSprint/Sprintf/Sprintln 是格式化内容为string类型，而并不输出到某处，需要格式化字符串并返回时，可以用次组函数。\n\n在这三组函数中，S/F/Printf函数通过指定的格式输出或格式化内容；S/F/Print函数只是使用默认的格式输出或格式化内容；S/F/Println函数使用默认的格式输出或格式化内容，同时会在最后加上\"换行符\"。\n\nPrint 序列函数的最后一个参数都是 a ...interface{} 这种不定参数。对于S/F/Printf序列，这个不定参数的实参个数应该和formt参数的占位符个数一致，否则会出现格式化错误；而对于其他函数，当不定参数的实参个数为多个时，它们之间会直接（对于S/F/Print）或通过\" \"（空格）（对于S/F/Println）连接起来（注：对于S/F/Print，当两个参数都不是字符串时，会自动添加一个空格，否则不会加。感谢guoshanhe1983 反馈。官方 effective_go 也有说明）。利用这一点，我们可以做如下事情：\n\nresult1 := fmt.Sprintln(\"studygolang.com\", 2013)\nresult2 := fmt.Sprint(\"studygolang.com\", 2013)\nresult1的值是：studygolang.com 2013，result2的值是：studygolang.com2013。这起到了连接字符串的作用，而不需要通过strconv.Itoa()转换。\n\nPrint序列函数用的较多，而且也易于使用（可能需要掌握一些常用的占位符用法），接下来我们结合fmt包中几个相关的接口来掌握更多关于Print的内容。\n\n## Scanning\n一组类似的函数通过扫描已格式化的文本来产生值。Scan、Scanf 和 Scanln 从 os.Stdin 中读取；Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取； Sscan、Sscanf 和 Sscanln 从实参字符串中读取。Scanln、Fscanln 和 Sscanln 在换行符处停止扫描，且需要条目紧随换行符之后；Scanf、Fscanf 和 Sscanf 需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。\n\nScanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于 Printf。例如，%x 会将一个整数扫描为十六进制数，而 %v 则会扫描该值的默认表现格式。\n\n格式化行为类似于 Printf，但也有如下例外：\n\n%p 没有实现\n%T 没有实现\n%e %E %f %F %g %G 都完全等价，且可扫描任何浮点数或复数数值\n%s 和 %v 在扫描字符串时会将其中的空格作为分隔符\n标记 # 和 + 没有实现\n在使用 %v 占位符扫描整数时，可接受友好的进制前缀0（八进制）和0x（十六进制）。\n\n宽度被解释为输入的文本（%5s 意为最多从输入中读取5个 rune 来扫描成字符串），而扫描函数则没有精度的语法（没有 %5.2f，只有 %5f）。\n\n当以某种格式进行扫描时，无论在格式中还是在输入中，所有非空的连续空白字符 （除换行符外）都等价于单个空格。由于这种限制，格式字符串文本必须匹配输入的文本，如果不匹配，扫描过程就会停止，并返回已扫描的实参数。\n\n在所有的扫描参数中，若一个操作数实现了 Scan 方法（即它实现了 Scanner 接口）， 该操作数将使用该方法扫描其文本。此外，若已扫描的实参数少于所提供的实参数，就会返回一个错误。\n\n所有需要被扫描的实参都必须是基本类型或 Scanner 接口的实现。\n\n注意：Fscan 等函数会从输入中多读取一个字符（rune），因此，如果循环调用扫描函数，可能会跳过输入中的某些数据。一般只有在输入的数据中没有空白符时该问题才会出现。若提供给 Fscan 的读取器实现了 ReadRune，就会用该方法读取字符。若此读取器还实现了 UnreadRune 方法，就会用该方法保存字符，而连续的调用将不会丢失数据。若要为没有 ReadRune 和 UnreadRune 方法的读取器加上这些功能，需使用 bufio.NewReader。\n","source":"_posts/golang-print-struct-md.md","raw":"---\ntitle: golang print struct\ndate: 2017-11-30 17:24:25\ntags: [golang,struct]\ncategories: golang\n---\n## golang 如何打印出结构体struct的全部信息？\n在程序调试中，经常用到fmt.Println(a)或者fmt.Printf(\"%v\",a)。\n```\npackage main\nimport \"fmt\"\n\ntype Eg struct {\n   name string\n   age  int  \n}\n\nfunc main() {\n     a: = Eg{\"tom\",21}\n     fmt.Println(a)\n     fmt.Printf(\"%v\",a)\n     fmt.Printf(\"%+v\",a)\n}\n```\n此例输出：\n```\n{tom 21}\n{tom 21}{name:tom age:21}\n```\n## 知识拓展\nPrintf 类的函数，都有一个不接受任何格式化的Print 函数，等价于对每一个操作数都应用 %v。另一个变参函数 Println 会在操作数之间插入空白，并在末尾追加一个换行符。\n### 占位符\n\n#### 普通占位符\n 在打印结构体时，“加号”标记（%+v）会添加字段名\n\n占位符                        说明                        举例                                        输出\n%v        相应值的默认格式。                            Printf(\"%v\", site)，Printf(\"%+v\", site)   {studygolang}，{Name:studygolang}\n%#v       相应值的Go语法表示                            Printf(\"#v\", site)                        main.Website{Name:\"studygolang\"}\n%T        相应值的类型的Go语法表示                      Printf(\"%T\", site)                        main.Website\n%%        字面上的百分号，并非值的占位符                Printf(\"%%\")                              %\n\n#### 布尔占位符\n占位符                        说明                        举例                                        输出\n%t        单词 true 或 false。                            Printf(\"%t\", true)                        true\n\n#### 整数占位符\n占位符                        说明                        举例                                    输出\n%b        二进制表示                                    Printf(\"%b\", 5)                        101\n%c        相应Unicode码点所表示的字符                    Printf(\"%c\", 0x4E2D)                中\n%d        十进制表示                                    Printf(\"%d\", 0x12)                    18\n%o        八进制表示                                    Printf(\"%d\", 10)                    12\n%q        单引号围绕的字符字面值，由Go语法安全地转义        Printf(\"%q\", 0x4E2D)                '中'\n%x        十六进制表示，字母形式为小写 a-f                Printf(\"%x\", 13)                    d\n%X        十六进制表示，字母形式为大写 A-F                Printf(\"%x\", 13)                    D\n%U        Unicode格式：U+1234，等同于 \"U+%04X\"            Printf(\"%U\", 0x4E2D)                U+4E2D\n#### 浮点数和复数的组成部分（实部和虚部）\n占位符                        说明                                                举例                                    输出\n%b        无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat    \n        的 'b' 转换格式一致。例如 -123456p-78\n%e        科学计数法，例如 -1234.456e+78                                    Printf(\"%e\", 10.2)                            1.020000e+01\n%E        科学计数法，例如 -1234.456E+78                                    Printf(\"%e\", 10.2)                            1.020000E+01\n%f        有小数点而无指数，例如 123.456                                    Printf(\"%f\", 10.2)                            10.200000\n%g        根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(\"%g\", 10.20)                            10.2\n%G        根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(\"%G\", 10.20+2i)                        (10.2+2i)\n#### 字符串与字节切片\n占位符                        说明                                                举例                                    输出\n%s        输出字符串表示（string类型或[]byte)                            Printf(\"%s\", []byte(\"Go语言中文网\"))        Go语言中文网\n%q        双引号围绕的字符串，由Go语法安全地转义                            Printf(\"%q\", \"Go语言中文网\")                \"Go语言中文网\"\n%x        十六进制，小写字母，每字节两个字符                                Printf(\"%x\", \"golang\")                        676f6c616e67\n%X        十六进制，大写字母，每字节两个字符                                Printf(\"%X\", \"golang\")                        676F6C616E67\n#### 指针\n占位符                        说明                                                举例                                    输出\n%p        十六进制表示，前缀 0x                                            Printf(\"%p\", &site)                            0x4f57f0\n#### 其他占位符标记\n占位符                        说明                                                举例                                    输出\n\\+        总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。            Printf(\"%+q\", \"中文\")                    \"\\u4e2d\\u6587\"\n\\-        在右侧而非左侧填充空格（左对齐该区域）\n\\#        备用格式：为八进制添加前导 0（%#o），为十六进制添加前导 0x（%#x）或    Printf(\"%#U\", '中')                        U+4E2D '中'\n        0X（%#X），为 %p（%#p）去掉前导 0x；如果可能的话，%q（%#q）会打印原始\n        （即反引号围绕的）字符串；如果是可打印字符，%U（%#U）会写出该字符的\n        Unicode 编码形式（如字符 x 会被打印成 U+0078 'x'）。\n' '        （空格）为数值中省略的正负号留出空白（% d）；\n        以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开\n0        填充前导的0而非空格；对于数字，这会将填充移到正负号之后\n\n##  Print 序列函数\n这里说的 Print 序列函数包括：Fprint/Fprintf/Fprintln/Sprint/Sprintf/Sprintln/Print/Printf/Println。之所以将放在一起介绍，是因为它们的使用方式类似、参数意思也类似。\n\n一般的，我们将Fprint/Fprintf/Fprintln归为一类；Sprint/Sprintf/Sprintln归为一类；Print/Printf/Println归为另一类。其中，Print/Printf/Println会调用相应的F开头一类函数。如：\n\nfunc Print(a ...interface{}) (n int, err error) {\n    return Fprint(os.Stdout, a...)\n}\nFprint/Fprintf/Fprintln 函数的第一个参数接收一个io.Writer类型，会将内容输出到io.Writer中去。而Print/Printf/Println 函数是将内容输出到标准输出中，因此，直接调用F类函数做这件事，并将os.Stdout作为第一个参数传入。\n\nSprint/Sprintf/Sprintln 是格式化内容为string类型，而并不输出到某处，需要格式化字符串并返回时，可以用次组函数。\n\n在这三组函数中，S/F/Printf函数通过指定的格式输出或格式化内容；S/F/Print函数只是使用默认的格式输出或格式化内容；S/F/Println函数使用默认的格式输出或格式化内容，同时会在最后加上\"换行符\"。\n\nPrint 序列函数的最后一个参数都是 a ...interface{} 这种不定参数。对于S/F/Printf序列，这个不定参数的实参个数应该和formt参数的占位符个数一致，否则会出现格式化错误；而对于其他函数，当不定参数的实参个数为多个时，它们之间会直接（对于S/F/Print）或通过\" \"（空格）（对于S/F/Println）连接起来（注：对于S/F/Print，当两个参数都不是字符串时，会自动添加一个空格，否则不会加。感谢guoshanhe1983 反馈。官方 effective_go 也有说明）。利用这一点，我们可以做如下事情：\n\nresult1 := fmt.Sprintln(\"studygolang.com\", 2013)\nresult2 := fmt.Sprint(\"studygolang.com\", 2013)\nresult1的值是：studygolang.com 2013，result2的值是：studygolang.com2013。这起到了连接字符串的作用，而不需要通过strconv.Itoa()转换。\n\nPrint序列函数用的较多，而且也易于使用（可能需要掌握一些常用的占位符用法），接下来我们结合fmt包中几个相关的接口来掌握更多关于Print的内容。\n\n## Scanning\n一组类似的函数通过扫描已格式化的文本来产生值。Scan、Scanf 和 Scanln 从 os.Stdin 中读取；Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取； Sscan、Sscanf 和 Sscanln 从实参字符串中读取。Scanln、Fscanln 和 Sscanln 在换行符处停止扫描，且需要条目紧随换行符之后；Scanf、Fscanf 和 Sscanf 需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。\n\nScanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于 Printf。例如，%x 会将一个整数扫描为十六进制数，而 %v 则会扫描该值的默认表现格式。\n\n格式化行为类似于 Printf，但也有如下例外：\n\n%p 没有实现\n%T 没有实现\n%e %E %f %F %g %G 都完全等价，且可扫描任何浮点数或复数数值\n%s 和 %v 在扫描字符串时会将其中的空格作为分隔符\n标记 # 和 + 没有实现\n在使用 %v 占位符扫描整数时，可接受友好的进制前缀0（八进制）和0x（十六进制）。\n\n宽度被解释为输入的文本（%5s 意为最多从输入中读取5个 rune 来扫描成字符串），而扫描函数则没有精度的语法（没有 %5.2f，只有 %5f）。\n\n当以某种格式进行扫描时，无论在格式中还是在输入中，所有非空的连续空白字符 （除换行符外）都等价于单个空格。由于这种限制，格式字符串文本必须匹配输入的文本，如果不匹配，扫描过程就会停止，并返回已扫描的实参数。\n\n在所有的扫描参数中，若一个操作数实现了 Scan 方法（即它实现了 Scanner 接口）， 该操作数将使用该方法扫描其文本。此外，若已扫描的实参数少于所提供的实参数，就会返回一个错误。\n\n所有需要被扫描的实参都必须是基本类型或 Scanner 接口的实现。\n\n注意：Fscan 等函数会从输入中多读取一个字符（rune），因此，如果循环调用扫描函数，可能会跳过输入中的某些数据。一般只有在输入的数据中没有空白符时该问题才会出现。若提供给 Fscan 的读取器实现了 ReadRune，就会用该方法读取字符。若此读取器还实现了 UnreadRune 方法，就会用该方法保存字符，而连续的调用将不会丢失数据。若要为没有 ReadRune 和 UnreadRune 方法的读取器加上这些功能，需使用 bufio.NewReader。\n","slug":"golang-print-struct-md","published":1,"updated":"2017-12-01T01:43:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecu000pyhfyf3ft18es","content":"<h2 id=\"golang-如何打印出结构体struct的全部信息？\"><a href=\"#golang-如何打印出结构体struct的全部信息？\" class=\"headerlink\" title=\"golang 如何打印出结构体struct的全部信息？\"></a>golang 如何打印出结构体struct的全部信息？</h2><p>在程序调试中，经常用到fmt.Println(a)或者fmt.Printf(“%v”,a)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\">import &quot;fmt&quot;</div><div class=\"line\"></div><div class=\"line\">type Eg struct &#123;</div><div class=\"line\">   name string</div><div class=\"line\">   age  int  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">     a: = Eg&#123;&quot;tom&quot;,21&#125;</div><div class=\"line\">     fmt.Println(a)</div><div class=\"line\">     fmt.Printf(&quot;%v&quot;,a)</div><div class=\"line\">     fmt.Printf(&quot;%+v&quot;,a)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此例输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;tom 21&#125;</div><div class=\"line\">&#123;tom 21&#125;&#123;name:tom age:21&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"知识拓展\"><a href=\"#知识拓展\" class=\"headerlink\" title=\"知识拓展\"></a>知识拓展</h2><p>Printf 类的函数，都有一个不接受任何格式化的Print 函数，等价于对每一个操作数都应用 %v。另一个变参函数 Println 会在操作数之间插入空白，并在末尾追加一个换行符。</p>\n<h3 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><h4 id=\"普通占位符\"><a href=\"#普通占位符\" class=\"headerlink\" title=\"普通占位符\"></a>普通占位符</h4><p> 在打印结构体时，“加号”标记（%+v）会添加字段名</p>\n<p>占位符                        说明                        举例                                        输出<br>%v        相应值的默认格式。                            Printf(“%v”, site)，Printf(“%+v”, site)   {studygolang}，{Name:studygolang}<br>%#v       相应值的Go语法表示                            Printf(“#v”, site)                        main.Website{Name:”studygolang”}<br>%T        相应值的类型的Go语法表示                      Printf(“%T”, site)                        main.Website<br>%%        字面上的百分号，并非值的占位符                Printf(“%%”)                              %</p>\n<h4 id=\"布尔占位符\"><a href=\"#布尔占位符\" class=\"headerlink\" title=\"布尔占位符\"></a>布尔占位符</h4><p>占位符                        说明                        举例                                        输出<br>%t        单词 true 或 false。                            Printf(“%t”, true)                        true</p>\n<h4 id=\"整数占位符\"><a href=\"#整数占位符\" class=\"headerlink\" title=\"整数占位符\"></a>整数占位符</h4><p>占位符                        说明                        举例                                    输出<br>%b        二进制表示                                    Printf(“%b”, 5)                        101<br>%c        相应Unicode码点所表示的字符                    Printf(“%c”, 0x4E2D)                中<br>%d        十进制表示                                    Printf(“%d”, 0x12)                    18<br>%o        八进制表示                                    Printf(“%d”, 10)                    12<br>%q        单引号围绕的字符字面值，由Go语法安全地转义        Printf(“%q”, 0x4E2D)                ‘中’<br>%x        十六进制表示，字母形式为小写 a-f                Printf(“%x”, 13)                    d<br>%X        十六进制表示，字母形式为大写 A-F                Printf(“%x”, 13)                    D<br>%U        Unicode格式：U+1234，等同于 “U+%04X”            Printf(“%U”, 0x4E2D)                U+4E2D</p>\n<h4 id=\"浮点数和复数的组成部分（实部和虚部）\"><a href=\"#浮点数和复数的组成部分（实部和虚部）\" class=\"headerlink\" title=\"浮点数和复数的组成部分（实部和虚部）\"></a>浮点数和复数的组成部分（实部和虚部）</h4><p>占位符                        说明                                                举例                                    输出<br>%b        无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat<br>        的 ‘b’ 转换格式一致。例如 -123456p-78<br>%e        科学计数法，例如 -1234.456e+78                                    Printf(“%e”, 10.2)                            1.020000e+01<br>%E        科学计数法，例如 -1234.456E+78                                    Printf(“%e”, 10.2)                            1.020000E+01<br>%f        有小数点而无指数，例如 123.456                                    Printf(“%f”, 10.2)                            10.200000<br>%g        根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(“%g”, 10.20)                            10.2<br>%G        根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(“%G”, 10.20+2i)                        (10.2+2i)</p>\n<h4 id=\"字符串与字节切片\"><a href=\"#字符串与字节切片\" class=\"headerlink\" title=\"字符串与字节切片\"></a>字符串与字节切片</h4><p>占位符                        说明                                                举例                                    输出<br>%s        输出字符串表示（string类型或[]byte)                            Printf(“%s”, []byte(“Go语言中文网”))        Go语言中文网<br>%q        双引号围绕的字符串，由Go语法安全地转义                            Printf(“%q”, “Go语言中文网”)                “Go语言中文网”<br>%x        十六进制，小写字母，每字节两个字符                                Printf(“%x”, “golang”)                        676f6c616e67<br>%X        十六进制，大写字母，每字节两个字符                                Printf(“%X”, “golang”)                        676F6C616E67</p>\n<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><p>占位符                        说明                                                举例                                    输出<br>%p        十六进制表示，前缀 0x                                            Printf(“%p”, &amp;site)                            0x4f57f0</p>\n<h4 id=\"其他占位符标记\"><a href=\"#其他占位符标记\" class=\"headerlink\" title=\"其他占位符标记\"></a>其他占位符标记</h4><p>占位符                        说明                                                举例                                    输出<br>+        总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。            Printf(“%+q”, “中文”)                    “\\u4e2d\\u6587”<br>-        在右侧而非左侧填充空格（左对齐该区域）<br>#        备用格式：为八进制添加前导 0（%#o），为十六进制添加前导 0x（%#x）或    Printf(“%#U”, ‘中’)                        U+4E2D ‘中’<br>        0X（%#X），为 %p（%#p）去掉前导 0x；如果可能的话，%q（%#q）会打印原始<br>        （即反引号围绕的）字符串；如果是可打印字符，%U（%#U）会写出该字符的<br>        Unicode 编码形式（如字符 x 会被打印成 U+0078 ‘x’）。<br>‘ ‘        （空格）为数值中省略的正负号留出空白（% d）；<br>        以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开<br>0        填充前导的0而非空格；对于数字，这会将填充移到正负号之后</p>\n<h2 id=\"Print-序列函数\"><a href=\"#Print-序列函数\" class=\"headerlink\" title=\"Print 序列函数\"></a>Print 序列函数</h2><p>这里说的 Print 序列函数包括：Fprint/Fprintf/Fprintln/Sprint/Sprintf/Sprintln/Print/Printf/Println。之所以将放在一起介绍，是因为它们的使用方式类似、参数意思也类似。</p>\n<p>一般的，我们将Fprint/Fprintf/Fprintln归为一类；Sprint/Sprintf/Sprintln归为一类；Print/Printf/Println归为另一类。其中，Print/Printf/Println会调用相应的F开头一类函数。如：</p>\n<p>func Print(a …interface{}) (n int, err error) {<br>    return Fprint(os.Stdout, a…)<br>}<br>Fprint/Fprintf/Fprintln 函数的第一个参数接收一个io.Writer类型，会将内容输出到io.Writer中去。而Print/Printf/Println 函数是将内容输出到标准输出中，因此，直接调用F类函数做这件事，并将os.Stdout作为第一个参数传入。</p>\n<p>Sprint/Sprintf/Sprintln 是格式化内容为string类型，而并不输出到某处，需要格式化字符串并返回时，可以用次组函数。</p>\n<p>在这三组函数中，S/F/Printf函数通过指定的格式输出或格式化内容；S/F/Print函数只是使用默认的格式输出或格式化内容；S/F/Println函数使用默认的格式输出或格式化内容，同时会在最后加上”换行符”。</p>\n<p>Print 序列函数的最后一个参数都是 a …interface{} 这种不定参数。对于S/F/Printf序列，这个不定参数的实参个数应该和formt参数的占位符个数一致，否则会出现格式化错误；而对于其他函数，当不定参数的实参个数为多个时，它们之间会直接（对于S/F/Print）或通过” “（空格）（对于S/F/Println）连接起来（注：对于S/F/Print，当两个参数都不是字符串时，会自动添加一个空格，否则不会加。感谢guoshanhe1983 反馈。官方 effective_go 也有说明）。利用这一点，我们可以做如下事情：</p>\n<p>result1 := fmt.Sprintln(“studygolang.com”, 2013)<br>result2 := fmt.Sprint(“studygolang.com”, 2013)<br>result1的值是：studygolang.com 2013，result2的值是：studygolang.com2013。这起到了连接字符串的作用，而不需要通过strconv.Itoa()转换。</p>\n<p>Print序列函数用的较多，而且也易于使用（可能需要掌握一些常用的占位符用法），接下来我们结合fmt包中几个相关的接口来掌握更多关于Print的内容。</p>\n<h2 id=\"Scanning\"><a href=\"#Scanning\" class=\"headerlink\" title=\"Scanning\"></a>Scanning</h2><p>一组类似的函数通过扫描已格式化的文本来产生值。Scan、Scanf 和 Scanln 从 os.Stdin 中读取；Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取； Sscan、Sscanf 和 Sscanln 从实参字符串中读取。Scanln、Fscanln 和 Sscanln 在换行符处停止扫描，且需要条目紧随换行符之后；Scanf、Fscanf 和 Sscanf 需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。</p>\n<p>Scanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于 Printf。例如，%x 会将一个整数扫描为十六进制数，而 %v 则会扫描该值的默认表现格式。</p>\n<p>格式化行为类似于 Printf，但也有如下例外：</p>\n<p>%p 没有实现<br>%T 没有实现<br>%e %E %f %F %g %G 都完全等价，且可扫描任何浮点数或复数数值<br>%s 和 %v 在扫描字符串时会将其中的空格作为分隔符<br>标记 # 和 + 没有实现<br>在使用 %v 占位符扫描整数时，可接受友好的进制前缀0（八进制）和0x（十六进制）。</p>\n<p>宽度被解释为输入的文本（%5s 意为最多从输入中读取5个 rune 来扫描成字符串），而扫描函数则没有精度的语法（没有 %5.2f，只有 %5f）。</p>\n<p>当以某种格式进行扫描时，无论在格式中还是在输入中，所有非空的连续空白字符 （除换行符外）都等价于单个空格。由于这种限制，格式字符串文本必须匹配输入的文本，如果不匹配，扫描过程就会停止，并返回已扫描的实参数。</p>\n<p>在所有的扫描参数中，若一个操作数实现了 Scan 方法（即它实现了 Scanner 接口）， 该操作数将使用该方法扫描其文本。此外，若已扫描的实参数少于所提供的实参数，就会返回一个错误。</p>\n<p>所有需要被扫描的实参都必须是基本类型或 Scanner 接口的实现。</p>\n<p>注意：Fscan 等函数会从输入中多读取一个字符（rune），因此，如果循环调用扫描函数，可能会跳过输入中的某些数据。一般只有在输入的数据中没有空白符时该问题才会出现。若提供给 Fscan 的读取器实现了 ReadRune，就会用该方法读取字符。若此读取器还实现了 UnreadRune 方法，就会用该方法保存字符，而连续的调用将不会丢失数据。若要为没有 ReadRune 和 UnreadRune 方法的读取器加上这些功能，需使用 bufio.NewReader。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-如何打印出结构体struct的全部信息？\"><a href=\"#golang-如何打印出结构体struct的全部信息？\" class=\"headerlink\" title=\"golang 如何打印出结构体struct的全部信息？\"></a>golang 如何打印出结构体struct的全部信息？</h2><p>在程序调试中，经常用到fmt.Println(a)或者fmt.Printf(“%v”,a)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\">import &quot;fmt&quot;</div><div class=\"line\"></div><div class=\"line\">type Eg struct &#123;</div><div class=\"line\">   name string</div><div class=\"line\">   age  int  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">     a: = Eg&#123;&quot;tom&quot;,21&#125;</div><div class=\"line\">     fmt.Println(a)</div><div class=\"line\">     fmt.Printf(&quot;%v&quot;,a)</div><div class=\"line\">     fmt.Printf(&quot;%+v&quot;,a)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此例输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;tom 21&#125;</div><div class=\"line\">&#123;tom 21&#125;&#123;name:tom age:21&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"知识拓展\"><a href=\"#知识拓展\" class=\"headerlink\" title=\"知识拓展\"></a>知识拓展</h2><p>Printf 类的函数，都有一个不接受任何格式化的Print 函数，等价于对每一个操作数都应用 %v。另一个变参函数 Println 会在操作数之间插入空白，并在末尾追加一个换行符。</p>\n<h3 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h3><h4 id=\"普通占位符\"><a href=\"#普通占位符\" class=\"headerlink\" title=\"普通占位符\"></a>普通占位符</h4><p> 在打印结构体时，“加号”标记（%+v）会添加字段名</p>\n<p>占位符                        说明                        举例                                        输出<br>%v        相应值的默认格式。                            Printf(“%v”, site)，Printf(“%+v”, site)   {studygolang}，{Name:studygolang}<br>%#v       相应值的Go语法表示                            Printf(“#v”, site)                        main.Website{Name:”studygolang”}<br>%T        相应值的类型的Go语法表示                      Printf(“%T”, site)                        main.Website<br>%%        字面上的百分号，并非值的占位符                Printf(“%%”)                              %</p>\n<h4 id=\"布尔占位符\"><a href=\"#布尔占位符\" class=\"headerlink\" title=\"布尔占位符\"></a>布尔占位符</h4><p>占位符                        说明                        举例                                        输出<br>%t        单词 true 或 false。                            Printf(“%t”, true)                        true</p>\n<h4 id=\"整数占位符\"><a href=\"#整数占位符\" class=\"headerlink\" title=\"整数占位符\"></a>整数占位符</h4><p>占位符                        说明                        举例                                    输出<br>%b        二进制表示                                    Printf(“%b”, 5)                        101<br>%c        相应Unicode码点所表示的字符                    Printf(“%c”, 0x4E2D)                中<br>%d        十进制表示                                    Printf(“%d”, 0x12)                    18<br>%o        八进制表示                                    Printf(“%d”, 10)                    12<br>%q        单引号围绕的字符字面值，由Go语法安全地转义        Printf(“%q”, 0x4E2D)                ‘中’<br>%x        十六进制表示，字母形式为小写 a-f                Printf(“%x”, 13)                    d<br>%X        十六进制表示，字母形式为大写 A-F                Printf(“%x”, 13)                    D<br>%U        Unicode格式：U+1234，等同于 “U+%04X”            Printf(“%U”, 0x4E2D)                U+4E2D</p>\n<h4 id=\"浮点数和复数的组成部分（实部和虚部）\"><a href=\"#浮点数和复数的组成部分（实部和虚部）\" class=\"headerlink\" title=\"浮点数和复数的组成部分（实部和虚部）\"></a>浮点数和复数的组成部分（实部和虚部）</h4><p>占位符                        说明                                                举例                                    输出<br>%b        无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat<br>        的 ‘b’ 转换格式一致。例如 -123456p-78<br>%e        科学计数法，例如 -1234.456e+78                                    Printf(“%e”, 10.2)                            1.020000e+01<br>%E        科学计数法，例如 -1234.456E+78                                    Printf(“%e”, 10.2)                            1.020000E+01<br>%f        有小数点而无指数，例如 123.456                                    Printf(“%f”, 10.2)                            10.200000<br>%g        根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(“%g”, 10.20)                            10.2<br>%G        根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出                Printf(“%G”, 10.20+2i)                        (10.2+2i)</p>\n<h4 id=\"字符串与字节切片\"><a href=\"#字符串与字节切片\" class=\"headerlink\" title=\"字符串与字节切片\"></a>字符串与字节切片</h4><p>占位符                        说明                                                举例                                    输出<br>%s        输出字符串表示（string类型或[]byte)                            Printf(“%s”, []byte(“Go语言中文网”))        Go语言中文网<br>%q        双引号围绕的字符串，由Go语法安全地转义                            Printf(“%q”, “Go语言中文网”)                “Go语言中文网”<br>%x        十六进制，小写字母，每字节两个字符                                Printf(“%x”, “golang”)                        676f6c616e67<br>%X        十六进制，大写字母，每字节两个字符                                Printf(“%X”, “golang”)                        676F6C616E67</p>\n<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><p>占位符                        说明                                                举例                                    输出<br>%p        十六进制表示，前缀 0x                                            Printf(“%p”, &amp;site)                            0x4f57f0</p>\n<h4 id=\"其他占位符标记\"><a href=\"#其他占位符标记\" class=\"headerlink\" title=\"其他占位符标记\"></a>其他占位符标记</h4><p>占位符                        说明                                                举例                                    输出<br>+        总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。            Printf(“%+q”, “中文”)                    “\\u4e2d\\u6587”<br>-        在右侧而非左侧填充空格（左对齐该区域）<br>#        备用格式：为八进制添加前导 0（%#o），为十六进制添加前导 0x（%#x）或    Printf(“%#U”, ‘中’)                        U+4E2D ‘中’<br>        0X（%#X），为 %p（%#p）去掉前导 0x；如果可能的话，%q（%#q）会打印原始<br>        （即反引号围绕的）字符串；如果是可打印字符，%U（%#U）会写出该字符的<br>        Unicode 编码形式（如字符 x 会被打印成 U+0078 ‘x’）。<br>‘ ‘        （空格）为数值中省略的正负号留出空白（% d）；<br>        以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开<br>0        填充前导的0而非空格；对于数字，这会将填充移到正负号之后</p>\n<h2 id=\"Print-序列函数\"><a href=\"#Print-序列函数\" class=\"headerlink\" title=\"Print 序列函数\"></a>Print 序列函数</h2><p>这里说的 Print 序列函数包括：Fprint/Fprintf/Fprintln/Sprint/Sprintf/Sprintln/Print/Printf/Println。之所以将放在一起介绍，是因为它们的使用方式类似、参数意思也类似。</p>\n<p>一般的，我们将Fprint/Fprintf/Fprintln归为一类；Sprint/Sprintf/Sprintln归为一类；Print/Printf/Println归为另一类。其中，Print/Printf/Println会调用相应的F开头一类函数。如：</p>\n<p>func Print(a …interface{}) (n int, err error) {<br>    return Fprint(os.Stdout, a…)<br>}<br>Fprint/Fprintf/Fprintln 函数的第一个参数接收一个io.Writer类型，会将内容输出到io.Writer中去。而Print/Printf/Println 函数是将内容输出到标准输出中，因此，直接调用F类函数做这件事，并将os.Stdout作为第一个参数传入。</p>\n<p>Sprint/Sprintf/Sprintln 是格式化内容为string类型，而并不输出到某处，需要格式化字符串并返回时，可以用次组函数。</p>\n<p>在这三组函数中，S/F/Printf函数通过指定的格式输出或格式化内容；S/F/Print函数只是使用默认的格式输出或格式化内容；S/F/Println函数使用默认的格式输出或格式化内容，同时会在最后加上”换行符”。</p>\n<p>Print 序列函数的最后一个参数都是 a …interface{} 这种不定参数。对于S/F/Printf序列，这个不定参数的实参个数应该和formt参数的占位符个数一致，否则会出现格式化错误；而对于其他函数，当不定参数的实参个数为多个时，它们之间会直接（对于S/F/Print）或通过” “（空格）（对于S/F/Println）连接起来（注：对于S/F/Print，当两个参数都不是字符串时，会自动添加一个空格，否则不会加。感谢guoshanhe1983 反馈。官方 effective_go 也有说明）。利用这一点，我们可以做如下事情：</p>\n<p>result1 := fmt.Sprintln(“studygolang.com”, 2013)<br>result2 := fmt.Sprint(“studygolang.com”, 2013)<br>result1的值是：studygolang.com 2013，result2的值是：studygolang.com2013。这起到了连接字符串的作用，而不需要通过strconv.Itoa()转换。</p>\n<p>Print序列函数用的较多，而且也易于使用（可能需要掌握一些常用的占位符用法），接下来我们结合fmt包中几个相关的接口来掌握更多关于Print的内容。</p>\n<h2 id=\"Scanning\"><a href=\"#Scanning\" class=\"headerlink\" title=\"Scanning\"></a>Scanning</h2><p>一组类似的函数通过扫描已格式化的文本来产生值。Scan、Scanf 和 Scanln 从 os.Stdin 中读取；Fscan、Fscanf 和 Fscanln 从指定的 io.Reader 中读取； Sscan、Sscanf 和 Sscanln 从实参字符串中读取。Scanln、Fscanln 和 Sscanln 在换行符处停止扫描，且需要条目紧随换行符之后；Scanf、Fscanf 和 Sscanf 需要输入换行符来匹配格式中的换行符；其它函数则将换行符视为空格。</p>\n<p>Scanf、Fscanf 和 Sscanf 根据格式字符串解析实参，类似于 Printf。例如，%x 会将一个整数扫描为十六进制数，而 %v 则会扫描该值的默认表现格式。</p>\n<p>格式化行为类似于 Printf，但也有如下例外：</p>\n<p>%p 没有实现<br>%T 没有实现<br>%e %E %f %F %g %G 都完全等价，且可扫描任何浮点数或复数数值<br>%s 和 %v 在扫描字符串时会将其中的空格作为分隔符<br>标记 # 和 + 没有实现<br>在使用 %v 占位符扫描整数时，可接受友好的进制前缀0（八进制）和0x（十六进制）。</p>\n<p>宽度被解释为输入的文本（%5s 意为最多从输入中读取5个 rune 来扫描成字符串），而扫描函数则没有精度的语法（没有 %5.2f，只有 %5f）。</p>\n<p>当以某种格式进行扫描时，无论在格式中还是在输入中，所有非空的连续空白字符 （除换行符外）都等价于单个空格。由于这种限制，格式字符串文本必须匹配输入的文本，如果不匹配，扫描过程就会停止，并返回已扫描的实参数。</p>\n<p>在所有的扫描参数中，若一个操作数实现了 Scan 方法（即它实现了 Scanner 接口）， 该操作数将使用该方法扫描其文本。此外，若已扫描的实参数少于所提供的实参数，就会返回一个错误。</p>\n<p>所有需要被扫描的实参都必须是基本类型或 Scanner 接口的实现。</p>\n<p>注意：Fscan 等函数会从输入中多读取一个字符（rune），因此，如果循环调用扫描函数，可能会跳过输入中的某些数据。一般只有在输入的数据中没有空白符时该问题才会出现。若提供给 Fscan 的读取器实现了 ReadRune，就会用该方法读取字符。若此读取器还实现了 UnreadRune 方法，就会用该方法保存字符，而连续的调用将不会丢失数据。若要为没有 ReadRune 和 UnreadRune 方法的读取器加上这些功能，需使用 bufio.NewReader。</p>\n"},{"title":"what is oauth","date":"2017-12-01T08:44:30.000Z","_content":"## Oauth介绍\n在Web应用中，我们习惯了使用Session来识别用户的登录状态.\nhttp协议本无状态(stateless),如何跳出Session来解决这个问题？\nOauth2.0的认证就是用来解决这个问题的。\n### 术语单词\n熟悉以下术语单词，对深入了解Oauth很有必要。\n 1. Resource\n 2. Resource Server\n 3. Resource Owner\n 4. User Agent\n 5. Client\n 6. Authorization Server\n 7. Access Token\n 8. Bearer Token\n\n### 流程\n\n  Resource Owner ----> Resource\n最简单的理解，就是用户获取资源，加入权限管理后就稍稍复杂了\n\n    ------                               ----------------------\n   |客户端|--A--Authorization Request-->| Resource Owner      |\n   |Client|<-B--Authorization Grant-----| Resource Owner      |\n   |CLient|--C--Authorization Grant---->| Authorization Server|\n   |CLient|<-D--Access Token------------| Authorization Server|\n   |Client|--E--Access Token----------->| Resource Server     |\n   |Client|<-F--Protected Rource--------| Resource Server     |\n","source":"_posts/what-is-oauth.md","raw":"---\ntitle: what is oauth\ndate: 2017-12-01 16:44:30\ntags: [Oauth]\n---\n## Oauth介绍\n在Web应用中，我们习惯了使用Session来识别用户的登录状态.\nhttp协议本无状态(stateless),如何跳出Session来解决这个问题？\nOauth2.0的认证就是用来解决这个问题的。\n### 术语单词\n熟悉以下术语单词，对深入了解Oauth很有必要。\n 1. Resource\n 2. Resource Server\n 3. Resource Owner\n 4. User Agent\n 5. Client\n 6. Authorization Server\n 7. Access Token\n 8. Bearer Token\n\n### 流程\n\n  Resource Owner ----> Resource\n最简单的理解，就是用户获取资源，加入权限管理后就稍稍复杂了\n\n    ------                               ----------------------\n   |客户端|--A--Authorization Request-->| Resource Owner      |\n   |Client|<-B--Authorization Grant-----| Resource Owner      |\n   |CLient|--C--Authorization Grant---->| Authorization Server|\n   |CLient|<-D--Access Token------------| Authorization Server|\n   |Client|--E--Access Token----------->| Resource Server     |\n   |Client|<-F--Protected Rource--------| Resource Server     |\n","slug":"what-is-oauth","published":1,"updated":"2017-12-03T14:12:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvecv000qyhfyyaz6a7fo","content":"<h2 id=\"Oauth介绍\"><a href=\"#Oauth介绍\" class=\"headerlink\" title=\"Oauth介绍\"></a>Oauth介绍</h2><p>在Web应用中，我们习惯了使用Session来识别用户的登录状态.<br>http协议本无状态(stateless),如何跳出Session来解决这个问题？<br>Oauth2.0的认证就是用来解决这个问题的。</p>\n<h3 id=\"术语单词\"><a href=\"#术语单词\" class=\"headerlink\" title=\"术语单词\"></a>术语单词</h3><p>熟悉以下术语单词，对深入了解Oauth很有必要。</p>\n<ol>\n<li>Resource</li>\n<li>Resource Server</li>\n<li>Resource Owner</li>\n<li>User Agent</li>\n<li>Client</li>\n<li>Authorization Server</li>\n<li>Access Token</li>\n<li>Bearer Token</li>\n</ol>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>  Resource Owner —-&gt; Resource<br>最简单的理解，就是用户获取资源，加入权限管理后就稍稍复杂了</p>\n<pre><code>------                               ----------------------\n</code></pre><p>   |客户端|–A–Authorization Request–&gt;| Resource Owner      |<br>   |Client|&lt;-B–Authorization Grant—–| Resource Owner      |<br>   |CLient|–C–Authorization Grant—-&gt;| Authorization Server|<br>   |CLient|&lt;-D–Access Token————| Authorization Server|<br>   |Client|–E–Access Token———–&gt;| Resource Server     |<br>   |Client|&lt;-F–Protected Rource——–| Resource Server     |</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Oauth介绍\"><a href=\"#Oauth介绍\" class=\"headerlink\" title=\"Oauth介绍\"></a>Oauth介绍</h2><p>在Web应用中，我们习惯了使用Session来识别用户的登录状态.<br>http协议本无状态(stateless),如何跳出Session来解决这个问题？<br>Oauth2.0的认证就是用来解决这个问题的。</p>\n<h3 id=\"术语单词\"><a href=\"#术语单词\" class=\"headerlink\" title=\"术语单词\"></a>术语单词</h3><p>熟悉以下术语单词，对深入了解Oauth很有必要。</p>\n<ol>\n<li>Resource</li>\n<li>Resource Server</li>\n<li>Resource Owner</li>\n<li>User Agent</li>\n<li>Client</li>\n<li>Authorization Server</li>\n<li>Access Token</li>\n<li>Bearer Token</li>\n</ol>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>  Resource Owner —-&gt; Resource<br>最简单的理解，就是用户获取资源，加入权限管理后就稍稍复杂了</p>\n<pre><code>------                               ----------------------\n</code></pre><p>   |客户端|–A–Authorization Request–&gt;| Resource Owner      |<br>   |Client|&lt;-B–Authorization Grant—–| Resource Owner      |<br>   |CLient|–C–Authorization Grant—-&gt;| Authorization Server|<br>   |CLient|&lt;-D–Access Token————| Authorization Server|<br>   |Client|–E–Access Token———–&gt;| Resource Server     |<br>   |Client|&lt;-F–Protected Rource——–| Resource Server     |</p>\n"},{"title":"Computer-English","date":"2017-06-29T03:59:47.000Z","_content":"# 计算机英语词汇\n## 第一部分、计算机算法常用术语中英对照\nData Structures 基本数据结构 \nDictionaries 字典 \nPriority Queues 堆 \nGraph Data Structures 图 \nSet Data Structures 集合 \nKd-Trees 线段树 \nNumerical Problems 数值问题 \nSolving Linear Equations 线性方程组 \nBandwidth Reduction 带宽压缩 \nMatrix Multiplication 矩阵乘法 \nDeterminants and Permanents 行列式 \nConstrained and Unconstrained Optimization 最值问题 \nLinear Programming 线性规划 \nRandom Number Generation 随机数生成 \nFactoring and Primality Testing 因子分解/质数判定 \nArbitrary Precision Arithmetic 高精度计算 \nKnapsack Problem 背包问题 \nDiscrete Fourier Transform 离散Fourier变换 \nCombinatorial Problems 组合问题 \nSorting 排序 \nSearching 查找 \nMedian and Selection 中位数 \nGenerating Permutations 排列生成 \nGenerating Subsets 子集生成 \nGenerating Partitions 划分生成 \nGenerating Graphs 图的生成 \nCalendrical Calculations 日期 \nJob Scheduling 工程安排 \nSatisfiability 可满足性 \nGraph Problems -- polynomial 图论-多项式算法 \nConnected Components 连通分支 \nTopological Sorting 拓扑排序 \nMinimum Spanning Tree 最小生成树 \nShortest Path 最短路径 \nTransitive Closure and Reduction 传递闭包 \nMatching 匹配 \nEulerian Cycle / Chinese Postman Euler回路/中国邮路 \nEdge and Vertex Connectivity 割边/割点 \nNetwork Flow 网络流 \nDrawing Graphs Nicely 图的描绘 \nDrawing Trees 树的描绘 \nPlanarity Detection and Embedding 平面性检测和嵌入 \nGraph Problems -- hard 图论-NP问题 \nClique 最大团 \nIndependent Set 独立集 \nVertex Cover 点覆盖 \nTraveling Salesman Problem 旅行商问题 \nHamiltonian Cycle Hamilton回路 \nGraph Partition 图的划分 \nVertex Coloring 点染色 \nEdge Coloring 边染色 \nGraph Isomorphism 同构 \nSteiner Tree Steiner树 \nFeedback Edge/Vertex Set 最大无环子图 \nComputational Geometry 计算几何 \nConvex Hull 凸包 \nTriangulation 三角剖分 \nVoronoi Diagrams Voronoi图 \nNearest Neighbor Search 最近点对查询 \nRange Search 范围查询 \nPoint Location 位置查询 \nIntersection Detection 碰撞测试 \nBin Packing 装箱问题 \nMedial-Axis Transformation 中轴变换 \nPolygon Partitioning 多边形分割 \nSimplifying Polygons 多边形化简 \nShape Similarity 相似多边形 \nMotion Planning 运动规划 \nMaintaining Line Arrangements 平面分割 \nMinkowski Sum Minkowski和 \nSet and String Problems 集合与串的问题 \nSet Cover 集合覆盖 \nSet Packing 集合配置 \nString Matching 模式匹配 \nApproximate String Matching 模糊匹配 \nText Compression 压缩 \nCryptography 密码 \nFinite State Machine Minimization 有穷自动机简化 \nLongest Common Substring 最长公共子串 \nShortest Common Superstring 最短公共父串 \nDP——Dynamic Programming——动态规划 \nrecursion —— 递归 \n\n## 第二部分、编程词汇 \nA2A integration A2A整合 \nabstract 抽象的 \nabstract base class (ABC)抽象基类 \nabstract class 抽象类 \nabstraction 抽象、抽象物、抽象性 \naccess 存取、访问 \naccess level访问级别 \naccess function 访问函数 \naccount 账户 \naction 动作 \nactivate 激活 \nactive 活动的 \nactual parameter 实参 \nadapter 适配器 \nadd-in 插件 \naddress 地址 \naddress space 地址空间 \naddress-of operator 取地址操作符 \nADL (argument-dependent lookup) \nADO(ActiveX Data Object)ActiveX数据对象 \nadvanced\naggregation 聚合、聚集 \nalgorithm 算法 \nalias 别名 \nalign 排列、对齐 \nallocate 分配、配置 \nallocator分配器、配置器 \nangle bracket 尖括号 \nannotation 注解、评注 \nAPI (Application Programming Interface) 应用(程序)编程接口 \napp domain (application domain)应用域 \napplication 应用、应用程序 \napplication framework 应用程序框架 \nappearance 外观 \nappend 附加 \narchitecture 架构、体系结构 \narchive file 归档文件、存档文件 \nargument引数(传给函式的值)。参见parameter \narray 数组 \narrow operator 箭头操作符 \nASP(Active Server Page)活动服务器页面 \nASP.NET worker process ASP.NET工作者进程 \nassembly 装配件、配件 \nassembly language 汇编语言 \nassembly manifest 装配件清单 \nassert(ion) 断言 \nassign 赋值 \nassignment 赋值、分配 \nassignment operator 赋值操作符 \nassociated 相关的、相关联的 \nassociative container 关联式容器(对应sequential container) \nasynchronous 异步的 \natomic 原子的 \natomic operation 原子操作 \nattribute 特性、属性 \nauthentication service 验证服务 \nauthorization 授权 \naudio 音频 \nA.I. 人工智能 \nB2B integration B2B整合、B2B集成(business-to-business integration) \nbackground 背景、后台(进程) \nbackward compatible 向后兼容、向下兼容 \nbackup 备份 \nbackup device备份设备 \nbackup file 备份文件 \nbandwidth 带宽 \nbase class 基类 \nbase type 基类型 \nbatch 批处理 \nBCL (base class library)基类库 \nbinary 二进制 \nbinary search 二分查找 \nbinary tree 二叉树 \nbinary function 双参函数 \nbinary large object二进制大对象 \nbinary operator 二元操作符 \nbinding 绑定 \nbit 位 \nbitmap 位图 \nbitwise 按位... \nbitwise copy 为单元进行复制；位元逐一复制,按位拷 \nbitwise operation 按位运算 \nblock 块、区块、语句块 \nbookkeeping 簿记 \nboolean 布林值(真假值，true或false) \nborder 边框 \nbounds checking 边界检查 \nboxing 装箱、装箱转换 \nbrace (curly brace) 大括号、花括号 \nbracket (square brakcet) 中括号、方括号 \n\nbreakpoint 断点 \nbrowser applications 浏览器应用(程序) \nbrowser-accessible application 可经由浏览器访问的应用程序 \nbuild 编连(专指编译和连接 \nbuilt-in 内建、内置 \nbus 总线 \nbusiness 业务、商务(看场合) \nbusiness Logic 业务逻辑 \nbusiness rules 业务规则 \nbuttons 按钮 \nbug 臭虫 \nby/through 通过 \nbyte 位元组(由8 bits组成) \ncache 高速缓存 \ncalendar 日历 \ncall 调用 \ncallback 回调 \ncall-level interface (CLI)调用级接口(CLI) \ncall operator 调用操作符 \ncandidate key 候选键 (for database) \ncascading delete 级联删除 (for database) \ncascading update 级联更新 (for database) \ncasting 转型、造型转换 \ncatalog 目录 \nchain 链(function calls) \ncharacter 字符 \ncharacter format 字符格式 \ncharacter set 字符集 \nCHECK constraints CHECK约束 (for database) \ncheckpoint 检查点 (for database) \ncheck box 复选框 \ncheck button 复选按钮 \nchild class 子类 \nCIL (common intermediate language)通用中间语言、通用中介语言 \nclass 类 \nclass declaration 类声明 \nclass definition 类定义 \nclass derivation list 类继承列表 \nclass factory 类厂 \nclass hierarchy 类层次结构 \nclass library 类库 \nclass loader 类装载器 \nclass template 类模板 \nclass template partial specializations 类模板部分特化 \nclass template specializations 类模板特化 \nclassification 分类 \nclause 子句 \nclient application 客户端应用程序 \nclient cursor 客户端游标 (for database) \ncode page 代码页 \ncleanup 清理、清除 \nCLI (Common Language Infrastructure) 通用语言基础设施 \nclient 客户、客户端 \nclient area 客户区 \nclient-server 客户机/服务器、客户端/服务器 \nclipboard 剪贴板 \nclone 克隆 \nCLS (common language specification) 通用语言规范 \ncode access security 代码访问安全 \nCOFF (Common Object File Format) 通用对象文件格式 \ncollection 集合 \nCOM (Component Object Model) 组件对象模型 \ncombo box 组合框 \ncommand line 命令行 \ncomment 注释 \ncommit 提交 (for database) \ncommunication 通讯 \ncompatible 兼容 \ncompile time 编译期、编译时 \ncompiler 编译器 \ncomponent组件 \ncomposite index 复合索引、组合索引 (for database) \ncomposite key 复合键、组合键 (for database) \ncomposition 复合、组合 \nconcept 概念 \nconcrete具体的 \nconcrete class 具体类 \nconcurrency 并发、并发机制 \nconstraint 约束 (for database) \nconfiguration 配置、组态 \nconnection 连接 (for database) \nconnection pooling 连接池 \nconsole 控制台 \nconstant 常量 \nconstruct 构件、成分、概念、构造（for language） \nconstructor (ctor) 构造函数、构造器 \ncontainer 容器 \ncontainment包容 \ncontext 环境、上下文 \ncontrol 控件 \ncookie (不译) \ncopy 拷贝 \nCORBA 通用对象请求中介架构(Common Object Request Broker Architecture) \ncover 覆盖、涵盖 \ncreate/creation 创建、生成 \ncrosstab query 交叉表查询 (for database) \nCRTP (curiously recurring template pattern) \nCTS (common type system)通用类型系统 \ncube 多维数据集 (for database) \ncursor 光标 \ncursor 游标 (for database) \ncustom 定制、自定义 \ndata 数据 \ndata connection 数据连接 (for database) \nData Control Language (DCL) 数据控制语言(DCL) (for database) \nData Definition Language (DDL) 数据定义语言(DDL) (for database) \ndata dictionary 数据字典 (for database) \ndata dictionary view 数据字典视图 (for database) \ndata file 数据文件 (for database) \ndata integrity 数据完整性 (for database) \ndata manipulation language (DML)数据操作语言(DML) (for database) \ndata mart 数据集市 (for database) \ndata pump 数据抽取 (for database) \ndata scrubbing 数据清理 (for database) \ndata source 数据源 (for database) \nData source name (DSN) 数据源名称(DSN) (for database) \ndata warehouse 数据仓库 (for database) \ndataset 数据集 (for database) \ndatabase 数据库 (for database) \ndatabase catalog 数据库目录 (for database) \ndatabase diagram 数据关系图 (for database) \ndatabase file 数据库文件 (for database) \ndatabase object 数据库对象 (for database) \ndatabase owner 数据库所有者 (for database) \ndatabase project 数据库工程 (for database) \ndatabase role 数据库角色 (for database) \ndatabase schema 数据库模式、数据库架构 (for database) \ndatabase scrīpt 数据库脚本 (for database) \ndata-bound 数据绑定 (for database) \ndata-aware control数据感知控件 (for database) \ndata member 数据成员、成员变量 \ndataset 数据集 (for database) \ndata source 数据源 (for database) \ndata structure数据结构 \ndata table 数据表 (for database) \ndatagram 数据报文 \nDBMS (database management system)数据库管理系统 (for database) \nDCOM (distributed COM)分布式COM \ndead lock 死锁 (for database) \ndeallocate 归还 \ndebug 调试 \ndebugger 调试器 \ndecay 退化 \ndecision support 决策支持 \ndeclaration 声明 \ndeclarative referential integrity (DRI)声明引用完整性(DRI) (for database) \ndeduction 推导 \nDEFAULT constraint默认约束 (for database) \ndefault database 默认数据库 (for database) \ndefault instance 默认实例 (for database) \ndefault result set 默认结果集 (for database) \ndefault 缺省、默认值 \ndefer 推迟 \ndefinition 定义 \ndelegate 委托 \ndelegation 委托 \ndependent name \ndeploy 部署 \ndereference 解引用 \ndereference operator (提领)运算子 \nderived class 派生类 \ndesign by contract 契约式设计 \ndesign pattern 设计模式 \ndestroy 销毁 \ndestructor(dtor)析构函数、析构器 \ndevice 设备 \nDHTML (dynamic HyperText Markup Language)动态超文本标记语言 \ndialog 对话框 \ndigest 摘要 \ndigital 数字的 \nDIME (Direct Internet Message Encapsulation)直接Internet消息封装 \ndirective (编译)指示符 \ndirectory 目录 \ndirty pages脏页 (for database) \ndirty read 脏读 (for database) \ndisassembler 反汇编器 \nDISCO (Discovery of Web Services)Web Services的查找 \ndisk 盘 \ndispatch 调度、分派、派发（我喜欢“调度”） \nDISPID (Dispatch Identifier)分派标识符 \ndistributed computing 分布式计算 \ndistributed query 分布式查询 (for database) \nDNA (Distributed interNet Application) 分布式网间应用程序 \ndocument 文档 \nDOM (Document Object Model)文档对象模型 \ndot operator (圆)点操作符 \ndriver 驱动(程序) \nDTD (document type definition) 文档类型定义 \ndouble-byte character set (DBCS)双字节字符集(DBCS) \ndump 转储 \ndump file 转储文件 \ndynamic cursor 动态游标 (for database) \ndynamic filter 动态筛选 (for database) \ndynamic locking 动态锁定 (for database) \ndynamic recovery 动态恢复 (for database) \ndynamic snapshot 动态快照 (for database) \ndynamic SQL statements 动态SQL语句 (for database) \ndynamic assembly 动态装配件、动态配件 \ndynamic binding 动态绑定 \nEAI (enterprise application integration)企业应用程序集成(整合) \nEBCO (empty base class optimization) 空基类优化（机制） \ne-business 电子商务 \nEDI (Dlectronic Data Interchange)电子数据交换 \nefficiency 效率 \nefficient 高效 \nend-to-end authentication 端对端身份验证 \nend user 最终用户 \nengine 引擎 \nentity 实体 \nencapsulation 封装 \nenclosing class 外围类别(与巢状类别 nested class有关) \nenum (enumeration) 枚举 \nenumerators 枚举成员、枚举器 \nequal 相等 \nequality 相等性 \nequality operator 等号操作符 \nerror log 错误日志 (for database) \nescape code 转义码 \nescape character 转义符、转义字符 \nexclusive lock 排它锁 (for database) \nexplicit transaction 显式事务 (for database) \nevaluate 评估 \nevent 事件 \nevent driven 事件驱动的 \nevent handler 事件处理器 \nevidence 证据 \nexception 异常 \nexception declaration 异常声明 \nexception handling 异常处理、异常处理机制 \nexception-safe 异常安全的 \nexception specification 异常规范 \nexit 退出 \nexplicit 显式 \nexplicit specialization 显式特化 \nexport 导出 \nexpression 表达式 \nfacility 设施、设备 \nfat client 胖客户端 \nfeature 特性、特征 \nfetch 提取 \nfield 字段(java) \nfield 字段 (for database) \nfield length 字段长度 (for database) \nfile 文件 \nfilter 筛选 (for database) \nfinalization 终结 \nfirewall 防火墙 \nfinalizer 终结器 \nfirmware 固件 \nflag 标记 \nflash memory 闪存 \nflush 刷新 \nfont 字体 \nforeign key (FK) 外键(FK) (for database) \nform 窗体 \nformal parameter 形参 \nforward declaration 前置声明 \nforward-only 只向前的 \nforward-only cursor 只向前游标 (for database) \nfragmentation 碎片 (for database) \nframework 框架 \nfull specialization 完全特化 \nfunction 函数 \nfunction call operator (即operator ()) 函数调用操作符 \nfunction object 函数对象 \nfunction overloaded resolution函数重载决议 \nfunctionality 功能 \nfunction template函数模板 \nfunctor 仿函数 \nGAC (global assembly cache) 全局装配件缓存、全局配件缓存 \nGC (Garbage collection) 垃圾回收(机制)、垃圾收集(机制) \ngame 游戏 \ngenerate 生成 \ngeneric 泛化的、一般化的、通用的 \ngeneric algorithm通用算法 \ngenericity 泛型 \ngetter (相对于 setter)取值函数 \nglobal 全局的 \nglobal object 全局对象 \nglobal scope resolution operator 全局范围解析操作符 \ngrant 授权 (for database) \ngranularity 粒度 \ngroup 组、群 \ngroup box 分组框 \nGUI 图形界面 \nGUID (Globally Unique Identifier) 全球唯一标识符 \nhand shaking 握手 \nhandle 句柄 \nhandler 处理器 \nhard-coded 硬编码的 \nhard-copy 截屏图 \nhard disk 硬盘 \nhardware 硬件 \nhash table 散列表、哈希表 \nheader file头文件 \nheap 堆 \nhelp file 帮助文件 \nhierarchy 层次结构、继承体系 \nhierarchical data 阶层式数据、层次式数据 \nhook 钩子 \nHost (application)宿主(应用程序) \nhot key 热键 \nhyperlink 超链接 \nHTML (HyperText Markup Language) 超文本标记语言 \nHTTP pipeline HTTP管道 \nHTTP (HyperText Transfer Protocol) 超文本传输协议 \nicon 图标 \nIDE (Integrated Development Environment)集成开发环境 \nIDL (Interface Definition Language) 接口定义语言 \nidentifier 标识符 \nidle time 空闲时间 \nif and only if当且仅当 \nIL (Intermediate Language) 中间语言、中介语言 \nimage 图象 \nIME 输入法 \nimmediate base 直接基类 \nimmediate derived 直接派生类 \nimmediate updating 即时更新 (for database) \nimplicit transaction隐式事务 (for database) \nincremental update 增量更新 (for database) \nindex 索引 (for database) \nimplement 实现 \nimplementation 实现、实现品 \nimplicit 隐式 \nimport 导入 \nincrement operator 增加操作符 \ninfinite loop 无限循环 \ninfinite recursive 无限递归 \ninformation 信息 \ninfrastructure 基础设施 \ninheritance 继承、继承机制 \ninline 内联 \ninline expansion 内联展开 \ninitialization 初始化 \ninitialization list 初始化列表、初始值列表 \ninitialize 初始化 \ninner join 内联接 (for database) \nin-place active 现场激活 \ninstance 实例 \ninstantiated 具现化、实体化(常应用于template) \ninstantiation 具现体、具现化实体(常应用于template) \nintegrate 集成、整合 \nintegrity 完整性、一致性 \nintegrity constraint完整性约束 (for database) \ninterprocess communication (IPC)进程间通讯(IPC) \ninteracts 交互 \ninterface 接口 \nfor GUI 界面 \ninteroperability 互操作性、互操作能力 \ninterpreter 解释器 \nintrospection 自省 \ninvariants 不变性 \ninvoke 调用 \nisolation level 隔离级别 (for database) \niterate 迭代 \niterative 反复的、迭代的 \niterator 迭代器 \niteration 迭代(回圈每次轮回称为一个iteration) \nitem 项、条款、项目 \nJIT compilation JIT编译 即时编译 \nkey 键 (for database) \nkey column 键列 (for database) \nlaser 激光 \nlate binding 迟绑定 \nleft outer join 左向外联接 (for database) \nlevel 阶、层例 \nhigh level 高阶、高层 \nlibrary 库 \nlifetime 生命期、寿命 \nlink 连接、链接 \nlinkage 连接、链接 \nlinker 连接器、链接器 \nliteral constant 字面常数 \nlist 列表、表、链表 \nlist box 列表框 \nlivelock 活锁 (for database) \nload 装载、加载 \nload balancing 负载平衡 \nloader 装载器、载入器 \nlocal 局部的 \nlocal object 局部对象 \nlock 锁 \nlog 日志 \nlogin 登录 \nlogin security mode登录安全模式 (for database) \nlookup table 查找表 (for database) \nloop 循环 \nloose coupling 松散耦合 \nlvalue 左值 \nmachine code 机器码、机器代码 \nmacro 宏 \nmaintain 维护 \nmanaged code 受控代码、托管代码 \nManaged Extensions 受控扩充件、托管扩展 \nmanaged object 受控对象、托管对象 \nmangled name \nmanifest 清单 \nmanipulator 操纵器(iostream预先定义的一种东西) \nmany-to-many relationship 多对多关系 (for database) \nmany-to-one relationship 多对一关系 (for database) \nmarshal 列集 \nmember 成员 \nmember access operator 成员取用运算子(有dot和arrow两种) \nmember function 成员函数 \nmember initialization list成员初始值列表 \nmemberwise 以member为单元…、members 逐一… \nmemberwise copy \nmemory 内存 \nmemory leak 内存泄漏 \nmenu 菜单 \nmessage 消息 \nmessage based 基于消息的 \nmessage loop 消息环 \nmessage queuing消息队列 \nmetadata 元数据 \nmetaprogramming元编程 \nmethod 方法 \nmicro 微 \nmiddleware 中间件 \nmiddle tier 中间层 \nmodeling 建模 \nmodeling language 建模语言 \nmodifier 修饰字、修饰符 \nmodem 调制解调器 \nmodule 模块 \nmost derived class最底层的派生类 \nmouse 鼠标 \nmutable 可变的 \nmutex 互斥元、互斥体 \nmultidimensional OLAP (MOLAP) 多维OLAP(MOLAP) (for database) \nmultithreaded server application 多线程服务器应用程序 \nmultiuser 多用户 \nmulti-tasking 多任务 \nmulti-thread 多线程 \nmulticast delegate 组播委托、多点委托 \nnamed parameter 命名参数 \nnamed pipe 命名管道 \nnamespace 名字空间、命名空间 \nnative 原生的、本地的 \nnative code 本地码、本机码 \nNative Image Generator (NGEN)本地映像生成器 \nnested class 嵌套类 \nnested query 嵌套查询 (for database) \nnested table 嵌套表 (for database) \nnetwork 网络 \nnetwork card 网卡 \nnondependent name \nobject 对象 \nobject based 基于对象的 \nobject file 目标文件 \nobject model 对象模型 \nobject oriented 面向对象的 \nobject pooling 对象池化 \nODBC data source ODBC数据源 (for database) \nODBC driver ODBC驱动程序 (for database) \nODR (one-definition rule) \nOLE Automation objects OLE自动化对象 (for database) \nOLE Automation server OLE自动化服务器 (for database) \nOLE DB consumer OLE DB使用者 (for database) \nOLE DB for OLAP 用于OLAP的OLE DB (for database) \nOLE DB provider OLE DB提供者 (for database) \none-to-many relationship 一对多关系 (for database) \none-to-one relationship 一对一关系 (for database) \nonline analytical processing (OLAP) 联机分析处理(OLAP) (for database) \nonline redo log 联机重做日志 (for database) \nonline transaction processing (OLTP) 联机事务处理(OLTP) (for database) \nOpen Data Services (ODS) 开放式数据服务(ODS) (for database) \nOpen Database Connectivity (ODBC) 开放式数据库连接(ODBC) (for database) \noperand 操作数 \noperating system (OS) 操作系统 \noperation 操作 \noperator 操作符、运算符 \noption 选项 \noptimizer 优化器 \nouter join 外联接 (for database) \noverflow 上限溢位(相对于underflow) \noverhead 额外开销 \noverload 重载 \noverload resolution 重载决议 \noverloaded function 重载的函数 \noverloaded operator 被重载的操作符 \noverride 覆写、重载、重新定义 \npackage 包 \npackaging 打包 \npalette 调色板 \nparallel 并行 \nparameter 参数、形式参数、形参 \nparameter list 参数列表 \nparameterize 参数化 \nparent class 父类 \nparentheses 圆括弧、圆括号 \nparse 解析 \nparser 解析器 \npart 零件、部件 \npartial specialization 局部特化 \npass by address 传址(函式引数的传递方式)(非正式用语) \npass by reference 传地址、按引用传递 \npass by value 按值传递 \npattern 模式 \nPDA (personal digital assistant)个人数字助理 \nPE (Portable Executable) file 可移植可执行文件 \nperformance 性能 \npersistence 持久性 \nPInvoke (platform invoke service) 平台调用服务 \npixel 像素 \nplacement delete \nplacement new \nplaceholder 占位符 \nplatform 平台 \nPOD (plain old data (type)) \nPOI (point of instantiation) \npointer 指针 \npoll 轮询 \npooling 池化 \npolymorphism 多态 \npop up 弹出式 \nport 端口 \npostfix 后缀 \nprecedence 优先序(通常用于运算子的优先执行次序) \nprefix 前缀 \npreprocessor 预处理器 \nprimary key (PK)主键(PK) (for database) \nprimary table 主表 (for database) \nprimary template原始模板 \nprimitive type 原始类型 \nprint 打印 \nprinter 打印机 \nprocedure 过程 \nprocedural 过程式的、过程化的 \nprocess 进程 \nprofile 评测 \nprofiler 效能(性能)评测器 \nprogram 程序 \nprogrammer 程序员 \nprogramming编程、程序设计 \nprogress bar 进度指示器 \nproject 项目、工程 \nproperty 属性 \nprotocol 协议 \npseudo code伪码 \nqualified 经过资格修饰(例如加上scope运算子) \nqualifiedqualifier 修饰符 \nquality 质量 \nqueue 队列 \nrace condition 竞争条件（多线程环境常用语） \nradian 弧度 \nradio button 单选按钮 \nraise 引发(常用来表示发出一个exception) \nrandom number 随机数 \nrange 范围、区间 \nrank 等级 \nraw 未经处理的 \nreadOnly只读 \nrecord 记录 (for database) \nrecordset 记录集 (for database \nrecursive 递归 \nre-direction 重定向 \nrefactoring 重构 \nrefer 引用、参考 \nreference 引用、参考 \nreference counting引用计数 \nreferential integrity (RI)引用完整性(RI) (for database) \nregister 寄存器 \nreflection 反射 \nrefresh data 刷新数据 (for database) \nregular expression 正则表达式 \nrelational database 关系数据库 \nremote 远程 \nremote request 远程请求 \nrepresent 表述，表现 \nresolve 解析、决议 \nresolution 解析过程 \nresult set 结果集 (for database) \nretrieve data 检索数据 \nreturn 返回 \nreturn type 返回类型 \nreturn value 返回值 \nright outer join 右向外联接 (for database) \nrevoke 撤销 \nrobust 健壮 \nrobustness 健壮性 \nroll back 回滚 (for database) \nroll forward 前滚 (for database) \nroutine 例程 \nrow 行 (for database) \nrow lock 行锁 (for database) \nrowset 行集 (for database) \nRPC (remote procedure call)RPC(远程过程调用) \nruntime 执行期、运行期、执行时、运行时 \nrvalue 右值 \nsave 保存 \nsavepoint 保存点 (for database) \nSAX (Simple API for XML) \nscalable 可伸缩的、可扩展的 \nschedule 调度 \nscheduler 调度程序 \nschema 模式、纲目结构 \nscroll bar滚动条 \nscope 作用域、生存空间 \nscope operator 生存空间操作符 \nscope resolution operator 生存空间解析操作符 \nscreen 屏幕 \nSDK (Software Development Kit)软件开发包 \nsealed class 密封类 \nsearch 查找 \nsemantics 语义 \nsemaphore 信号量 \nsequential container序列式容器 \nserver 服务器、服务端 \nserial 串行 \nserialization/serialize 序列化 \nserver cursor服务端游标、服务器游标 (for database) \nsession 会话 (for database) \nsetter 设值函数 \nshared lock 共享锁 (for database) \nsibling 同级 \nside effect 副作用 \nsignature 签名 \nsingle-threaded 单线程 \nslider滑块 \nslot 槽 \nsmart pointer 智能指针 \nSMTP (Simple Mail Transfer Protocol) 简单邮件传输协议 \nsnapshot 截屏图 \nsnapshot 快照 (for database) \nspecialization 特化 \nspecification 规范、规格 \nsplitter 切分窗口 \nSOAP (simple object access protocol) 简单对象访问协议 \nsoftware 软件 \nsource code 源码、源代码 \n\nSQL (Structured Query Language) 结构化查询语言 (for database) \nstack 栈、堆栈 \nstack unwinding 叠辗转开解(此词用于exception主题) \nstandard library 标准库 \nstandard template library 标准模板库 \nstateless 无状态的 \nstatement 语句、声明 \nstatic cursor 静态游标 (for database) \nstatic SQL statements 静态SQL语句 (for database) \nstored procedure 存储过程 (for database) \nstatus bar 状态条 \nstream 流 \nstring 字符串 \nstub 存根 \nsubobject子对象 \nsubquery 子查询 (for database) \nsubroutine 子例程 \nsubscrīpt operator 下标操作符 \nsubset 子集 \nsubtype 子类型 \nsupport 支持 \nsuspend 挂起 \nsymbol 记号 \nsyntax 语法 \nsystem databases 系统数据库 (for database) \nsystem tables 系统表 (for database) \ntable 表 (for database) \ntable lock 表锁 (for database) \ntable-level constraint 表级约束 (for database) \ntape backup 磁带备份 (for database) \ntarget 标的,目标 \ntask switch 工作切换 \nTCP (Transport Control Protocol) 传输控制协议 \ntemplate 模板 \ntemplate-id \ntemplate argument deduction 模板参数推导 \ntemplate explicit specialization 模板显式特化 \ntemplate parameter 模板参数 \ntemplate template parameter \ntemporary object 临时对象 \ntemporary table 临时表 (for database) \ntext 文本 \ntext file 文本文件 \nthin client 瘦客户端 \nthird-party 第三方 \nthread 线程 \nthread-safe 线程安全的 \nthrow 抛出、引发(常指发出一个exception) \ntoken 符号、标记、令牌（看场合） \ntrace 跟踪 \ntransaction 事务 (for database) \ntransaction log 事务日志 (for database) \ntransaction rollback 事务回滚 (for database) \ntransactional replication 事务复制 (for database) \ntranslation unit 翻译单元 \ntraverse 遍历 \ntrigger 触发器 (for database) \ntwo-phase commit 两阶段提交 (for database) \ntuple \ntwo-phase lookup 两阶段查找 \ntype 类型 \nUDDI(Universary Descrīption, Discovery and Integration)统一描述、查询与集成 \nUML (unified modeling language)统一建模语言 \nunary function 单参函数 \nunary operator 一元操作符 \nunboxing 拆箱、拆箱转换 \nunderflow 下限溢位(相对于overflow) \nUnion query 联合查询 (for database) \nUNIQUE constraints UNIQUE约束 (for database) \nunique index 唯一索引 (for database) \nunmanaged code 非受控代码、非托管代码 \nunmarshal 散集 \nunqualified 未经限定的、未经修饰的 \nURI (Uniform Resource identifier) 统一资源标识符 \nURL (Uniform Resource Locator) 统一资源定位器 \nuser 用户 \nuser interface 用户界面 \nvalue types 值类型 \nvariable 变量 \nvector 向量(一种容器，有点类似array) \nviable 可行的 \nvideo 视频 \nview 视图 \nVEE (Virtual Execution Engine)虚拟执行引擎 \nvendor 厂商 \nview 视图 (for database) \nvirtual function 虚函数 \nvirtual machine 虚拟机 \nvirtual memory 虚拟内存 \nvowel 元音字母 \nWeb Services web服务 \nWHERE clause WHERE子句 (for database) \nwildcard characters 通配符字符 (for database) \nwildcard search 通配符搜索 (for database) \nwindow 窗口 \nwindow function 窗口函数 \nwindow procedure 窗口过程 \nWindows authentication Windows身份验证 \nwizard 向导 \nword 单词 \nword processor 字处理器 \nwrapper 包装、包装器 \nwrite enable 写启用 (for database) \nwrite-ahead log 预写日志 (for database) \nwrite-only 只写 \nWSDL (Web Service Descrīption Language)Web Service描述语言 \nXML Message Interface (XMI) XML消息接口 \nXML (eXtensible Markup Language) 可扩展标记语言 \nXSD (XML Schema Definition) XML模式定义语言 \nXSL (eXtensible Stylesheet Language) 可扩展样式表语言 \nXSLT (eXtensible Stylesheet Language Transformation)可扩展样式表语言转换 \nxxx based 基于xxx的 \nxxx oriented 面向xxx\n\n\n## 可能有重复，另一个版本\n\napplication 应用程式 应用、应用程序 \napplication framework 应用程式框架、应用框架 应用程序框架 \narchitecture 架构、系统架构 体系结构 \nargument 引数（传给函式的值）。叁见 parameter 叁数、实质叁数、实叁、自变量 \narray 阵列 数组 \narrow operator arrow（箭头）运算子 箭头操作符 \nassembly 装配件 \nassembly language 组合语言 汇编语言 \nassert(ion) 断言 \nassign 指派、指定、设值、赋值 赋值 \nassignment 指派、指定 赋值、分配 \nassignment operator 指派（赋值）运算子 = 赋值操作符 \nassociated 相应的、相关的 相关的、关联、相应的 \nassociative container 关联式容器（对应 sequential container） 关联式容器 \natomic 不可分割的 原子的 \nattribute 属性 属性、特性 \naudio 音讯 音频 \nA.I. 人工智慧 人工智能 \nbackground 背景 背景（用於图形着色） \n後台（用於行程） \nbackward compatible 回溯相容 向下兼容 \nbandwidth 频宽 带宽 \nbase class 基础类别 基类 \nbase type 基础型别 (等同於 base class) \nbatch 批次（意思是整批作业） 批处理 \nbenefit 利益 收益 \nbest viable function 最佳可行函式 最佳可行函式 \n（从 viable functions 中挑出的最佳吻合者） \nbinary search 二分搜寻法 二分查找 \nbinary tree 二元树 二叉树 \nbinary function 二元函式 双叁函数 \nbinary operator 二元运算子 二元操作符 \nbinding 系结 绑定 \nbit 位元 位 \nbit field 位元栏 位域 \nbitmap 位元图 位图 \nbitwise 以 bit 为单元逐一┅ \nbitwise copy 以 bit 为单元进行复制；位元逐一复制 位拷贝 \nblock 区块,区段 块、区块、语句块 \nboolean 布林值（真假值，true 或 false） 布尔值 \nborder 边框、框线 边框 \nbrace(curly brace) 大括弧、大括号 花括弧、花括号 \nbracket(square brakcet) 中括弧、中括号 方括弧、方括号 \nbreakpoint 中断点 断点 \nbuild 建造、构筑、建置（MS 用语） \nbuild－in 内建 内置 \nbus 汇流排 总线 \nbusiness 商务,业务 业务 \nbuttons 按钮 按钮 \nbyte 位元组（由 8 bits 组成） 字节 \ncache 快取 高速缓存 \ncall 呼叫、叫用 调用 \ncallback 回呼 回调 \ncall operator call（函式呼叫）运算子调用操作符 \n（同 function call operator） \ncandidate function 候选函式 候选函数 \n（在函式多载决议程序中出现的候选函式） \nchain 串链（例 chain of function calls） 链 \ncharacter 字元 字符 \ncheck box 核取方块 (i.e. check button) 复选框 \nchecked exception 可控式异常(Java) \ncheck button 方钮 (i.e. check box) 复选按钮 \nchild class 子类别（或称为derived class, subtype） 子类 \nclass 类别 类 \nclass body 类别本体 类体 \nclass declaration 类别宣告、类别宣告式 类声明 \nclass definition 类别定义、类别定义式 类定义 \nclass derivation list 类别衍化列 类继承列表 \nclass head 类别表头 类头 \nclass hierarchy 类别继承体系, 类别阶层 类层次体系 \nclass library 类别程式库、类别库 类库 \nclass template 类别模板、类别范本 类模板 \nclass template partial specializations \n类别模板偏特化 类模板部分特化 \nclass template specializations \n类别模板特化 类模板特化 \ncleanup 清理、善後 清理、清除 \nclient 客端、客户端、客户 客户 \nclient－server 主从架构 客户/服务器 \nclipboard 剪贴簿 剪贴板 \nclone 复制 克隆 \ncollection 群集 集合 \ncombo box 复合方块、复合框 组合框 \ncommand line 命令列 命令行 \n(系统文字模式下的整行执行命令) \ncommunication 通讯 通讯 \ncompatible 相容 兼容 \ncompile time 编译期 编译期、编译时 \ncompiler 编译器 编译器 \ncomponent 组件 组件 \ncomposition 复合、合成、组合 组合 \ncomputer 电脑、计算机 计算机、电脑 \nconcept 概念 概念 \nconcrete 具象的 实在的 \nconcurrent 并行 并发 \nconfiguration 组态 配置 \nconnection 连接，连线（网络,资料库） 连接 \nconstraint 约束（条件） \nconstruct 构件 构件 \ncontainer 容器 容器 \n（存放资料的某种结构如 list, vector...） \ncontainment 内含 包容 \ncontext 背景关系、周遭环境、上下脉络 环境、上下文 \ncontrol 控制元件、控件 控件 \nconsole 主控台 控制台 \nconst 常数（constant 的缩写，C++ 关键字） \nconstant 常数（相对於 variable） 常量 \nconstructor（ctor） 建构式 构造函数 \n（与class 同名的一种 member functions） \ncopy (v) 复制、拷贝 拷贝 \ncopy (n) 复件, 副本 \ncover 涵盖 覆盖 \ncreate 创建、建立、产生、生成 创建 \ncreation 产生、生成 创建 \ncursor 游标 光标 \ncustom 订制、自定 定制 \ndata 资料 数据 \ndatabase 资料库 数据库 \ndatabase schema 数据库结构纲目 \ndata member 资料成员、成员变数 数据成员、成员变量 \ndata structure 资料结构 数据结构 \ndatagram 资料元 数据报文 \ndead lock 死结 死锁 \ndebug 除错 调试 \ndebugger 除错器 调试器 \ndeclaration 宣告、宣告式 声明 \ndeduction 推导（例：template argument deduction） 推导、推断 \ndefault 预设 缺省、默认 \ndefer 延缓 推迟 \ndefine 定义 预定义\ndefinition 定义、定义区、定义式 定义 \ndelegate 委派、委托、委任 委托 \ndelegation （同上） \ndemarshal 反编列 散集 \ndereference 提领（取出指标所指物体的内容） 解叁考 \ndereference operator dereference（提领）运算子 * 解叁考操作符 \nderived class 衍生类别 派生类 \ndesign by contract 契约式设计 \ndesign pattern 设计范式、设计样式 设计模式 \n※ 最近我比较喜欢「设计范式」一词 \ndestroy 摧毁、销毁 \ndestructor 解构式 析构函数 \ndevice 装置、设备 设备 \ndialog 对话窗、对话盒 对话框 \ndirective 指令（例：using directive） (编译)指示符 \ndirectory 目录 目录 \ndisk 碟 盘 \ndispatch 分派 分派 \ndistributed computing 分布式计算 (分布式电算) 分布式计算 \n分散式计算 (分散式电算) \ndocument 文件 文档 \ndot operator dot（句点）运算子 . (圆)点操作符 \ndriver 驱动程式 驱动（程序） \ndynamic binding 动态系结 动态绑定 \nefficiency 效率 效率 \nefficient 高效 高效 \nend user 终端用户 \nentity 物体 实体、物体 \nencapsulation 封装 封装 \nenclosing class 外围类别（与巢状类别 nested class 有关）外围类 \nenum (enumeration) 列举（一种 C++ 资料型别） 枚举 \nenumerators 列举元（enum 型别中的成员） 枚举成员、枚举器 \nequal 相等 相等 \nequality 相等性 相等性 \nequality operator equality（等号）运算子 == 等号操作符 \nequivalence 等价性、等同性、对等性 等价性 \nequivalent 等价、等同、对等 等价 \nescape code 转义码 转义码 \nevaluate 评估、求值、核定 评估 \nevent 事件 事件 \nevent driven 事件驱动的 事件驱动的 \nexception 异常情况 异常 \nexception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明 \nexception handling 异常处理、异常处理机制 异常处理、异常处理机制 \nexception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范 \nexit 退离（指离开函式时的那一个执行点） 退出 \nexplicit 明白的、明显的、显式 显式 \nexport 汇出 引出、导出 \nexpression 运算式、算式 表达式 \nfacility 设施、设备 设施、设备 \nfeature 特性 \nfield 栏位,资料栏（Java） 字段, 值域（Java） \nfile 档案 文件 \nfirmware 韧体 固件 \nflag 旗标 标记 \nflash memory 快闪记忆体 闪存 \nflexibility 弹性 灵活性 \nflush 清理、扫清 刷新 \nfont 字型 字体 \nform 表单（programming 用语） 窗体 \nformal parameter 形式叁数 形式叁数 \nforward declaration 前置宣告 前置声明 \nforwarding 转呼叫,转发 转发 \nforwarding function 转呼叫函式,转发函式 转发函数 \nfractal 碎形 分形 \nframework 框架 框架 \nfull specialization 全特化（ref. partial specialization） \nfunction 函式、函数 函数 \nfunction call operator 同 call operator \nfunction object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象 \nfunction overloaded resolution \n函式多载决议程序 函数重载解决（方案） \nfunctionality 功能、机能 功能 \nfunction template 函式模板、函式范本 函数模板 \nfunctor 仿函式 仿函式、函子 \ngame 游戏 游戏 \ngenerate 生成 \ngeneric 泛型、一般化的 一般化的、通用的、泛化 \ngeneric algorithm 泛型演算法 通用算法 \ngetter (相对於 setter) 取值函式 \nglobal 全域的（对应於 local） 全局的 \nglobal object 全域物件 全局对象 \nglobal scope resolution operator \n全域生存空间（范围决议）运算子 :: 全局范围解析操作符 \ngroup 群组 \ngroup box 群组方块 分组框 \nguard clause 卫述句 (Refactoring, p250) 卫语句 \nGUI 图形介面 图形界面 \nhand shaking 握手协商 \nhandle 识别码、识别号、号码牌、权柄 句柄 \nhandler 处理常式 处理函数 \nhard－coded 编死的 硬编码的 \nhard－copy 硬拷图 屏幕截图 \nhard disk 硬碟 硬盘 \nhardware 硬体 硬件 \nhash table 杂凑表 哈希表、散列表 \nheader file 表头档、标头档 头文件 \nheap 堆积 堆 \nhierarchy 阶层体系 层次结构（体系） \nhook 挂钩 钩子 \nhyperlink 超链结 超链接 \nicon 图示、图标 图标 \nIDE 整合开发环境 集成开发环境 \nidentifier 识别字、识别符号 标识符 \nif and only if 若且唯若 当且仅当 \nIllinois 伊利诺 伊利诺斯 \nimage 影像 图象 \nimmediate base 直接的（紧临的）上层 base class。 直接上层基类 \nimmediate derived 直接的（紧临的）下层 derived class。 直接下层派生类 \nimmutability 不变性 \nimmutable 不可变（的） \nimplement 实作、实现 实现 \nimplementation 实作品、实作体、实作码、实件 实现 \nimplicit 隐喻的、暗自的、隐式 隐式 \nimport 汇入 导入 \nincrement operator 累加运算子 ++ 增加操作符 \ninfinite loop 无穷回圈 无限循环 \ninfinite recursive 无穷递回 无限递归 \ninformation 资讯 信息 \ninfrastructure 公共基础建设 \ninheritance 继承、继承机制 继承、继承机制 \ninline 行内 内联 \ninline expansion 行内展开 内联展开 \ninitialization 初始化（动作） 初始化 \ninitialization list 初值列 初始值列表 \ninitialize 初始化 初始化 \ninner class 内隐类别 内嵌类 \ninstance 实体 实例 \n（根据某种表述而实际产生的「东西」） \ninstantiated 具现化、实体化（常应用於 template） 实例化 \ninstantiation 具现体、具现化实体（常应用於 template） 实例 \ninteger (integral) 整数（的） 整型（的） \nintegrate 整合 集成 \ninteracts 交谈、互动 交互 \ninterface 介面 接口 \nfor GUI 介面 界面 \ninterpreter 直译器 解释器 \ninvariants 恒常性,约束条件 约束条件 \ninvoke 唤起 调用 \niterate 迭代（回圈一个轮回一个轮回地进行） 迭代 \nexception 异常情况 异常 \nexception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明 \nexception handling 异常处理、异常处理机制 异常处理、异常处理机制 \nexception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范 \nexit 退离（指离开函式时的那一个执行点） 退出 \nexplicit 明白的、明显的、显式 显式 \nexport 汇出 引出、导出 \nexpression 运算式、算式 表达式 \nfacility 设施、设备 设施、设备 \nfeature 特性 \nfield 栏位,资料栏（Java） 字段, 值域（Java） \nfile 档案 文件 \nfirmware 韧体 固件 \nflag 旗标 标记 \nflash memory 快闪记忆体 闪存 \nflexibility 弹性 灵活性 \nflush 清理、扫清 刷新 \nfont 字型 字体 \nform 表单（programming 用语） 窗体 \nformal parameter 形式叁数 形式叁数 \nforward declaration 前置宣告 前置声明 \nforwarding 转呼叫,转发 转发 \nforwarding function 转呼叫函式,转发函式 转发函数 \nfractal 碎形 分形 \nframework 框架 框架 \nfull specialization 全特化（ref. partial specialization） \nfunction 函式、函数 函数 \nfunction call operator 同 call operator \nfunction object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象 \nfunction overloaded resolution \n函式多载决议程序 函数重载解决（方案） \nfunctionality 功能、机能 功能 \nfunction template 函式模板、函式范本 函数模板 \nfunctor 仿函式 仿函式、函子 \ngame 游戏 游戏 \ngenerate 生成 \ngeneric 泛型、一般化的 一般化的、通用的、泛化 \ngeneric algorithm 泛型演算法 通用算法 \ngetter (相对於 setter) 取值函式 \nglobal 全域的（对应於 local） 全局的 \nglobal object 全域物件 全局对象 \nglobal scope resolution operator \n全域生存空间（范围决议）运算子 :: 全局范围解析操作符 \ngroup 群组 \ngroup box 群组方块 分组框 \nguard clause 卫述句 (Refactoring, p250) 卫语句 \nGUI 图形介面 图形界面 \nhand shaking 握手协商 \nhandle 识别码、识别号、号码牌、权柄 句柄 \nhandler 处理常式 处理函数 \nhard－coded 编死的 硬编码的 \nhard－copy 硬拷图 屏幕截图 \nhard disk 硬碟 硬盘 \nhardware 硬体 硬件 \nhash table 杂凑表 哈希表、散列表 \nheader file 表头档、标头档 头文件 \nheap 堆积 堆 \nhierarchy 阶层体系 层次结构（体系） \nhook 挂钩 钩子 \nhyperlink 超链结 超链接 \nicon 图示、图标 图标 \nIDE 整合开发环境 集成开发环境 \nidentifier 识别字、识别符号 标识符 \nif and only if 若且唯若 当且仅当 \nIllinois 伊利诺 伊利诺斯 \nimage 影像 图象 \nimmediate base 直接的（紧临的）上层 base class。 直接上层基类 \nimmediate derived 直接的（紧临的）下层 derived class。 直接下层派生类 \nimmutability 不变性 \nimmutable 不可变（的） \nimplement 实作、实现 实现 \nimplementation 实作品、实作体、实作码、实件 实现 \nimplicit 隐喻的、暗自的、隐式 隐式 \nimport 汇入 导入 \nincrement operator 累加运算子 ++ 增加操作符 \ninfinite loop 无穷回圈 无限循环 \ninfinite recursive 无穷递回 无限递归 \ninformation 资讯 信息 \ninfrastructure 公共基础建设 \ninheritance 继承、继承机制 继承、继承机制 \ninline 行内 内联 \ninline expansion 行内展开 内联展开 \ninitialization 初始化（动作） 初始化 \ninitialization list 初值列 初始值列表 \ninitialize 初始化 初始化 \ninner class 内隐类别 内嵌类 \ninstance 实体 实例 \n（根据某种表述而实际产生的「东西」） \ninstantiated 具现化、实体化（常应用於 template） 实例化 \ninstantiation 具现体、具现化实体（常应用於 template） 实例 \ninteger (integral) 整数（的） 整型（的） \nintegrate 整合 集成 \ninteracts 交谈、互动 交互 \ninterface 介面 接口 \nfor GUI 介面 界面 \ninterpreter 直译器 解释器 \ninvariants 恒常性,约束条件 约束条件 \ninvoke 唤起 调用 \niterate 迭代（回圈一个轮回一个轮回地进行） 迭代 \niterative 反覆的，迭代的 \niterator 迭代器（一种泛型指标） 迭代器 \niteration 迭代（回圈每次轮回称为一个 iteration） 迭代 \nitem 项目、条款 项、条款、项目 \nlaser 雷射 激光 \nlevel 阶 层 (级) \n例 high level 高阶 高层 \nlibrary 程式库、函式库 库、函数库 \nlifetime 生命期、寿命 生命期、寿命 \nlink 联结、连结 连接,链接 \nlinker 联结器、连结器 连接器 \nliteral constant 字面常数（例 3.14 或 \"hi\" 这等常数值） 字面常数 \nlist 串列（linked－list） 列表、表、链表 \nlist box 列表方块、列表框 列表框 \nload 载入 装载 \nloader 载入器 装载器、载入器 \nlocal 区域的（对应於 global） 局部的 \nlocal object 区域物件 局部对象 \nlock 机锁 \nloop 回圈 循环 \nlvalue 左值 左值 \nmacro 巨集 宏 \nmagic number 魔术数字 魔法数 \nmaintain 维护 维护 \nmanipulator 操纵器（iostream 预先定义的一种东西） 操纵器 \nmarshal 编列 列集 \n叁考 demarshal \nmechanism 机制 机制 \nmember 成员 成员 \nmember access operator 成员取用运算子（有 dot 和 arrow 两种） 成员存取操作符 \nmember function 成员函式 成员函数 \nmember initialization list \n成员初值列 成员初始值列表 \nmemberwise 以 member 为单元┅、members 逐一┅ 以成员为单位 \nmemberwise copy 以 members 为单元逐一复制 \nmemory 记忆体 内存 \nmenu 表单、选单 菜单 \nmessage 讯息 消息 \nmessage based 以讯息为基础的 基於消息的 \nmessage loop 讯息回圈 消息环 \nmethod (java) 方法、行为、函式 方法 \nmeta－ 超－ 元－ \n例 meta－programming 超编程 元编程 \nmicro 微 微 \nmiddleware 中介层 中间件 \nmodeling 模塑 \nmodeling language 塑模语言，建模语言 \nmodem 数据机 调制解调器 \nmodule 模组 模块 \nmodifier 饰词 修饰符 \nmost derived class 最末层衍生类别 最底层的派生类 \nmouse 滑鼠 鼠标 \nmutable 可变的 可变的 \nmulti－tasking 多工 多任务 \nnamespace 命名空间 名字空间、命名空间 \nnative 原生的 本地的、固有的 \nnested class 巢状类别 嵌套类 \nnetwork 网路 网络 \nnetwork card 网路卡 网卡 \nobject 物件 对象 \nobject based 以物件为基础的 基於对象的 \nobject file 目的档 目标文件 \nobject model 物件模型 对象模型 \nobject oriented 物件导向的 面向对象的 \nonline 线上 在线 \nopaque 不透明的 \noperand 运算元 操作数 \noperating system (OS) 作业系统 操作系统 \noperation 操作、操作行为 操作 \noperator 运算子 操作符、运算符 \noption 选项，可选方案 选项 \nordinary 常规的 常规的 \noverflow 上限溢位（相对於 underflow） 溢出（underflow:下溢） \noverhead 额外负担、额外开销 额外开销 \noverload 多载化、多载化、重载 重载 \noverloaded function 多载化函式 重载的函数 \noverloaded operator 多载化运算子 被重载的操作符 \noverloaded set 多载集合 重载集合 \noverride 改写、覆写 重载、改写、重新定义 \n（在 derived class 中重新定义虚拟函式 \npackage 套件 包 \npair 对组 \npalette 调色盘、组件盘、工具箱 \npane 窗格 窗格 \n（有时为嵌板之意，例 Java Content Pane） \nparallel 平行 并行 \nparameter 叁数（函式叁数列上的变数） 叁数、形式叁数、形叁 \nparameter list 叁数列 叁数列表 \nparent class 父类别（或称 base class） 父类 \nparentheses 小括弧、小括号 圆括弧、圆括号 \nparse 解析 解析 \npart 零件 部件 \npartial specialization 偏特化（ref. C++ Primer 3/e, 16.10） 局部特化 \n（ref. full specialization） \npass by address 传址（函式引数的传递方式）（非正式用语）传地址 \npass by reference 传址（函式引数的一种传递方式） 传地址, 按引用传递 \npass by value 传值（函式引数的一种传递方式） 按值传递 \npattern 范式、样式 模式 \nperformance 效率、性能兼而有之 性能 \npersistence 永续性 持久性 \npixel 图素、像素 像素 \nplacement delete ref. C++ Primer 3/e, 15.8.2 \nplacement new ref. C++ Primer 3/e, 15.8.2 \nplatform 平台 平台 \npointer 指标 指针 \n址位器（和址叁器 reference 形成对映，满好） \npoll 轮询 轮询 \npolymorphism 多型 多态 \npop up 冒起式、弹出式 弹出式 \nport 埠 端口 \npostfix 後置式、後序式 後置式 \nprecedence 优先序（通常用於运算子的优先执行次序） \nprefix 前置式、前序式 前置式 \npreprocessor 前处理器 预处理器 \nprime 质数 素数 \nprimitive type 基本型别 (不同於 base class,基础类别) \nprint 列印 打印 \nprinter 印表机 打印机 \npriority 优先权 (通常用於执行绪获得 CPU 时间的优先次序） \nprocedure 程序 过程 \nprocedural 程序性的、程序式的 过程式的、过程化的 \nprocess 行程 进程 \nprofile 评测 评测 \nprofiler 效能（效率）评测器 效能（性能）评测器 \nprogrammer 程式员 程序员 \nprogramming 编程、程式设计、程式化 编程 \nprogress bar 进度指示器 进度指示器 \nproject 专案 项目、工程 \nproperty 属性 \nprotocol 协定 协议 \npseudo code 假码、虚拟码、伪码 伪码 \nqualified 经过资格修饰（例如加上 scope 运算子） 限定 \nqualifier 资格修饰词、饰词 限定修饰词 \nquality 品质 质量 \nqueue 伫列 队列 \nradian 径度 弧度 \nradio button 圆钮 单选按钮 \nraise 引发（常用来表示发出一个 exception） 引起、引发 \nrandom number 随机数、乱数 随机数 \nrange 范围、区间（用於 STL 时） 范围、区间 \nrank 等级、分等（ref. C++Primer 3/e 9,15章） 等级 \nraw 生鲜的、未经处理的 未经处理的 \nrecord 记录 记录 \nrecordset 记录集 记录集 \nrecursive 递回 递归 \nre－direction 重导向 重定向 \nrefactoring 重构、重整 重构 \nrefer 取用 叁考 \nrefer to 指向、指涉、指代 \nreference （C++ 中类似指标的东西，相当於 \"化身\"） 引用、叁考 \n址叁器, see pointer \nregister 暂存器 寄存器 \nreflection 反射 反射、映像 \nrelational database 关联式资料库 关系数据库 \nrepresent 表述，表现 表述，表现 \nresolve 决议（为算式中的符号名称寻找 解析 \n对应之宣告式的过程） \nresolution 决议程序、决议过程 解析过程 \nresolution 解析度 分辨率 \nrestriction 局限 \nreturn 传回、回返 返回 \nreturn type 回返型别 返回类型 \nreturn value 回返值 返回值 \nrobust 强固、稳健 健壮 \nrobustness 强固性、稳健性 健壮性 \nroutine 常式 例程 \nruntime 执行期 运行期、运行时 \ncommon language runtime (CLR) 译为「通用语言执行层」 \nrvalue 右值 右值 \nsave 储存 存储 \nschedule 排程 调度 \nscheduler 排程器 调度程序 \nscheme 结构纲目、组织纲目 \nscroll bar 卷轴 滚动条 \nscope 生存空间、生存范围、范畴、作用域 生存空间 \nscope operator 生存空间（范围决议）运算子 :: 生存空间操作符 \nscope resolution operator \n生存空间决议运算子 生存空间解析操作符 \n（与scope operator同） \nscreen 萤幕 屏幕 \nsearch 搜寻 查找 \nsemantics 语意 语义 \nsequential container 序列式容器 顺序式容器 \n（对应於 associative container） \nserver 伺服器、伺服端 服务器、服务端 \nserial 串行 \nserialization 次第读写,序列化 序列化 \n(serialize) \nsetter (相对於 getter) 设值函式 \nsignal 信号 \nsignature 标记式、签名式、署名式 签名 \nslider 滚轴 滑块 \nslot 条孔、槽 槽 \nsmart pointer 灵巧指标、精灵指标 智能指针 \nsnapshot 萤幕快照（图） 屏幕截图 \nspecialization 特殊化、特殊化定义、特殊化宣告 特化 \nspecification 规格 规格、规范 \nsplitter 分裂视窗 切分窗口 \nsoftware 软体 软件 \nsolution 解法,解决方案 方案 \nsource 原始码 源码、源代码 \nstack 堆叠 栈 \nstack unwinding 堆叠辗转开解（此词用於 exception 主题） 栈辗转开解 * \nstandard library 标准程式库 \nstandard template library 标准模板程式库 \nstatement 述句 语句、声明 \nstatus bar 状态列、状态栏 状态条 \nSTL 见 standard template library \nstream 资料流、串流 流 \nstring 字串 字符串 \nsubroutine \nsubscript operator 下标运算子 [ ] 下标操作符 \nsubtype 子型别 子类型 \nsupport 支援 支持 \nsuspend 虚悬 挂起 \nsymbol 符号 记号 \nsyntax 语法 语法 \ntag 标签 标记 \n索引标签,页签 \ntarget 标的（例 target pointer：标的指标） 目标 \ntask switch 工作切换 任务切换 \ntemplate 模板、范本 模板 \ntemplate argument deduction \n模板引数推导 模板叁数推导 \ntemplate explicit specialization \n模板显式特化（版本） 模板显式特化 \ntemplate parameter 模板叁数 模板叁数 \ntemporary object 暂时物件 临时对象 \ntext 文字 文本 \ntext file 程式本文档（放置程式原始码的档案） 文本文件 \nthread 执行绪 线程 \nthread safe 多绪安全 多线程安全 \nthrow 丢掷（常指发出一个 exception） 丢掷、引发 \ntoken 语汇单元 符号、标记 \ntransaction 交易 事务 \ntransparent(ly) 透通的(地) \ntraverse 巡访（来回走动） 遍历 \ntrigger 触发 触发 \ntype 型别 类型 \nUML unified modeling language 统一建模语言 \nunary function 一元函式 单叁函数 \nunary operator 一元运算子 一元操作符 \nunderflow 下限溢位（相对於 overflow） 下溢 \nunchecked exception 不可控异常(Java) \nunqualified 未经资格修饰（而直接取用） \nunwinding ref. stack unwinding \nuser 使用者、用户 用户 \nuser interface 使用者介面、用户介面、人机介面 用户界面 \nvariable 变数（相对於常数 const） 变量 \nvector 向量（一种容器，有点类似 array） 向量、矢量 \nviable 可实行的、可行的 可行的 \nviable function 可行函式 可行函数 \n（从 candidate functions 中挑出者） \nvideo 视讯 视频 \nview (1) 视图 \n(document/view) 文档/视图 \nview (2) 映件 \nvirtual function 虚拟函式 虚函数 \nvirtual machine 虚拟机器 虚拟机 \nvirtual memory 虚拟记忆体 虚内存, 虚存 \nvolatile 易挥发的、易变的 \nvowel 母音 元音字母 \nwindow 视窗 窗口 \nwindow function 视窗函式 窗口函数 \nwindow procedure 视窗函式 窗口过程 \nword 字 单词 \nword processor 文书处理器 字处理器 \nwrapper 外覆、外包 包装absence 缺席\naccess 访问存取通路进入\nachieve 实现完成\nacquire 获得\nadjacency list method 邻接表表示法\nadjacency matrix method 邻接矩阵表示法\nalgorithm 算法\nallocate 留下分配\nanalog 推论\nappend 添加\narchive 档案归档\narray 数组\nassign 分配\nassume 假设\nassurance 确信信任\nATM(asynchronous transfer mode) 异步传输模式\nb.. real programs kernels 实程序核心程序\nb.. toy benchmark synthetic benchmark 简单基准程序复合基准程序\nbalance 平衡\nbandwidth 带宽\nbatch 一批一组\nbenchmark 基准测试程序\nbest-fit algorithm 最佳适应算法\nBFS(breadth first search) 广度优先搜索法\nbinary 二进制\nbinary relation 二元关系\nbinary tree 二叉树\nbit series 比特序列\nblack-box white-box 黑盒白盒\nblock miss 块失效\nblocked 阻塞(等待状态也称阻塞或封锁状态)\nboundary 界线分界\nbridge 网桥\nbubble sort 冒泡排序\ncalculation 计算\ncandidate key 候选键(辅键)\ncapability 能力才能\ncapacity 容量\ncartesian product 笛卡尔积\nCASE(com.. aided sof.. engineering) 计算机辅助软件工程\nCCP(communication control processor) 通信控制处理机\ncell 信元\ncharacteristic 特征特性\ncircuit switching 线路交换\ncircular wait 循环等待\nCISC(complex instruction set computer) 复杂指令集计算机\nclass 类\nClient/Server 客户机/服务器\nclock cycle clock rate 时钟周期时钟频率\ncoaxial cable 同轴电缆\ncohesion coupling 内聚耦合\ncoincidental logical procedural functional 偶然内聚逻辑内聚过程内聚功能内聚\ncombination 联合配合\ncommon 公用的共同的\ncommunication 通信\ncomplement number 补码\ncomponent 成分\nconcept 概念观念\ncondition 情况状况\nconform 符合\nconsist 组成存在\nconstrain 约束\ncontain 包含\ncorrespond (corresponding) 相符合(相应的一致的)\nCPETT 计算机性能评价工具与技术\nCPI 每条指令需要的周期数\nCSMA/CD 带冲突检测的载波监听多路访问\ncursor 游标\ncyclic redundency check 循环冗余检校\ndatabase: integrity consistency restory 完整性一致性可恢复性\ndatabase: security efficiency 数据库设计的目标: 安全性效率\ndeadlock: mutual exclusion 死锁条件: 互斥\ndeadlock: circular wait no preemption 死锁条件: 循环等待狗熊先权\ndecimal 十进位的\ndecision 决定判断\ndecomposition 双重的混合的\ndecrease 减少\ndefinition 定义\ndefinition phase 定义阶段\ndemonstrate 证明\ndesign phase 设计阶段\ndetermine 限定\ndevelopment phase 开发阶段\nDFS(depth first search) 深度优先搜索法\ndiagram 图表\nDifference Manchester 差分曼彻斯特\ndirected graph undirected graph 有向图无向图\ndistinguish 辩认区别\ndistributed system 分布式系统\ndivide division 分开除除法\ndivide union intersection difference 除并交差\ndocument 文件文档\nDQDB(distributed queue dual bus) 分布队列双总线\ndraw 绘制\ndual 二元的双的\ndynamic design process 动态定义过程\nelement 元素要素\nelevator (scan) algorithm 电梯算法又称扫描算法\nencapsulation inheritance 封装(压缩) 继承(遗传)\nencode 译成密码\nentity 实体\nentity integrity rule 实体完整性规则\nequal 相等的\nequation 方程式等式\nestimate 估计判断\nEthernet 以太网\nevolution 发展演化\nexceed 超过\nexchange sort 交换排序\nexclusive locks 排它锁(简记为X 锁)\nexecute 实现执行\nexhibit 表现展示陈列\nexistence 存在发生\nexpertise 专门技术\nexternal(internal) fragmentation 外(内)碎片\nfault page fault 中断过错页中断\nFDDI(fiber distributed data interface) 光纤分布式数据接口\nFDM(frequency division multiplexing 频分多路复用\nfiber optic cable 光缆\nFIFO replacement policy 先进先出替换算法\nfigure 数字图形\nfinal 最后的最终的\nfirst normal form 第一范式\nfloppy 活动盘片(软盘)\nforeign key domain tuple 外来键值域元组\nform 形状形式\nformula 公式表达式\nfoundation 基础根据基金\nframe page frame 帧结构页结构\nfrequency 频率\nFTP 文件传送服务\nfunction 函数\nfunctionally dependent 函数依赖\ngateway 网间连接器\ngather 聚集采集推测\ngeneral-purose registers 通用寄存器\ngenerate 产生\ngrade 等级标准\ngraph (graphic) 图\nGropher 将用户的请求自动转换成\nFTP\nguarantee 保证确定\nhash table hash function collision 哈希表哈希函数(散列函数) 碰撞\nHDLC 面向比特型数据链路层协议\nhit rate 命中率\nhost 主计算机\nhost language statement 主语言语句\nhypertext 超级文本\nillustrate 举例说明\nindependent 独立的\nindex 索引\nindirect 间接的\ninfluence 有影响的\ninitially 最初开头\ninsertion sort 插入排序\ninstruction format 指令格式\ninstruction set 指令集\ninterface 接口分界面连接体\ninternal 内部的内在的\ninterrupt 中断\nIPC 工业过程控制\nISAM VSAM 索引顺序存取方法虚拟存储存取方法\njoin natural join semijoin 连接自然连接半连接\njudgment 判断\nkernel executive supervisor user 核心执行管理用户\nkernels 核心程序\nkey comparison 键(码)值比较\nLAN(local area network) 局域网\nload 负载载入\nlogical functional 逻辑内聚功能内聚\nlongitudinal 水平的\nloop 圈环状\nmaintain 维护保养供给\nmaintanence phase 维护(保养)阶段\nMAN(metropclitan area network) 城域网\nManchester 曼彻斯特\nmap 地图映射图\nmatrix 矩阵点阵\nmemory reference 存储器参量\nmessage switching 报文交换\nmethod 方法技巧\nMFLOP(million floating point operate p s 每秒百万次浮点运算\nminimum 最小的\nMIPS(millions of instructions per second 每秒百万条指令\nmodule 单位基准\nmonitor (model benchmark physcal) method 监视(模型基准物理)法\nmultilevel data flow chart 分层数据流图\nmultiple 复合的多样的\nmultiple-term formula 多项式\nmultiplexing 多路复用技术\nmultiplication 乘法\nmutual exclusion 互相排斥\nnon-key attributes 非码属性\nnull 零空\nNyquist 奈奎斯特\nobject oriented 对象趋向的使适应的\nobject oriented analysis 面向对象的分析\nobject oriented databases 面向对象数据库\nobject oriented design 面向对象的设计\nobject oriented implementation 面向对象的实现\nobtain 获得\noccupy 占有居住于\noccurrence 事件\nodd 奇数的\none-dimensional array 一维数组\nOODB(object oriented data base) 面向对象数据库\nOOM(object oriented method) 面向对象的方法\noom: information object message class 信息对象消息类\noom: instance method message passing 实例方法消息传递\nopen system 开放系统\noperand 操作数\noptimized 尽量充分利用\noptional 任选的非强制的\norganize 组织\noverflow 溢出\noverlapping register windows 重叠寄存器窗口\npacket switching 报文分组交换\npage fault 页面失效\npage replacement algorithm 页替换算法\npaged segments 段页式管理\nPCB(process control block) 进程控制块\npeer entites 对等实体\nperform 表演执行\nperiod 时期周期\npermit 许可准许\nphase 阶段局面状态\nphysical data link network layer 物理层数据链路层网络层\npipeline 管道\nplatter track cluster 面磁道簇\npredicate 谓语\npreemption 有优先权的\nprefix (Polish form) 前缀(波兰表达式)\npreorder inorder postorder 前序中序后序\npresentation application layer 表示层应用层\nprimary key attributes 主码属性\nprinciple 原则方法\nprocedural coincidental 过程内聚偶然内聚\nprocess 过程加工处理\nproficient 精通\nprogram debugging 程序排错\nprojection selection join 投影选择连接\nproposition 主张建议陈述\nprotocal 协议\nprototype 原型样板\nprototyping method (model) 原型化周期(模型)\npseudo-code 伪码(又称程序设计语言PDL)\npunctuation 标点\npurpose 目的意图\nquality 质量品质\nqueue 队列\nready blocked running 就绪阻塞(等待) 运行\nreal page number 实页数\nreal programs 实程序\nredirected 重定向\nredundency 冗余\nreference integrity rule 引用完整性规则\nreferred to as 把.....当作\nregarde 关于\nregister(registry) 寄存器登记注册挂号\nregularly 定期的常规的\nrelation 关系\nrelay 中继\nreliability 可信赖的\nrepeater 中继器\nreplacement 替换\nrepresent 代表象征\nrequest indication response confirm 请求指示响应确认\nresource 资源\nrespon 回答响应\nRISC(reduced instruction set computer) 精简指令集计算机\nrobustness 健壮性\nrouter 路由器\nscheme 计划图表\nsector head cylinder 扇区磁头柱面\nselection sort 选择排序\nsemaphores 信号\nsequence 序列顺序\nShanon 香农\nshare locks 共享锁(简记为S 锁)\nshort path critical path 最短路径关键路径\nsignal 信号\nsignal-to-noise ratio 信噪比B/N\nsimilar 相似的\nSISD SIMD MISD MIMD * 指令流* 数据流\nSMDS 交换多兆位数据服务\nsoftware development phase 软件开发阶段\nsoftware engineering 软件工程\nsoftware portability 软件可移植性\nsoftware requirements specification 软件需求说明书\nsolve 解决\nsort 种类方式分类排序\nspanning tree 跨越树(生成树)\nspecify 指定说明\nspeedup 加速比\nSSTF(shortest-seek-time-first) 最短寻道时间优先(磁盘调度算法)\nstack strategy non-stack strategy 堆栈型非堆栈型\nstarvation 饥饿匮乏\nstatement 陈述\nstorage 贮藏库\nstore procdures 存储过程\nstrategy 战略兵法计划\nstrict 严密的\nstyles 文体风格\nsubgroup 循环的\nsubset 子集子设备\nsuperclass subclass abstract class 超类子类抽象类\nsuppose 假定\nsymbolic 象征的符号的\nsynthetic benchmark 复合基准程序\nsystem testing 系统测试\nSystolic 脉动阵列\ntable 表表格桌子\nTDM(time division multiplexing) 时分多路复用\ntechnology 工艺技术\nterminal 终端\ntesting phase 测试阶段\ntheta select project theta join θ选择投影θ连接\ntime complexity 时间复杂度\ntimestamping 时标技术\nToken Bus 令牌总线\nToken Ring 令牌环\ntoy benchmark 简单基准程序\ntransaction 事务记录\ntransmite 传送\ntransport layer session layer 传输层会话层\ntraversal method 遍历方法\ntriggers store procedures 触发器存储过程\n(ORACLE 系统)\nunderflow 下溢\nunique 唯一的\nunit system acceptance testing 单元测试系统测试确认测试\nuniverse 宇宙全世界\nupdate 更新\nvalue [数]值\nvariable 变量\nvertical 垂直的\nvertice edge 顶点(结点) 边\nvia 经过\nvirtual memory system 虚拟存储系统\nWAN(wide area network) 广域网\nwaterfall model 瀑布模型\nwhite noise 白噪声\nwrite-back(copy-back) 写回法\nwrite-through(store-through) 写直达法\nWWW(world wide web) 万维网\n\n## （IT）词汇\n\n### A\nActive-matrix主动距陈\nAdapter cards适配卡\nAdvanced application高级应用\nAnalytical graph分析图表\nAnalyze分析\nAnimations动画\nApplication software 应用软件\nArithmetic operations算术运算\nAudio-output device音频输出设备\nAccess time存取时间\naccess存取\naccuracy准确性\nad network cookies广告网络信息记录软件\nAdd-ons附软件\nAddress地址\nAgents代理\nAnalog signals模拟信号\nApplets程序\nAsynchronous communications port异步通信端口\nAttachment附件\n\n### B\nBar code条形码\nBar code reader条形码读卡器\nBasic application基础程序\nBinary coding schemes二进制译码方案\nBinary system二进制系统\nBit比特\nBrowser浏览器\nBus line总线\nBackup tape cartridge units备份磁带盒单元\nBandwidth带宽\nBluetooth蓝牙\nBroadband宽带\nBrowser浏览器\nBusiness-to-business企业对企业电子商务\nBusiness-to-consumer企业对消费者\nBus总线\n\n### C\nCables连线\nCell单元箱\nChain printer链式打印机\nCharacter and recognition device字符标识识别设备\nChart图表\nChassis支架\nChip芯片\nClarity清晰度\nClosed architecture封闭式体系结构\nColumn列\nCombination key结合键\ncomputer competency计算机能力\nconnectivity连接，结点\nContinuous-speech recognition system连续语言识别系统\nControl unit操纵单元\nCordless or wireless mouse无线鼠标\nCable modems有线调制解调器\ncarpal tunnel syndrome腕骨神经综合症\nCD-ROM可记录光盘\nCD-RW可重写光盘\nCD-R可记录压缩光盘\nChannel信道\nChat group谈话群组\nchlorofluorocarbons(CFCs) ]氯氟甲烷\nClient客户端\nCoaxial cable同轴电缆\ncold site冷战\nCommerce servers商业服务器\nCommunication channel信道\nCommunication systems信息系统\nCompact disc rewritable\nCompact disc光盘\ncomputer abuse amendments act of 19941994计算机滥用法案\ncomputer crime计算机犯罪\ncomputer ethics计算机道德\ncomputer fraud and abuse act of 1986计算机欺诈和滥用法案\ncomputer matching and privacy protection act of 1988计算机查找和隐私保护法案\nComputer network计算机网络\ncomputer support specialist计算机支持专家\ncomputer technician计算机技术人员\ncomputer trainer计算机教师\nConnection device连接设备\nConnectivity连接\nConsumer-to-consumer个人对个人\ncookies-cutter programs信息记录截取程序\ncookies信息记录程序 \ncracker解密高手\ncumulative trauma disorder积累性损伤错乱\nCybercash电子现金\nCyberspace计算机空间\ncynic愤世嫉俗者\n\n### D\nDatabase数据库\ndatabase files数据库文件\nDatabase manager数据库管理\nData bus数据总线\nData projector数码放映机\nDesktop system unit台式电脑系统单元\nDestination file目标文件\nDigital cameras数码照相机\nDigital notebooks数字笔记本\nDigital bideo camera数码摄影机\nDiscrete-speech recognition system不连续语言识别系统\nDocument文档\ndocument files文档文件\nDot-matrix printer点矩阵式打印机\nDual-scan monitor双向扫描显示器\nDumb terminal非智能终端\ndata security数据安全\nData transmission specifications数据传输说明\ndatabase administrator数据库管理员\nDataplay数字播放器\nDemodulation解调\ndenial of service attack拒绝服务攻击\nDial-up service拨号服务\nDigital cash数字现金\nDigital signals数字信号\nDigital subscriber line数字用户线路\nDigital versatile disc数字化通用磁盘\nDigital video disc数字化视频光盘\nDirect access直接存取\nDirectory search目录搜索\ndisaster recovery plan灾难恢复计划\nDisk caching磁盘驱动器高速缓存\nDiskette磁盘\nDisk磁碟 \nDistributed data processing system分部数据处理系统\nDistributed processing分布处理\nDomain code域代码\nDownloading下载\nDVD 数字化通用磁盘\nDVD-R 可写DVD\nDVD-RAM DVD随机存取器\nDVD-ROM 只读DVD\n\n### E\ne-book电子阅读\nExpansion cards扩展卡\nend user终端用户\ne-cash电子现金\ne-commerce电子商务\nelectronic cash电子现金\nelectronic commerce电子商务\nelectronic communications privacy act of1986电子通信隐私法案\nencrypting加密术\nenergy star能源之星\nEnterprise computing企业计算化\nenvironment环境\nErasable optical disks可擦除式光盘\nergonomics人类工程学\nethics道德规范\nExternal modem外置调制解调器\nextranet企业外部网\n\n### F\nFax machine传真机\nField域\nFind搜索\nFireWire port port火线端口\nFirmware固件\nFlash RAM闪存\nFlatbed scanner台式扫描器\nFlat-panel monitor纯平显示器 \nfloppy disk软盘\nFormatting toolbar格式化工具条\nFormula公式\nFunction函数\nfair credit reporting act of 1970公平信用报告法案\nFiber-optic cable光纤电缆\nFile compression文件压缩\nFile decompression文件解压缩\nfilter过滤\nfirewall防火墙\nfirewall防火墙\nFixed disk固定硬盘\nFlash memory闪存\nFlexible disk可折叠磁盘\nFloppies磁盘\nFloppy disk软盘\nFloppy-disk cartridge磁盘盒\nFormatting格式化\nfreedom of information act of 1970信息自由法案\nfrustrated受挫折\nFull-duplex communication全双通通信\n\n### G\nGeneral-purpose application通用运用程序\nGigahertz千兆赫\nGraphic tablet绘图板\ngreen pc绿色个人计算机\n\n### H\nhandheld computer手提电脑\nHard copy硬拷贝\nhard disk硬盘\nhardware硬件\nHelp帮助\nHost computer主机\nHome page主页\nHyperlink超链接\nhacker黑客\nHalf-duplex communication半双通通信 \nHard disk硬盘\nHard-disk cartridge硬盘盒\nHard-disk pack硬盘组\nHead crash磁头碰撞\nheader标题\nhelp desk specialist帮助办公专家\nhelper applications帮助软件\nHierarchical network层次型网络\nhistory file历史文件\nhits匹配记录\nhorizontal portal横向用户\nhot site热战\nHybrid network混合网络\nhyperlinks超连接\n\n### I\nImage capturing device图像获取设备\ninformation technology信息技术\nInk-jet printer墨水喷射印刷机\nIntegrated package综合性组件\nIntelligent terminal智能终端设备\nIntergrated circuit集成电路\nInterface cards接口卡\nInternal modem内部调制解调器\ninternet telephony网络电话\ninternet terminal互联网终端\nIdentification识别\ni-drive网络硬盘驱动器\nillusion of anonymity匿名幻想\nindex search索引搜索\ninformation pushers信息推送器\ninitializing 初始化\ninstant messaging计时信息\ninternal hard disk内置硬盘\nInternal modem内部调制解调器\nInternet hard drive 网络硬盘驱动器\nintranet企业内部网\n\n### J\njoystick操纵杆\n\n### K\nkeyword search关键字搜索\n\n### L\nlaser printer激光打印机\nLayout files版式文件\nLight pen光笔 \nLocate定位\nLogical operations逻辑运算\nLands凸面\nLine of sight communication视影通信\nLow bandwidth低带宽\nlurking潜伏\n\n### M\nMain board主板\nMark sensing标志检测\nMechanical mouse机械鼠标\nMemory内存\nMenu菜单\nMenu bar菜单条\nMicroprocessor微处理器\nMicroseconds微秒\nModem card调制解调器\nMonitor显示器\nMotherboard主板\nMouse 鼠标\nMultifunctional device多功能设备\nMagnetic tape reels磁带卷\nMagnetic tape streamers磁带条\nmailing list邮件列表\nMedium band媒质带宽\nmetasearch engine整合搜索引擎\nMicrowave微波\nModem解调器\nModulation解调\n\n### N\nNet PC网络计算机\nNetwork adapter card网卡\nNetwork personal computer网络个人电脑\nNetwork terminal 网络终端\nNotebook computer笔记本电脑\nNotebook system unit笔记本系统单元\nNumeric entry数字输入\nna?ve天真的人\nnational information infrastructure protection act of1996国际信息保护法案\nnational service provider全国性服务供应商\nNetwork architecture网络体系结构\nNetwork bridge网桥\nNetwork gateway网关\nnetwork manager网络管理员\nnewsgroup新闻组\nno electronic theft act of1997无电子盗窃法\nNode节点\nNonvolatile storage非易失性存储\n\n### O\nObject embedding对象嵌入\nObject linking目标链接\nOpen architecture开放式体系结构\nOptical disk光盘\nOptical mouse光电鼠标\nOptical scanner光电扫描仪\nOutline大纲\noff-line browsers离线浏览器\nOnline storage联机存储\n\n### P\npalmtop computer掌上电脑\nParallel ports并行端口\nPassive-matrix被动矩阵\nPC card个人计算机卡\nPersonal laser printer个人激光打印机\nPersonal video recorder card个人视频记录卡\nPhoto printer照片打印机\nPixel像素\nPlatform scanner平版式扫描仪\nPlotter绘图仪\nPlug and play即插即用\nPlug-in boards插件卡\nPointer指示器\nPointing stick指示棍\nPort端口\nPortable scanner便携式扫描仪\nPresentation files演示文稿\nPresentation graphics电子文稿程序\nPrimary storage主存\nProcedures规程\nProcessor处理机\nProgramming control lanugage程序控制语言\nPackets数据包\nParallel data transmission平行数据传输\nPeer-to-peer network system得等网络系统\nperson-person auction site个人对个人拍卖站点\nphysical security物理安全\nPits凹面\nplug-in插件程序\nPolling轮询\nprivacy隐私权\nproactive主动地\nprogrammer程序员\nProtocols协议\nprovider供应商\nproxy server代理服务\npull products推取程序\npush products推送程序\n\n### R\nRAM cache随机高速缓冲器\nRange范围\nRecord记录\nRelational database关系数据库\nReplace替换\nResolution分辨率\nRow行\nRead-only只读\nReformatting重组\nregional service provider区域性服务供应商\nrepetitive motion injury反复性动作损伤\nreverse directory反向目录\nright to financial privacy act of 1979财产隐私法案\n\n### S\nScanner扫描器\nSearch查找\nSecondary storage device助存储设备\nSemiconductor半导体\nSerial ports串行端口\nServer服务器\nShared laser printer共享激光打印机\nSheet表格\nSilicon chip硅片\nSlots插槽\nSmart card智能卡\nSoft copy软拷贝\nSoftware suite软件协议\nSorting排序分类\nSource file源文件\nSpecial-purpose application专用文件\nSpreadsheet电子数据表\nStandard toolbar标准工具栏\nSupercomputer巨型机\nSystem cabine 系统箱\nSystem clock时钟\nSystem software系统软件\nSatellite/air connection services卫星无线连接服务\nsearch engines搜索引擎\nsearch providers搜索供应者\nsearch services 搜索服务器\nSectors扇区\nsecurity安全\nSending and receiving devices发送接收设备\nSequential access顺序存取\nSerial data transmission单向通信\nsignature line签名档\nsnoopware监控软件\nsoftware copyright act of1980软件版权法案\nsoftware piracy软件盗版\nSolid-state storage固态存储器\nspecialized search engine专用搜索引擎\nspiders网页爬虫\nspike尖峰电压\nStar network星型网\nStrategy方案\nsubject主题\nsubscription address预定地址\nSuperdisk超级磁盘\nsurfing网上冲浪\nsurge protector浪涌保护器\nsystems analyst系统分析师\n\n### T\nTable二维表\nTelephony电话学\nTelevision boards电视扩展卡\nTerminal 终端\nTemplate模板\nText entry文本输入\nThermal printer 热印刷\nThin client瘦客\nToggle key触发键\nToolbar工具栏\nTouch screen触摸屏\nTrackball追踪球\nTV tuner card电视调谐卡\nTwo-state system双状态系统\ntechnical writer技术协作者\ntechnostress重压技术\ntelnet远程登录\nTime-sharing system分时系统\nTopology拓扑结构\nTracks磁道\ntraditional cookies传统的信息记录程序\nTwisted pair双绞线\n\n### U\nUnicode统一字符标准\nuploading上传\nusenet世界性新闻组网络\n\n### V\nVirtual memory虚拟内存\nVideo display screen视频显示屏\nVoice recognition system声音识别系统\nvertical portal纵向门户\nvideo privacy protection act of 1988视频隐私权保护法案\nvirus checker病毒检测程序\nvirus病毒\nVoiceband音频带宽\nVolatile storage易失性存储\nvoltage surge冲击性电压\n\n### W\nWand reader 条形码读入\nWeb 网络\nWeb appliance 环球网设备\nWeb page网页\nWeb site address网络地址\nWeb terminal环球网终端\nWebcam摄像头\nWhat-if analysis假定分析\nWireless revolution无线革命\nWord字长\nWord processing文字处理\nWord wrap自动换行\nWorksheet file 工作表文件\nweb auctions网上拍卖\nweb broadcasters网络广播\nweb portals门户网站\nweb sites网站\nweb storefront creation packages网上商店创建包\nweb storefronts网上商店\nweb utilities网上应用程序\nweb-downloading utilities网页下载应用程序\nwebmaster web站点管理员\nweb万维网\nWireless modems无线调制解调器\nwireless service provider无线服务供应商\nworld wide web万维网\nworm蠕虫病毒\nWrite-protect notch写保护口\n\n## 其他缩写\nDVD digital bersatile 数字化通用光盘\nIT ingormation technology信息技术 \nCD compact disc 压缩盘\nPDA personal digital assistant个人数字助理\nRAM random access memory随机存储器\nWWW World Wide Web 万维网\nDBMS database management system数据库管理系统\nHTML Hypertext Markup Language超文本标示语言\nOLE object linking and embedding对象链接潜入\nSQL structured query language结构化查询语言\nURL uniform resouice locator统一资源定位器\nAGP accelerated graphics port加速图形接口\nALU arithmetic-logic unit算术逻辑单元\nCPU central processing unit中央处理器\nCMOS complementary metal-oxide semiconductor互补金属氧化物半导体\nCISC complex instruction set computer复杂指令集计算机\nHPSB high performance serial bus高性能串行总线\nISA industry standard architecture工业标准结构体系\nPCI peripheral component interconnect外部设备互连总线\nPCMCIA Personal Memory Card International Association个人计算机存储卡国际协会\nRAM random-access memory随机存储器\nROM read-only memory只读存储器\nUSB universal serial bus通用串行总线\nCRT cathode-ray tube阴极射线管\nHDTV high-definition television高清晰度电视\nLCD liquid crystal display monitor液晶显示器\nMICRmagnetic-ink character recognition磁墨水字符识别器\nOCR optical-character recognition光电字符识别器\nOMR optical-mark recognition光标阅读器\nTFT thin film transistor monitor薄膜晶体管显示器\n\n## 其他\nZip disk压缩磁盘\nDomain name system（DNS）域名服务器\nfile transfer protocol(FTP)文件传送协议\nhypertext markup language(HTML)超文本链接标识语言\nLocal area network（LAN）局域网\ninternet relay chat(IRC)互联网多线交谈\nMetropolitan area network(MAN)城域网\nNetwork operation system(NOS)网络操作系统\nuniform resource locator(URL)统一资源定位器\nWide area network(WAN)广域网\n","source":"_posts/Computer-English.md","raw":"---\ntitle: Computer-English\ndate: 2017-06-29 11:59:47\ntags: {computer,english}\n---\n# 计算机英语词汇\n## 第一部分、计算机算法常用术语中英对照\nData Structures 基本数据结构 \nDictionaries 字典 \nPriority Queues 堆 \nGraph Data Structures 图 \nSet Data Structures 集合 \nKd-Trees 线段树 \nNumerical Problems 数值问题 \nSolving Linear Equations 线性方程组 \nBandwidth Reduction 带宽压缩 \nMatrix Multiplication 矩阵乘法 \nDeterminants and Permanents 行列式 \nConstrained and Unconstrained Optimization 最值问题 \nLinear Programming 线性规划 \nRandom Number Generation 随机数生成 \nFactoring and Primality Testing 因子分解/质数判定 \nArbitrary Precision Arithmetic 高精度计算 \nKnapsack Problem 背包问题 \nDiscrete Fourier Transform 离散Fourier变换 \nCombinatorial Problems 组合问题 \nSorting 排序 \nSearching 查找 \nMedian and Selection 中位数 \nGenerating Permutations 排列生成 \nGenerating Subsets 子集生成 \nGenerating Partitions 划分生成 \nGenerating Graphs 图的生成 \nCalendrical Calculations 日期 \nJob Scheduling 工程安排 \nSatisfiability 可满足性 \nGraph Problems -- polynomial 图论-多项式算法 \nConnected Components 连通分支 \nTopological Sorting 拓扑排序 \nMinimum Spanning Tree 最小生成树 \nShortest Path 最短路径 \nTransitive Closure and Reduction 传递闭包 \nMatching 匹配 \nEulerian Cycle / Chinese Postman Euler回路/中国邮路 \nEdge and Vertex Connectivity 割边/割点 \nNetwork Flow 网络流 \nDrawing Graphs Nicely 图的描绘 \nDrawing Trees 树的描绘 \nPlanarity Detection and Embedding 平面性检测和嵌入 \nGraph Problems -- hard 图论-NP问题 \nClique 最大团 \nIndependent Set 独立集 \nVertex Cover 点覆盖 \nTraveling Salesman Problem 旅行商问题 \nHamiltonian Cycle Hamilton回路 \nGraph Partition 图的划分 \nVertex Coloring 点染色 \nEdge Coloring 边染色 \nGraph Isomorphism 同构 \nSteiner Tree Steiner树 \nFeedback Edge/Vertex Set 最大无环子图 \nComputational Geometry 计算几何 \nConvex Hull 凸包 \nTriangulation 三角剖分 \nVoronoi Diagrams Voronoi图 \nNearest Neighbor Search 最近点对查询 \nRange Search 范围查询 \nPoint Location 位置查询 \nIntersection Detection 碰撞测试 \nBin Packing 装箱问题 \nMedial-Axis Transformation 中轴变换 \nPolygon Partitioning 多边形分割 \nSimplifying Polygons 多边形化简 \nShape Similarity 相似多边形 \nMotion Planning 运动规划 \nMaintaining Line Arrangements 平面分割 \nMinkowski Sum Minkowski和 \nSet and String Problems 集合与串的问题 \nSet Cover 集合覆盖 \nSet Packing 集合配置 \nString Matching 模式匹配 \nApproximate String Matching 模糊匹配 \nText Compression 压缩 \nCryptography 密码 \nFinite State Machine Minimization 有穷自动机简化 \nLongest Common Substring 最长公共子串 \nShortest Common Superstring 最短公共父串 \nDP——Dynamic Programming——动态规划 \nrecursion —— 递归 \n\n## 第二部分、编程词汇 \nA2A integration A2A整合 \nabstract 抽象的 \nabstract base class (ABC)抽象基类 \nabstract class 抽象类 \nabstraction 抽象、抽象物、抽象性 \naccess 存取、访问 \naccess level访问级别 \naccess function 访问函数 \naccount 账户 \naction 动作 \nactivate 激活 \nactive 活动的 \nactual parameter 实参 \nadapter 适配器 \nadd-in 插件 \naddress 地址 \naddress space 地址空间 \naddress-of operator 取地址操作符 \nADL (argument-dependent lookup) \nADO(ActiveX Data Object)ActiveX数据对象 \nadvanced\naggregation 聚合、聚集 \nalgorithm 算法 \nalias 别名 \nalign 排列、对齐 \nallocate 分配、配置 \nallocator分配器、配置器 \nangle bracket 尖括号 \nannotation 注解、评注 \nAPI (Application Programming Interface) 应用(程序)编程接口 \napp domain (application domain)应用域 \napplication 应用、应用程序 \napplication framework 应用程序框架 \nappearance 外观 \nappend 附加 \narchitecture 架构、体系结构 \narchive file 归档文件、存档文件 \nargument引数(传给函式的值)。参见parameter \narray 数组 \narrow operator 箭头操作符 \nASP(Active Server Page)活动服务器页面 \nASP.NET worker process ASP.NET工作者进程 \nassembly 装配件、配件 \nassembly language 汇编语言 \nassembly manifest 装配件清单 \nassert(ion) 断言 \nassign 赋值 \nassignment 赋值、分配 \nassignment operator 赋值操作符 \nassociated 相关的、相关联的 \nassociative container 关联式容器(对应sequential container) \nasynchronous 异步的 \natomic 原子的 \natomic operation 原子操作 \nattribute 特性、属性 \nauthentication service 验证服务 \nauthorization 授权 \naudio 音频 \nA.I. 人工智能 \nB2B integration B2B整合、B2B集成(business-to-business integration) \nbackground 背景、后台(进程) \nbackward compatible 向后兼容、向下兼容 \nbackup 备份 \nbackup device备份设备 \nbackup file 备份文件 \nbandwidth 带宽 \nbase class 基类 \nbase type 基类型 \nbatch 批处理 \nBCL (base class library)基类库 \nbinary 二进制 \nbinary search 二分查找 \nbinary tree 二叉树 \nbinary function 双参函数 \nbinary large object二进制大对象 \nbinary operator 二元操作符 \nbinding 绑定 \nbit 位 \nbitmap 位图 \nbitwise 按位... \nbitwise copy 为单元进行复制；位元逐一复制,按位拷 \nbitwise operation 按位运算 \nblock 块、区块、语句块 \nbookkeeping 簿记 \nboolean 布林值(真假值，true或false) \nborder 边框 \nbounds checking 边界检查 \nboxing 装箱、装箱转换 \nbrace (curly brace) 大括号、花括号 \nbracket (square brakcet) 中括号、方括号 \n\nbreakpoint 断点 \nbrowser applications 浏览器应用(程序) \nbrowser-accessible application 可经由浏览器访问的应用程序 \nbuild 编连(专指编译和连接 \nbuilt-in 内建、内置 \nbus 总线 \nbusiness 业务、商务(看场合) \nbusiness Logic 业务逻辑 \nbusiness rules 业务规则 \nbuttons 按钮 \nbug 臭虫 \nby/through 通过 \nbyte 位元组(由8 bits组成) \ncache 高速缓存 \ncalendar 日历 \ncall 调用 \ncallback 回调 \ncall-level interface (CLI)调用级接口(CLI) \ncall operator 调用操作符 \ncandidate key 候选键 (for database) \ncascading delete 级联删除 (for database) \ncascading update 级联更新 (for database) \ncasting 转型、造型转换 \ncatalog 目录 \nchain 链(function calls) \ncharacter 字符 \ncharacter format 字符格式 \ncharacter set 字符集 \nCHECK constraints CHECK约束 (for database) \ncheckpoint 检查点 (for database) \ncheck box 复选框 \ncheck button 复选按钮 \nchild class 子类 \nCIL (common intermediate language)通用中间语言、通用中介语言 \nclass 类 \nclass declaration 类声明 \nclass definition 类定义 \nclass derivation list 类继承列表 \nclass factory 类厂 \nclass hierarchy 类层次结构 \nclass library 类库 \nclass loader 类装载器 \nclass template 类模板 \nclass template partial specializations 类模板部分特化 \nclass template specializations 类模板特化 \nclassification 分类 \nclause 子句 \nclient application 客户端应用程序 \nclient cursor 客户端游标 (for database) \ncode page 代码页 \ncleanup 清理、清除 \nCLI (Common Language Infrastructure) 通用语言基础设施 \nclient 客户、客户端 \nclient area 客户区 \nclient-server 客户机/服务器、客户端/服务器 \nclipboard 剪贴板 \nclone 克隆 \nCLS (common language specification) 通用语言规范 \ncode access security 代码访问安全 \nCOFF (Common Object File Format) 通用对象文件格式 \ncollection 集合 \nCOM (Component Object Model) 组件对象模型 \ncombo box 组合框 \ncommand line 命令行 \ncomment 注释 \ncommit 提交 (for database) \ncommunication 通讯 \ncompatible 兼容 \ncompile time 编译期、编译时 \ncompiler 编译器 \ncomponent组件 \ncomposite index 复合索引、组合索引 (for database) \ncomposite key 复合键、组合键 (for database) \ncomposition 复合、组合 \nconcept 概念 \nconcrete具体的 \nconcrete class 具体类 \nconcurrency 并发、并发机制 \nconstraint 约束 (for database) \nconfiguration 配置、组态 \nconnection 连接 (for database) \nconnection pooling 连接池 \nconsole 控制台 \nconstant 常量 \nconstruct 构件、成分、概念、构造（for language） \nconstructor (ctor) 构造函数、构造器 \ncontainer 容器 \ncontainment包容 \ncontext 环境、上下文 \ncontrol 控件 \ncookie (不译) \ncopy 拷贝 \nCORBA 通用对象请求中介架构(Common Object Request Broker Architecture) \ncover 覆盖、涵盖 \ncreate/creation 创建、生成 \ncrosstab query 交叉表查询 (for database) \nCRTP (curiously recurring template pattern) \nCTS (common type system)通用类型系统 \ncube 多维数据集 (for database) \ncursor 光标 \ncursor 游标 (for database) \ncustom 定制、自定义 \ndata 数据 \ndata connection 数据连接 (for database) \nData Control Language (DCL) 数据控制语言(DCL) (for database) \nData Definition Language (DDL) 数据定义语言(DDL) (for database) \ndata dictionary 数据字典 (for database) \ndata dictionary view 数据字典视图 (for database) \ndata file 数据文件 (for database) \ndata integrity 数据完整性 (for database) \ndata manipulation language (DML)数据操作语言(DML) (for database) \ndata mart 数据集市 (for database) \ndata pump 数据抽取 (for database) \ndata scrubbing 数据清理 (for database) \ndata source 数据源 (for database) \nData source name (DSN) 数据源名称(DSN) (for database) \ndata warehouse 数据仓库 (for database) \ndataset 数据集 (for database) \ndatabase 数据库 (for database) \ndatabase catalog 数据库目录 (for database) \ndatabase diagram 数据关系图 (for database) \ndatabase file 数据库文件 (for database) \ndatabase object 数据库对象 (for database) \ndatabase owner 数据库所有者 (for database) \ndatabase project 数据库工程 (for database) \ndatabase role 数据库角色 (for database) \ndatabase schema 数据库模式、数据库架构 (for database) \ndatabase scrīpt 数据库脚本 (for database) \ndata-bound 数据绑定 (for database) \ndata-aware control数据感知控件 (for database) \ndata member 数据成员、成员变量 \ndataset 数据集 (for database) \ndata source 数据源 (for database) \ndata structure数据结构 \ndata table 数据表 (for database) \ndatagram 数据报文 \nDBMS (database management system)数据库管理系统 (for database) \nDCOM (distributed COM)分布式COM \ndead lock 死锁 (for database) \ndeallocate 归还 \ndebug 调试 \ndebugger 调试器 \ndecay 退化 \ndecision support 决策支持 \ndeclaration 声明 \ndeclarative referential integrity (DRI)声明引用完整性(DRI) (for database) \ndeduction 推导 \nDEFAULT constraint默认约束 (for database) \ndefault database 默认数据库 (for database) \ndefault instance 默认实例 (for database) \ndefault result set 默认结果集 (for database) \ndefault 缺省、默认值 \ndefer 推迟 \ndefinition 定义 \ndelegate 委托 \ndelegation 委托 \ndependent name \ndeploy 部署 \ndereference 解引用 \ndereference operator (提领)运算子 \nderived class 派生类 \ndesign by contract 契约式设计 \ndesign pattern 设计模式 \ndestroy 销毁 \ndestructor(dtor)析构函数、析构器 \ndevice 设备 \nDHTML (dynamic HyperText Markup Language)动态超文本标记语言 \ndialog 对话框 \ndigest 摘要 \ndigital 数字的 \nDIME (Direct Internet Message Encapsulation)直接Internet消息封装 \ndirective (编译)指示符 \ndirectory 目录 \ndirty pages脏页 (for database) \ndirty read 脏读 (for database) \ndisassembler 反汇编器 \nDISCO (Discovery of Web Services)Web Services的查找 \ndisk 盘 \ndispatch 调度、分派、派发（我喜欢“调度”） \nDISPID (Dispatch Identifier)分派标识符 \ndistributed computing 分布式计算 \ndistributed query 分布式查询 (for database) \nDNA (Distributed interNet Application) 分布式网间应用程序 \ndocument 文档 \nDOM (Document Object Model)文档对象模型 \ndot operator (圆)点操作符 \ndriver 驱动(程序) \nDTD (document type definition) 文档类型定义 \ndouble-byte character set (DBCS)双字节字符集(DBCS) \ndump 转储 \ndump file 转储文件 \ndynamic cursor 动态游标 (for database) \ndynamic filter 动态筛选 (for database) \ndynamic locking 动态锁定 (for database) \ndynamic recovery 动态恢复 (for database) \ndynamic snapshot 动态快照 (for database) \ndynamic SQL statements 动态SQL语句 (for database) \ndynamic assembly 动态装配件、动态配件 \ndynamic binding 动态绑定 \nEAI (enterprise application integration)企业应用程序集成(整合) \nEBCO (empty base class optimization) 空基类优化（机制） \ne-business 电子商务 \nEDI (Dlectronic Data Interchange)电子数据交换 \nefficiency 效率 \nefficient 高效 \nend-to-end authentication 端对端身份验证 \nend user 最终用户 \nengine 引擎 \nentity 实体 \nencapsulation 封装 \nenclosing class 外围类别(与巢状类别 nested class有关) \nenum (enumeration) 枚举 \nenumerators 枚举成员、枚举器 \nequal 相等 \nequality 相等性 \nequality operator 等号操作符 \nerror log 错误日志 (for database) \nescape code 转义码 \nescape character 转义符、转义字符 \nexclusive lock 排它锁 (for database) \nexplicit transaction 显式事务 (for database) \nevaluate 评估 \nevent 事件 \nevent driven 事件驱动的 \nevent handler 事件处理器 \nevidence 证据 \nexception 异常 \nexception declaration 异常声明 \nexception handling 异常处理、异常处理机制 \nexception-safe 异常安全的 \nexception specification 异常规范 \nexit 退出 \nexplicit 显式 \nexplicit specialization 显式特化 \nexport 导出 \nexpression 表达式 \nfacility 设施、设备 \nfat client 胖客户端 \nfeature 特性、特征 \nfetch 提取 \nfield 字段(java) \nfield 字段 (for database) \nfield length 字段长度 (for database) \nfile 文件 \nfilter 筛选 (for database) \nfinalization 终结 \nfirewall 防火墙 \nfinalizer 终结器 \nfirmware 固件 \nflag 标记 \nflash memory 闪存 \nflush 刷新 \nfont 字体 \nforeign key (FK) 外键(FK) (for database) \nform 窗体 \nformal parameter 形参 \nforward declaration 前置声明 \nforward-only 只向前的 \nforward-only cursor 只向前游标 (for database) \nfragmentation 碎片 (for database) \nframework 框架 \nfull specialization 完全特化 \nfunction 函数 \nfunction call operator (即operator ()) 函数调用操作符 \nfunction object 函数对象 \nfunction overloaded resolution函数重载决议 \nfunctionality 功能 \nfunction template函数模板 \nfunctor 仿函数 \nGAC (global assembly cache) 全局装配件缓存、全局配件缓存 \nGC (Garbage collection) 垃圾回收(机制)、垃圾收集(机制) \ngame 游戏 \ngenerate 生成 \ngeneric 泛化的、一般化的、通用的 \ngeneric algorithm通用算法 \ngenericity 泛型 \ngetter (相对于 setter)取值函数 \nglobal 全局的 \nglobal object 全局对象 \nglobal scope resolution operator 全局范围解析操作符 \ngrant 授权 (for database) \ngranularity 粒度 \ngroup 组、群 \ngroup box 分组框 \nGUI 图形界面 \nGUID (Globally Unique Identifier) 全球唯一标识符 \nhand shaking 握手 \nhandle 句柄 \nhandler 处理器 \nhard-coded 硬编码的 \nhard-copy 截屏图 \nhard disk 硬盘 \nhardware 硬件 \nhash table 散列表、哈希表 \nheader file头文件 \nheap 堆 \nhelp file 帮助文件 \nhierarchy 层次结构、继承体系 \nhierarchical data 阶层式数据、层次式数据 \nhook 钩子 \nHost (application)宿主(应用程序) \nhot key 热键 \nhyperlink 超链接 \nHTML (HyperText Markup Language) 超文本标记语言 \nHTTP pipeline HTTP管道 \nHTTP (HyperText Transfer Protocol) 超文本传输协议 \nicon 图标 \nIDE (Integrated Development Environment)集成开发环境 \nIDL (Interface Definition Language) 接口定义语言 \nidentifier 标识符 \nidle time 空闲时间 \nif and only if当且仅当 \nIL (Intermediate Language) 中间语言、中介语言 \nimage 图象 \nIME 输入法 \nimmediate base 直接基类 \nimmediate derived 直接派生类 \nimmediate updating 即时更新 (for database) \nimplicit transaction隐式事务 (for database) \nincremental update 增量更新 (for database) \nindex 索引 (for database) \nimplement 实现 \nimplementation 实现、实现品 \nimplicit 隐式 \nimport 导入 \nincrement operator 增加操作符 \ninfinite loop 无限循环 \ninfinite recursive 无限递归 \ninformation 信息 \ninfrastructure 基础设施 \ninheritance 继承、继承机制 \ninline 内联 \ninline expansion 内联展开 \ninitialization 初始化 \ninitialization list 初始化列表、初始值列表 \ninitialize 初始化 \ninner join 内联接 (for database) \nin-place active 现场激活 \ninstance 实例 \ninstantiated 具现化、实体化(常应用于template) \ninstantiation 具现体、具现化实体(常应用于template) \nintegrate 集成、整合 \nintegrity 完整性、一致性 \nintegrity constraint完整性约束 (for database) \ninterprocess communication (IPC)进程间通讯(IPC) \ninteracts 交互 \ninterface 接口 \nfor GUI 界面 \ninteroperability 互操作性、互操作能力 \ninterpreter 解释器 \nintrospection 自省 \ninvariants 不变性 \ninvoke 调用 \nisolation level 隔离级别 (for database) \niterate 迭代 \niterative 反复的、迭代的 \niterator 迭代器 \niteration 迭代(回圈每次轮回称为一个iteration) \nitem 项、条款、项目 \nJIT compilation JIT编译 即时编译 \nkey 键 (for database) \nkey column 键列 (for database) \nlaser 激光 \nlate binding 迟绑定 \nleft outer join 左向外联接 (for database) \nlevel 阶、层例 \nhigh level 高阶、高层 \nlibrary 库 \nlifetime 生命期、寿命 \nlink 连接、链接 \nlinkage 连接、链接 \nlinker 连接器、链接器 \nliteral constant 字面常数 \nlist 列表、表、链表 \nlist box 列表框 \nlivelock 活锁 (for database) \nload 装载、加载 \nload balancing 负载平衡 \nloader 装载器、载入器 \nlocal 局部的 \nlocal object 局部对象 \nlock 锁 \nlog 日志 \nlogin 登录 \nlogin security mode登录安全模式 (for database) \nlookup table 查找表 (for database) \nloop 循环 \nloose coupling 松散耦合 \nlvalue 左值 \nmachine code 机器码、机器代码 \nmacro 宏 \nmaintain 维护 \nmanaged code 受控代码、托管代码 \nManaged Extensions 受控扩充件、托管扩展 \nmanaged object 受控对象、托管对象 \nmangled name \nmanifest 清单 \nmanipulator 操纵器(iostream预先定义的一种东西) \nmany-to-many relationship 多对多关系 (for database) \nmany-to-one relationship 多对一关系 (for database) \nmarshal 列集 \nmember 成员 \nmember access operator 成员取用运算子(有dot和arrow两种) \nmember function 成员函数 \nmember initialization list成员初始值列表 \nmemberwise 以member为单元…、members 逐一… \nmemberwise copy \nmemory 内存 \nmemory leak 内存泄漏 \nmenu 菜单 \nmessage 消息 \nmessage based 基于消息的 \nmessage loop 消息环 \nmessage queuing消息队列 \nmetadata 元数据 \nmetaprogramming元编程 \nmethod 方法 \nmicro 微 \nmiddleware 中间件 \nmiddle tier 中间层 \nmodeling 建模 \nmodeling language 建模语言 \nmodifier 修饰字、修饰符 \nmodem 调制解调器 \nmodule 模块 \nmost derived class最底层的派生类 \nmouse 鼠标 \nmutable 可变的 \nmutex 互斥元、互斥体 \nmultidimensional OLAP (MOLAP) 多维OLAP(MOLAP) (for database) \nmultithreaded server application 多线程服务器应用程序 \nmultiuser 多用户 \nmulti-tasking 多任务 \nmulti-thread 多线程 \nmulticast delegate 组播委托、多点委托 \nnamed parameter 命名参数 \nnamed pipe 命名管道 \nnamespace 名字空间、命名空间 \nnative 原生的、本地的 \nnative code 本地码、本机码 \nNative Image Generator (NGEN)本地映像生成器 \nnested class 嵌套类 \nnested query 嵌套查询 (for database) \nnested table 嵌套表 (for database) \nnetwork 网络 \nnetwork card 网卡 \nnondependent name \nobject 对象 \nobject based 基于对象的 \nobject file 目标文件 \nobject model 对象模型 \nobject oriented 面向对象的 \nobject pooling 对象池化 \nODBC data source ODBC数据源 (for database) \nODBC driver ODBC驱动程序 (for database) \nODR (one-definition rule) \nOLE Automation objects OLE自动化对象 (for database) \nOLE Automation server OLE自动化服务器 (for database) \nOLE DB consumer OLE DB使用者 (for database) \nOLE DB for OLAP 用于OLAP的OLE DB (for database) \nOLE DB provider OLE DB提供者 (for database) \none-to-many relationship 一对多关系 (for database) \none-to-one relationship 一对一关系 (for database) \nonline analytical processing (OLAP) 联机分析处理(OLAP) (for database) \nonline redo log 联机重做日志 (for database) \nonline transaction processing (OLTP) 联机事务处理(OLTP) (for database) \nOpen Data Services (ODS) 开放式数据服务(ODS) (for database) \nOpen Database Connectivity (ODBC) 开放式数据库连接(ODBC) (for database) \noperand 操作数 \noperating system (OS) 操作系统 \noperation 操作 \noperator 操作符、运算符 \noption 选项 \noptimizer 优化器 \nouter join 外联接 (for database) \noverflow 上限溢位(相对于underflow) \noverhead 额外开销 \noverload 重载 \noverload resolution 重载决议 \noverloaded function 重载的函数 \noverloaded operator 被重载的操作符 \noverride 覆写、重载、重新定义 \npackage 包 \npackaging 打包 \npalette 调色板 \nparallel 并行 \nparameter 参数、形式参数、形参 \nparameter list 参数列表 \nparameterize 参数化 \nparent class 父类 \nparentheses 圆括弧、圆括号 \nparse 解析 \nparser 解析器 \npart 零件、部件 \npartial specialization 局部特化 \npass by address 传址(函式引数的传递方式)(非正式用语) \npass by reference 传地址、按引用传递 \npass by value 按值传递 \npattern 模式 \nPDA (personal digital assistant)个人数字助理 \nPE (Portable Executable) file 可移植可执行文件 \nperformance 性能 \npersistence 持久性 \nPInvoke (platform invoke service) 平台调用服务 \npixel 像素 \nplacement delete \nplacement new \nplaceholder 占位符 \nplatform 平台 \nPOD (plain old data (type)) \nPOI (point of instantiation) \npointer 指针 \npoll 轮询 \npooling 池化 \npolymorphism 多态 \npop up 弹出式 \nport 端口 \npostfix 后缀 \nprecedence 优先序(通常用于运算子的优先执行次序) \nprefix 前缀 \npreprocessor 预处理器 \nprimary key (PK)主键(PK) (for database) \nprimary table 主表 (for database) \nprimary template原始模板 \nprimitive type 原始类型 \nprint 打印 \nprinter 打印机 \nprocedure 过程 \nprocedural 过程式的、过程化的 \nprocess 进程 \nprofile 评测 \nprofiler 效能(性能)评测器 \nprogram 程序 \nprogrammer 程序员 \nprogramming编程、程序设计 \nprogress bar 进度指示器 \nproject 项目、工程 \nproperty 属性 \nprotocol 协议 \npseudo code伪码 \nqualified 经过资格修饰(例如加上scope运算子) \nqualifiedqualifier 修饰符 \nquality 质量 \nqueue 队列 \nrace condition 竞争条件（多线程环境常用语） \nradian 弧度 \nradio button 单选按钮 \nraise 引发(常用来表示发出一个exception) \nrandom number 随机数 \nrange 范围、区间 \nrank 等级 \nraw 未经处理的 \nreadOnly只读 \nrecord 记录 (for database) \nrecordset 记录集 (for database \nrecursive 递归 \nre-direction 重定向 \nrefactoring 重构 \nrefer 引用、参考 \nreference 引用、参考 \nreference counting引用计数 \nreferential integrity (RI)引用完整性(RI) (for database) \nregister 寄存器 \nreflection 反射 \nrefresh data 刷新数据 (for database) \nregular expression 正则表达式 \nrelational database 关系数据库 \nremote 远程 \nremote request 远程请求 \nrepresent 表述，表现 \nresolve 解析、决议 \nresolution 解析过程 \nresult set 结果集 (for database) \nretrieve data 检索数据 \nreturn 返回 \nreturn type 返回类型 \nreturn value 返回值 \nright outer join 右向外联接 (for database) \nrevoke 撤销 \nrobust 健壮 \nrobustness 健壮性 \nroll back 回滚 (for database) \nroll forward 前滚 (for database) \nroutine 例程 \nrow 行 (for database) \nrow lock 行锁 (for database) \nrowset 行集 (for database) \nRPC (remote procedure call)RPC(远程过程调用) \nruntime 执行期、运行期、执行时、运行时 \nrvalue 右值 \nsave 保存 \nsavepoint 保存点 (for database) \nSAX (Simple API for XML) \nscalable 可伸缩的、可扩展的 \nschedule 调度 \nscheduler 调度程序 \nschema 模式、纲目结构 \nscroll bar滚动条 \nscope 作用域、生存空间 \nscope operator 生存空间操作符 \nscope resolution operator 生存空间解析操作符 \nscreen 屏幕 \nSDK (Software Development Kit)软件开发包 \nsealed class 密封类 \nsearch 查找 \nsemantics 语义 \nsemaphore 信号量 \nsequential container序列式容器 \nserver 服务器、服务端 \nserial 串行 \nserialization/serialize 序列化 \nserver cursor服务端游标、服务器游标 (for database) \nsession 会话 (for database) \nsetter 设值函数 \nshared lock 共享锁 (for database) \nsibling 同级 \nside effect 副作用 \nsignature 签名 \nsingle-threaded 单线程 \nslider滑块 \nslot 槽 \nsmart pointer 智能指针 \nSMTP (Simple Mail Transfer Protocol) 简单邮件传输协议 \nsnapshot 截屏图 \nsnapshot 快照 (for database) \nspecialization 特化 \nspecification 规范、规格 \nsplitter 切分窗口 \nSOAP (simple object access protocol) 简单对象访问协议 \nsoftware 软件 \nsource code 源码、源代码 \n\nSQL (Structured Query Language) 结构化查询语言 (for database) \nstack 栈、堆栈 \nstack unwinding 叠辗转开解(此词用于exception主题) \nstandard library 标准库 \nstandard template library 标准模板库 \nstateless 无状态的 \nstatement 语句、声明 \nstatic cursor 静态游标 (for database) \nstatic SQL statements 静态SQL语句 (for database) \nstored procedure 存储过程 (for database) \nstatus bar 状态条 \nstream 流 \nstring 字符串 \nstub 存根 \nsubobject子对象 \nsubquery 子查询 (for database) \nsubroutine 子例程 \nsubscrīpt operator 下标操作符 \nsubset 子集 \nsubtype 子类型 \nsupport 支持 \nsuspend 挂起 \nsymbol 记号 \nsyntax 语法 \nsystem databases 系统数据库 (for database) \nsystem tables 系统表 (for database) \ntable 表 (for database) \ntable lock 表锁 (for database) \ntable-level constraint 表级约束 (for database) \ntape backup 磁带备份 (for database) \ntarget 标的,目标 \ntask switch 工作切换 \nTCP (Transport Control Protocol) 传输控制协议 \ntemplate 模板 \ntemplate-id \ntemplate argument deduction 模板参数推导 \ntemplate explicit specialization 模板显式特化 \ntemplate parameter 模板参数 \ntemplate template parameter \ntemporary object 临时对象 \ntemporary table 临时表 (for database) \ntext 文本 \ntext file 文本文件 \nthin client 瘦客户端 \nthird-party 第三方 \nthread 线程 \nthread-safe 线程安全的 \nthrow 抛出、引发(常指发出一个exception) \ntoken 符号、标记、令牌（看场合） \ntrace 跟踪 \ntransaction 事务 (for database) \ntransaction log 事务日志 (for database) \ntransaction rollback 事务回滚 (for database) \ntransactional replication 事务复制 (for database) \ntranslation unit 翻译单元 \ntraverse 遍历 \ntrigger 触发器 (for database) \ntwo-phase commit 两阶段提交 (for database) \ntuple \ntwo-phase lookup 两阶段查找 \ntype 类型 \nUDDI(Universary Descrīption, Discovery and Integration)统一描述、查询与集成 \nUML (unified modeling language)统一建模语言 \nunary function 单参函数 \nunary operator 一元操作符 \nunboxing 拆箱、拆箱转换 \nunderflow 下限溢位(相对于overflow) \nUnion query 联合查询 (for database) \nUNIQUE constraints UNIQUE约束 (for database) \nunique index 唯一索引 (for database) \nunmanaged code 非受控代码、非托管代码 \nunmarshal 散集 \nunqualified 未经限定的、未经修饰的 \nURI (Uniform Resource identifier) 统一资源标识符 \nURL (Uniform Resource Locator) 统一资源定位器 \nuser 用户 \nuser interface 用户界面 \nvalue types 值类型 \nvariable 变量 \nvector 向量(一种容器，有点类似array) \nviable 可行的 \nvideo 视频 \nview 视图 \nVEE (Virtual Execution Engine)虚拟执行引擎 \nvendor 厂商 \nview 视图 (for database) \nvirtual function 虚函数 \nvirtual machine 虚拟机 \nvirtual memory 虚拟内存 \nvowel 元音字母 \nWeb Services web服务 \nWHERE clause WHERE子句 (for database) \nwildcard characters 通配符字符 (for database) \nwildcard search 通配符搜索 (for database) \nwindow 窗口 \nwindow function 窗口函数 \nwindow procedure 窗口过程 \nWindows authentication Windows身份验证 \nwizard 向导 \nword 单词 \nword processor 字处理器 \nwrapper 包装、包装器 \nwrite enable 写启用 (for database) \nwrite-ahead log 预写日志 (for database) \nwrite-only 只写 \nWSDL (Web Service Descrīption Language)Web Service描述语言 \nXML Message Interface (XMI) XML消息接口 \nXML (eXtensible Markup Language) 可扩展标记语言 \nXSD (XML Schema Definition) XML模式定义语言 \nXSL (eXtensible Stylesheet Language) 可扩展样式表语言 \nXSLT (eXtensible Stylesheet Language Transformation)可扩展样式表语言转换 \nxxx based 基于xxx的 \nxxx oriented 面向xxx\n\n\n## 可能有重复，另一个版本\n\napplication 应用程式 应用、应用程序 \napplication framework 应用程式框架、应用框架 应用程序框架 \narchitecture 架构、系统架构 体系结构 \nargument 引数（传给函式的值）。叁见 parameter 叁数、实质叁数、实叁、自变量 \narray 阵列 数组 \narrow operator arrow（箭头）运算子 箭头操作符 \nassembly 装配件 \nassembly language 组合语言 汇编语言 \nassert(ion) 断言 \nassign 指派、指定、设值、赋值 赋值 \nassignment 指派、指定 赋值、分配 \nassignment operator 指派（赋值）运算子 = 赋值操作符 \nassociated 相应的、相关的 相关的、关联、相应的 \nassociative container 关联式容器（对应 sequential container） 关联式容器 \natomic 不可分割的 原子的 \nattribute 属性 属性、特性 \naudio 音讯 音频 \nA.I. 人工智慧 人工智能 \nbackground 背景 背景（用於图形着色） \n後台（用於行程） \nbackward compatible 回溯相容 向下兼容 \nbandwidth 频宽 带宽 \nbase class 基础类别 基类 \nbase type 基础型别 (等同於 base class) \nbatch 批次（意思是整批作业） 批处理 \nbenefit 利益 收益 \nbest viable function 最佳可行函式 最佳可行函式 \n（从 viable functions 中挑出的最佳吻合者） \nbinary search 二分搜寻法 二分查找 \nbinary tree 二元树 二叉树 \nbinary function 二元函式 双叁函数 \nbinary operator 二元运算子 二元操作符 \nbinding 系结 绑定 \nbit 位元 位 \nbit field 位元栏 位域 \nbitmap 位元图 位图 \nbitwise 以 bit 为单元逐一┅ \nbitwise copy 以 bit 为单元进行复制；位元逐一复制 位拷贝 \nblock 区块,区段 块、区块、语句块 \nboolean 布林值（真假值，true 或 false） 布尔值 \nborder 边框、框线 边框 \nbrace(curly brace) 大括弧、大括号 花括弧、花括号 \nbracket(square brakcet) 中括弧、中括号 方括弧、方括号 \nbreakpoint 中断点 断点 \nbuild 建造、构筑、建置（MS 用语） \nbuild－in 内建 内置 \nbus 汇流排 总线 \nbusiness 商务,业务 业务 \nbuttons 按钮 按钮 \nbyte 位元组（由 8 bits 组成） 字节 \ncache 快取 高速缓存 \ncall 呼叫、叫用 调用 \ncallback 回呼 回调 \ncall operator call（函式呼叫）运算子调用操作符 \n（同 function call operator） \ncandidate function 候选函式 候选函数 \n（在函式多载决议程序中出现的候选函式） \nchain 串链（例 chain of function calls） 链 \ncharacter 字元 字符 \ncheck box 核取方块 (i.e. check button) 复选框 \nchecked exception 可控式异常(Java) \ncheck button 方钮 (i.e. check box) 复选按钮 \nchild class 子类别（或称为derived class, subtype） 子类 \nclass 类别 类 \nclass body 类别本体 类体 \nclass declaration 类别宣告、类别宣告式 类声明 \nclass definition 类别定义、类别定义式 类定义 \nclass derivation list 类别衍化列 类继承列表 \nclass head 类别表头 类头 \nclass hierarchy 类别继承体系, 类别阶层 类层次体系 \nclass library 类别程式库、类别库 类库 \nclass template 类别模板、类别范本 类模板 \nclass template partial specializations \n类别模板偏特化 类模板部分特化 \nclass template specializations \n类别模板特化 类模板特化 \ncleanup 清理、善後 清理、清除 \nclient 客端、客户端、客户 客户 \nclient－server 主从架构 客户/服务器 \nclipboard 剪贴簿 剪贴板 \nclone 复制 克隆 \ncollection 群集 集合 \ncombo box 复合方块、复合框 组合框 \ncommand line 命令列 命令行 \n(系统文字模式下的整行执行命令) \ncommunication 通讯 通讯 \ncompatible 相容 兼容 \ncompile time 编译期 编译期、编译时 \ncompiler 编译器 编译器 \ncomponent 组件 组件 \ncomposition 复合、合成、组合 组合 \ncomputer 电脑、计算机 计算机、电脑 \nconcept 概念 概念 \nconcrete 具象的 实在的 \nconcurrent 并行 并发 \nconfiguration 组态 配置 \nconnection 连接，连线（网络,资料库） 连接 \nconstraint 约束（条件） \nconstruct 构件 构件 \ncontainer 容器 容器 \n（存放资料的某种结构如 list, vector...） \ncontainment 内含 包容 \ncontext 背景关系、周遭环境、上下脉络 环境、上下文 \ncontrol 控制元件、控件 控件 \nconsole 主控台 控制台 \nconst 常数（constant 的缩写，C++ 关键字） \nconstant 常数（相对於 variable） 常量 \nconstructor（ctor） 建构式 构造函数 \n（与class 同名的一种 member functions） \ncopy (v) 复制、拷贝 拷贝 \ncopy (n) 复件, 副本 \ncover 涵盖 覆盖 \ncreate 创建、建立、产生、生成 创建 \ncreation 产生、生成 创建 \ncursor 游标 光标 \ncustom 订制、自定 定制 \ndata 资料 数据 \ndatabase 资料库 数据库 \ndatabase schema 数据库结构纲目 \ndata member 资料成员、成员变数 数据成员、成员变量 \ndata structure 资料结构 数据结构 \ndatagram 资料元 数据报文 \ndead lock 死结 死锁 \ndebug 除错 调试 \ndebugger 除错器 调试器 \ndeclaration 宣告、宣告式 声明 \ndeduction 推导（例：template argument deduction） 推导、推断 \ndefault 预设 缺省、默认 \ndefer 延缓 推迟 \ndefine 定义 预定义\ndefinition 定义、定义区、定义式 定义 \ndelegate 委派、委托、委任 委托 \ndelegation （同上） \ndemarshal 反编列 散集 \ndereference 提领（取出指标所指物体的内容） 解叁考 \ndereference operator dereference（提领）运算子 * 解叁考操作符 \nderived class 衍生类别 派生类 \ndesign by contract 契约式设计 \ndesign pattern 设计范式、设计样式 设计模式 \n※ 最近我比较喜欢「设计范式」一词 \ndestroy 摧毁、销毁 \ndestructor 解构式 析构函数 \ndevice 装置、设备 设备 \ndialog 对话窗、对话盒 对话框 \ndirective 指令（例：using directive） (编译)指示符 \ndirectory 目录 目录 \ndisk 碟 盘 \ndispatch 分派 分派 \ndistributed computing 分布式计算 (分布式电算) 分布式计算 \n分散式计算 (分散式电算) \ndocument 文件 文档 \ndot operator dot（句点）运算子 . (圆)点操作符 \ndriver 驱动程式 驱动（程序） \ndynamic binding 动态系结 动态绑定 \nefficiency 效率 效率 \nefficient 高效 高效 \nend user 终端用户 \nentity 物体 实体、物体 \nencapsulation 封装 封装 \nenclosing class 外围类别（与巢状类别 nested class 有关）外围类 \nenum (enumeration) 列举（一种 C++ 资料型别） 枚举 \nenumerators 列举元（enum 型别中的成员） 枚举成员、枚举器 \nequal 相等 相等 \nequality 相等性 相等性 \nequality operator equality（等号）运算子 == 等号操作符 \nequivalence 等价性、等同性、对等性 等价性 \nequivalent 等价、等同、对等 等价 \nescape code 转义码 转义码 \nevaluate 评估、求值、核定 评估 \nevent 事件 事件 \nevent driven 事件驱动的 事件驱动的 \nexception 异常情况 异常 \nexception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明 \nexception handling 异常处理、异常处理机制 异常处理、异常处理机制 \nexception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范 \nexit 退离（指离开函式时的那一个执行点） 退出 \nexplicit 明白的、明显的、显式 显式 \nexport 汇出 引出、导出 \nexpression 运算式、算式 表达式 \nfacility 设施、设备 设施、设备 \nfeature 特性 \nfield 栏位,资料栏（Java） 字段, 值域（Java） \nfile 档案 文件 \nfirmware 韧体 固件 \nflag 旗标 标记 \nflash memory 快闪记忆体 闪存 \nflexibility 弹性 灵活性 \nflush 清理、扫清 刷新 \nfont 字型 字体 \nform 表单（programming 用语） 窗体 \nformal parameter 形式叁数 形式叁数 \nforward declaration 前置宣告 前置声明 \nforwarding 转呼叫,转发 转发 \nforwarding function 转呼叫函式,转发函式 转发函数 \nfractal 碎形 分形 \nframework 框架 框架 \nfull specialization 全特化（ref. partial specialization） \nfunction 函式、函数 函数 \nfunction call operator 同 call operator \nfunction object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象 \nfunction overloaded resolution \n函式多载决议程序 函数重载解决（方案） \nfunctionality 功能、机能 功能 \nfunction template 函式模板、函式范本 函数模板 \nfunctor 仿函式 仿函式、函子 \ngame 游戏 游戏 \ngenerate 生成 \ngeneric 泛型、一般化的 一般化的、通用的、泛化 \ngeneric algorithm 泛型演算法 通用算法 \ngetter (相对於 setter) 取值函式 \nglobal 全域的（对应於 local） 全局的 \nglobal object 全域物件 全局对象 \nglobal scope resolution operator \n全域生存空间（范围决议）运算子 :: 全局范围解析操作符 \ngroup 群组 \ngroup box 群组方块 分组框 \nguard clause 卫述句 (Refactoring, p250) 卫语句 \nGUI 图形介面 图形界面 \nhand shaking 握手协商 \nhandle 识别码、识别号、号码牌、权柄 句柄 \nhandler 处理常式 处理函数 \nhard－coded 编死的 硬编码的 \nhard－copy 硬拷图 屏幕截图 \nhard disk 硬碟 硬盘 \nhardware 硬体 硬件 \nhash table 杂凑表 哈希表、散列表 \nheader file 表头档、标头档 头文件 \nheap 堆积 堆 \nhierarchy 阶层体系 层次结构（体系） \nhook 挂钩 钩子 \nhyperlink 超链结 超链接 \nicon 图示、图标 图标 \nIDE 整合开发环境 集成开发环境 \nidentifier 识别字、识别符号 标识符 \nif and only if 若且唯若 当且仅当 \nIllinois 伊利诺 伊利诺斯 \nimage 影像 图象 \nimmediate base 直接的（紧临的）上层 base class。 直接上层基类 \nimmediate derived 直接的（紧临的）下层 derived class。 直接下层派生类 \nimmutability 不变性 \nimmutable 不可变（的） \nimplement 实作、实现 实现 \nimplementation 实作品、实作体、实作码、实件 实现 \nimplicit 隐喻的、暗自的、隐式 隐式 \nimport 汇入 导入 \nincrement operator 累加运算子 ++ 增加操作符 \ninfinite loop 无穷回圈 无限循环 \ninfinite recursive 无穷递回 无限递归 \ninformation 资讯 信息 \ninfrastructure 公共基础建设 \ninheritance 继承、继承机制 继承、继承机制 \ninline 行内 内联 \ninline expansion 行内展开 内联展开 \ninitialization 初始化（动作） 初始化 \ninitialization list 初值列 初始值列表 \ninitialize 初始化 初始化 \ninner class 内隐类别 内嵌类 \ninstance 实体 实例 \n（根据某种表述而实际产生的「东西」） \ninstantiated 具现化、实体化（常应用於 template） 实例化 \ninstantiation 具现体、具现化实体（常应用於 template） 实例 \ninteger (integral) 整数（的） 整型（的） \nintegrate 整合 集成 \ninteracts 交谈、互动 交互 \ninterface 介面 接口 \nfor GUI 介面 界面 \ninterpreter 直译器 解释器 \ninvariants 恒常性,约束条件 约束条件 \ninvoke 唤起 调用 \niterate 迭代（回圈一个轮回一个轮回地进行） 迭代 \nexception 异常情况 异常 \nexception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明 \nexception handling 异常处理、异常处理机制 异常处理、异常处理机制 \nexception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范 \nexit 退离（指离开函式时的那一个执行点） 退出 \nexplicit 明白的、明显的、显式 显式 \nexport 汇出 引出、导出 \nexpression 运算式、算式 表达式 \nfacility 设施、设备 设施、设备 \nfeature 特性 \nfield 栏位,资料栏（Java） 字段, 值域（Java） \nfile 档案 文件 \nfirmware 韧体 固件 \nflag 旗标 标记 \nflash memory 快闪记忆体 闪存 \nflexibility 弹性 灵活性 \nflush 清理、扫清 刷新 \nfont 字型 字体 \nform 表单（programming 用语） 窗体 \nformal parameter 形式叁数 形式叁数 \nforward declaration 前置宣告 前置声明 \nforwarding 转呼叫,转发 转发 \nforwarding function 转呼叫函式,转发函式 转发函数 \nfractal 碎形 分形 \nframework 框架 框架 \nfull specialization 全特化（ref. partial specialization） \nfunction 函式、函数 函数 \nfunction call operator 同 call operator \nfunction object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象 \nfunction overloaded resolution \n函式多载决议程序 函数重载解决（方案） \nfunctionality 功能、机能 功能 \nfunction template 函式模板、函式范本 函数模板 \nfunctor 仿函式 仿函式、函子 \ngame 游戏 游戏 \ngenerate 生成 \ngeneric 泛型、一般化的 一般化的、通用的、泛化 \ngeneric algorithm 泛型演算法 通用算法 \ngetter (相对於 setter) 取值函式 \nglobal 全域的（对应於 local） 全局的 \nglobal object 全域物件 全局对象 \nglobal scope resolution operator \n全域生存空间（范围决议）运算子 :: 全局范围解析操作符 \ngroup 群组 \ngroup box 群组方块 分组框 \nguard clause 卫述句 (Refactoring, p250) 卫语句 \nGUI 图形介面 图形界面 \nhand shaking 握手协商 \nhandle 识别码、识别号、号码牌、权柄 句柄 \nhandler 处理常式 处理函数 \nhard－coded 编死的 硬编码的 \nhard－copy 硬拷图 屏幕截图 \nhard disk 硬碟 硬盘 \nhardware 硬体 硬件 \nhash table 杂凑表 哈希表、散列表 \nheader file 表头档、标头档 头文件 \nheap 堆积 堆 \nhierarchy 阶层体系 层次结构（体系） \nhook 挂钩 钩子 \nhyperlink 超链结 超链接 \nicon 图示、图标 图标 \nIDE 整合开发环境 集成开发环境 \nidentifier 识别字、识别符号 标识符 \nif and only if 若且唯若 当且仅当 \nIllinois 伊利诺 伊利诺斯 \nimage 影像 图象 \nimmediate base 直接的（紧临的）上层 base class。 直接上层基类 \nimmediate derived 直接的（紧临的）下层 derived class。 直接下层派生类 \nimmutability 不变性 \nimmutable 不可变（的） \nimplement 实作、实现 实现 \nimplementation 实作品、实作体、实作码、实件 实现 \nimplicit 隐喻的、暗自的、隐式 隐式 \nimport 汇入 导入 \nincrement operator 累加运算子 ++ 增加操作符 \ninfinite loop 无穷回圈 无限循环 \ninfinite recursive 无穷递回 无限递归 \ninformation 资讯 信息 \ninfrastructure 公共基础建设 \ninheritance 继承、继承机制 继承、继承机制 \ninline 行内 内联 \ninline expansion 行内展开 内联展开 \ninitialization 初始化（动作） 初始化 \ninitialization list 初值列 初始值列表 \ninitialize 初始化 初始化 \ninner class 内隐类别 内嵌类 \ninstance 实体 实例 \n（根据某种表述而实际产生的「东西」） \ninstantiated 具现化、实体化（常应用於 template） 实例化 \ninstantiation 具现体、具现化实体（常应用於 template） 实例 \ninteger (integral) 整数（的） 整型（的） \nintegrate 整合 集成 \ninteracts 交谈、互动 交互 \ninterface 介面 接口 \nfor GUI 介面 界面 \ninterpreter 直译器 解释器 \ninvariants 恒常性,约束条件 约束条件 \ninvoke 唤起 调用 \niterate 迭代（回圈一个轮回一个轮回地进行） 迭代 \niterative 反覆的，迭代的 \niterator 迭代器（一种泛型指标） 迭代器 \niteration 迭代（回圈每次轮回称为一个 iteration） 迭代 \nitem 项目、条款 项、条款、项目 \nlaser 雷射 激光 \nlevel 阶 层 (级) \n例 high level 高阶 高层 \nlibrary 程式库、函式库 库、函数库 \nlifetime 生命期、寿命 生命期、寿命 \nlink 联结、连结 连接,链接 \nlinker 联结器、连结器 连接器 \nliteral constant 字面常数（例 3.14 或 \"hi\" 这等常数值） 字面常数 \nlist 串列（linked－list） 列表、表、链表 \nlist box 列表方块、列表框 列表框 \nload 载入 装载 \nloader 载入器 装载器、载入器 \nlocal 区域的（对应於 global） 局部的 \nlocal object 区域物件 局部对象 \nlock 机锁 \nloop 回圈 循环 \nlvalue 左值 左值 \nmacro 巨集 宏 \nmagic number 魔术数字 魔法数 \nmaintain 维护 维护 \nmanipulator 操纵器（iostream 预先定义的一种东西） 操纵器 \nmarshal 编列 列集 \n叁考 demarshal \nmechanism 机制 机制 \nmember 成员 成员 \nmember access operator 成员取用运算子（有 dot 和 arrow 两种） 成员存取操作符 \nmember function 成员函式 成员函数 \nmember initialization list \n成员初值列 成员初始值列表 \nmemberwise 以 member 为单元┅、members 逐一┅ 以成员为单位 \nmemberwise copy 以 members 为单元逐一复制 \nmemory 记忆体 内存 \nmenu 表单、选单 菜单 \nmessage 讯息 消息 \nmessage based 以讯息为基础的 基於消息的 \nmessage loop 讯息回圈 消息环 \nmethod (java) 方法、行为、函式 方法 \nmeta－ 超－ 元－ \n例 meta－programming 超编程 元编程 \nmicro 微 微 \nmiddleware 中介层 中间件 \nmodeling 模塑 \nmodeling language 塑模语言，建模语言 \nmodem 数据机 调制解调器 \nmodule 模组 模块 \nmodifier 饰词 修饰符 \nmost derived class 最末层衍生类别 最底层的派生类 \nmouse 滑鼠 鼠标 \nmutable 可变的 可变的 \nmulti－tasking 多工 多任务 \nnamespace 命名空间 名字空间、命名空间 \nnative 原生的 本地的、固有的 \nnested class 巢状类别 嵌套类 \nnetwork 网路 网络 \nnetwork card 网路卡 网卡 \nobject 物件 对象 \nobject based 以物件为基础的 基於对象的 \nobject file 目的档 目标文件 \nobject model 物件模型 对象模型 \nobject oriented 物件导向的 面向对象的 \nonline 线上 在线 \nopaque 不透明的 \noperand 运算元 操作数 \noperating system (OS) 作业系统 操作系统 \noperation 操作、操作行为 操作 \noperator 运算子 操作符、运算符 \noption 选项，可选方案 选项 \nordinary 常规的 常规的 \noverflow 上限溢位（相对於 underflow） 溢出（underflow:下溢） \noverhead 额外负担、额外开销 额外开销 \noverload 多载化、多载化、重载 重载 \noverloaded function 多载化函式 重载的函数 \noverloaded operator 多载化运算子 被重载的操作符 \noverloaded set 多载集合 重载集合 \noverride 改写、覆写 重载、改写、重新定义 \n（在 derived class 中重新定义虚拟函式 \npackage 套件 包 \npair 对组 \npalette 调色盘、组件盘、工具箱 \npane 窗格 窗格 \n（有时为嵌板之意，例 Java Content Pane） \nparallel 平行 并行 \nparameter 叁数（函式叁数列上的变数） 叁数、形式叁数、形叁 \nparameter list 叁数列 叁数列表 \nparent class 父类别（或称 base class） 父类 \nparentheses 小括弧、小括号 圆括弧、圆括号 \nparse 解析 解析 \npart 零件 部件 \npartial specialization 偏特化（ref. C++ Primer 3/e, 16.10） 局部特化 \n（ref. full specialization） \npass by address 传址（函式引数的传递方式）（非正式用语）传地址 \npass by reference 传址（函式引数的一种传递方式） 传地址, 按引用传递 \npass by value 传值（函式引数的一种传递方式） 按值传递 \npattern 范式、样式 模式 \nperformance 效率、性能兼而有之 性能 \npersistence 永续性 持久性 \npixel 图素、像素 像素 \nplacement delete ref. C++ Primer 3/e, 15.8.2 \nplacement new ref. C++ Primer 3/e, 15.8.2 \nplatform 平台 平台 \npointer 指标 指针 \n址位器（和址叁器 reference 形成对映，满好） \npoll 轮询 轮询 \npolymorphism 多型 多态 \npop up 冒起式、弹出式 弹出式 \nport 埠 端口 \npostfix 後置式、後序式 後置式 \nprecedence 优先序（通常用於运算子的优先执行次序） \nprefix 前置式、前序式 前置式 \npreprocessor 前处理器 预处理器 \nprime 质数 素数 \nprimitive type 基本型别 (不同於 base class,基础类别) \nprint 列印 打印 \nprinter 印表机 打印机 \npriority 优先权 (通常用於执行绪获得 CPU 时间的优先次序） \nprocedure 程序 过程 \nprocedural 程序性的、程序式的 过程式的、过程化的 \nprocess 行程 进程 \nprofile 评测 评测 \nprofiler 效能（效率）评测器 效能（性能）评测器 \nprogrammer 程式员 程序员 \nprogramming 编程、程式设计、程式化 编程 \nprogress bar 进度指示器 进度指示器 \nproject 专案 项目、工程 \nproperty 属性 \nprotocol 协定 协议 \npseudo code 假码、虚拟码、伪码 伪码 \nqualified 经过资格修饰（例如加上 scope 运算子） 限定 \nqualifier 资格修饰词、饰词 限定修饰词 \nquality 品质 质量 \nqueue 伫列 队列 \nradian 径度 弧度 \nradio button 圆钮 单选按钮 \nraise 引发（常用来表示发出一个 exception） 引起、引发 \nrandom number 随机数、乱数 随机数 \nrange 范围、区间（用於 STL 时） 范围、区间 \nrank 等级、分等（ref. C++Primer 3/e 9,15章） 等级 \nraw 生鲜的、未经处理的 未经处理的 \nrecord 记录 记录 \nrecordset 记录集 记录集 \nrecursive 递回 递归 \nre－direction 重导向 重定向 \nrefactoring 重构、重整 重构 \nrefer 取用 叁考 \nrefer to 指向、指涉、指代 \nreference （C++ 中类似指标的东西，相当於 \"化身\"） 引用、叁考 \n址叁器, see pointer \nregister 暂存器 寄存器 \nreflection 反射 反射、映像 \nrelational database 关联式资料库 关系数据库 \nrepresent 表述，表现 表述，表现 \nresolve 决议（为算式中的符号名称寻找 解析 \n对应之宣告式的过程） \nresolution 决议程序、决议过程 解析过程 \nresolution 解析度 分辨率 \nrestriction 局限 \nreturn 传回、回返 返回 \nreturn type 回返型别 返回类型 \nreturn value 回返值 返回值 \nrobust 强固、稳健 健壮 \nrobustness 强固性、稳健性 健壮性 \nroutine 常式 例程 \nruntime 执行期 运行期、运行时 \ncommon language runtime (CLR) 译为「通用语言执行层」 \nrvalue 右值 右值 \nsave 储存 存储 \nschedule 排程 调度 \nscheduler 排程器 调度程序 \nscheme 结构纲目、组织纲目 \nscroll bar 卷轴 滚动条 \nscope 生存空间、生存范围、范畴、作用域 生存空间 \nscope operator 生存空间（范围决议）运算子 :: 生存空间操作符 \nscope resolution operator \n生存空间决议运算子 生存空间解析操作符 \n（与scope operator同） \nscreen 萤幕 屏幕 \nsearch 搜寻 查找 \nsemantics 语意 语义 \nsequential container 序列式容器 顺序式容器 \n（对应於 associative container） \nserver 伺服器、伺服端 服务器、服务端 \nserial 串行 \nserialization 次第读写,序列化 序列化 \n(serialize) \nsetter (相对於 getter) 设值函式 \nsignal 信号 \nsignature 标记式、签名式、署名式 签名 \nslider 滚轴 滑块 \nslot 条孔、槽 槽 \nsmart pointer 灵巧指标、精灵指标 智能指针 \nsnapshot 萤幕快照（图） 屏幕截图 \nspecialization 特殊化、特殊化定义、特殊化宣告 特化 \nspecification 规格 规格、规范 \nsplitter 分裂视窗 切分窗口 \nsoftware 软体 软件 \nsolution 解法,解决方案 方案 \nsource 原始码 源码、源代码 \nstack 堆叠 栈 \nstack unwinding 堆叠辗转开解（此词用於 exception 主题） 栈辗转开解 * \nstandard library 标准程式库 \nstandard template library 标准模板程式库 \nstatement 述句 语句、声明 \nstatus bar 状态列、状态栏 状态条 \nSTL 见 standard template library \nstream 资料流、串流 流 \nstring 字串 字符串 \nsubroutine \nsubscript operator 下标运算子 [ ] 下标操作符 \nsubtype 子型别 子类型 \nsupport 支援 支持 \nsuspend 虚悬 挂起 \nsymbol 符号 记号 \nsyntax 语法 语法 \ntag 标签 标记 \n索引标签,页签 \ntarget 标的（例 target pointer：标的指标） 目标 \ntask switch 工作切换 任务切换 \ntemplate 模板、范本 模板 \ntemplate argument deduction \n模板引数推导 模板叁数推导 \ntemplate explicit specialization \n模板显式特化（版本） 模板显式特化 \ntemplate parameter 模板叁数 模板叁数 \ntemporary object 暂时物件 临时对象 \ntext 文字 文本 \ntext file 程式本文档（放置程式原始码的档案） 文本文件 \nthread 执行绪 线程 \nthread safe 多绪安全 多线程安全 \nthrow 丢掷（常指发出一个 exception） 丢掷、引发 \ntoken 语汇单元 符号、标记 \ntransaction 交易 事务 \ntransparent(ly) 透通的(地) \ntraverse 巡访（来回走动） 遍历 \ntrigger 触发 触发 \ntype 型别 类型 \nUML unified modeling language 统一建模语言 \nunary function 一元函式 单叁函数 \nunary operator 一元运算子 一元操作符 \nunderflow 下限溢位（相对於 overflow） 下溢 \nunchecked exception 不可控异常(Java) \nunqualified 未经资格修饰（而直接取用） \nunwinding ref. stack unwinding \nuser 使用者、用户 用户 \nuser interface 使用者介面、用户介面、人机介面 用户界面 \nvariable 变数（相对於常数 const） 变量 \nvector 向量（一种容器，有点类似 array） 向量、矢量 \nviable 可实行的、可行的 可行的 \nviable function 可行函式 可行函数 \n（从 candidate functions 中挑出者） \nvideo 视讯 视频 \nview (1) 视图 \n(document/view) 文档/视图 \nview (2) 映件 \nvirtual function 虚拟函式 虚函数 \nvirtual machine 虚拟机器 虚拟机 \nvirtual memory 虚拟记忆体 虚内存, 虚存 \nvolatile 易挥发的、易变的 \nvowel 母音 元音字母 \nwindow 视窗 窗口 \nwindow function 视窗函式 窗口函数 \nwindow procedure 视窗函式 窗口过程 \nword 字 单词 \nword processor 文书处理器 字处理器 \nwrapper 外覆、外包 包装absence 缺席\naccess 访问存取通路进入\nachieve 实现完成\nacquire 获得\nadjacency list method 邻接表表示法\nadjacency matrix method 邻接矩阵表示法\nalgorithm 算法\nallocate 留下分配\nanalog 推论\nappend 添加\narchive 档案归档\narray 数组\nassign 分配\nassume 假设\nassurance 确信信任\nATM(asynchronous transfer mode) 异步传输模式\nb.. real programs kernels 实程序核心程序\nb.. toy benchmark synthetic benchmark 简单基准程序复合基准程序\nbalance 平衡\nbandwidth 带宽\nbatch 一批一组\nbenchmark 基准测试程序\nbest-fit algorithm 最佳适应算法\nBFS(breadth first search) 广度优先搜索法\nbinary 二进制\nbinary relation 二元关系\nbinary tree 二叉树\nbit series 比特序列\nblack-box white-box 黑盒白盒\nblock miss 块失效\nblocked 阻塞(等待状态也称阻塞或封锁状态)\nboundary 界线分界\nbridge 网桥\nbubble sort 冒泡排序\ncalculation 计算\ncandidate key 候选键(辅键)\ncapability 能力才能\ncapacity 容量\ncartesian product 笛卡尔积\nCASE(com.. aided sof.. engineering) 计算机辅助软件工程\nCCP(communication control processor) 通信控制处理机\ncell 信元\ncharacteristic 特征特性\ncircuit switching 线路交换\ncircular wait 循环等待\nCISC(complex instruction set computer) 复杂指令集计算机\nclass 类\nClient/Server 客户机/服务器\nclock cycle clock rate 时钟周期时钟频率\ncoaxial cable 同轴电缆\ncohesion coupling 内聚耦合\ncoincidental logical procedural functional 偶然内聚逻辑内聚过程内聚功能内聚\ncombination 联合配合\ncommon 公用的共同的\ncommunication 通信\ncomplement number 补码\ncomponent 成分\nconcept 概念观念\ncondition 情况状况\nconform 符合\nconsist 组成存在\nconstrain 约束\ncontain 包含\ncorrespond (corresponding) 相符合(相应的一致的)\nCPETT 计算机性能评价工具与技术\nCPI 每条指令需要的周期数\nCSMA/CD 带冲突检测的载波监听多路访问\ncursor 游标\ncyclic redundency check 循环冗余检校\ndatabase: integrity consistency restory 完整性一致性可恢复性\ndatabase: security efficiency 数据库设计的目标: 安全性效率\ndeadlock: mutual exclusion 死锁条件: 互斥\ndeadlock: circular wait no preemption 死锁条件: 循环等待狗熊先权\ndecimal 十进位的\ndecision 决定判断\ndecomposition 双重的混合的\ndecrease 减少\ndefinition 定义\ndefinition phase 定义阶段\ndemonstrate 证明\ndesign phase 设计阶段\ndetermine 限定\ndevelopment phase 开发阶段\nDFS(depth first search) 深度优先搜索法\ndiagram 图表\nDifference Manchester 差分曼彻斯特\ndirected graph undirected graph 有向图无向图\ndistinguish 辩认区别\ndistributed system 分布式系统\ndivide division 分开除除法\ndivide union intersection difference 除并交差\ndocument 文件文档\nDQDB(distributed queue dual bus) 分布队列双总线\ndraw 绘制\ndual 二元的双的\ndynamic design process 动态定义过程\nelement 元素要素\nelevator (scan) algorithm 电梯算法又称扫描算法\nencapsulation inheritance 封装(压缩) 继承(遗传)\nencode 译成密码\nentity 实体\nentity integrity rule 实体完整性规则\nequal 相等的\nequation 方程式等式\nestimate 估计判断\nEthernet 以太网\nevolution 发展演化\nexceed 超过\nexchange sort 交换排序\nexclusive locks 排它锁(简记为X 锁)\nexecute 实现执行\nexhibit 表现展示陈列\nexistence 存在发生\nexpertise 专门技术\nexternal(internal) fragmentation 外(内)碎片\nfault page fault 中断过错页中断\nFDDI(fiber distributed data interface) 光纤分布式数据接口\nFDM(frequency division multiplexing 频分多路复用\nfiber optic cable 光缆\nFIFO replacement policy 先进先出替换算法\nfigure 数字图形\nfinal 最后的最终的\nfirst normal form 第一范式\nfloppy 活动盘片(软盘)\nforeign key domain tuple 外来键值域元组\nform 形状形式\nformula 公式表达式\nfoundation 基础根据基金\nframe page frame 帧结构页结构\nfrequency 频率\nFTP 文件传送服务\nfunction 函数\nfunctionally dependent 函数依赖\ngateway 网间连接器\ngather 聚集采集推测\ngeneral-purose registers 通用寄存器\ngenerate 产生\ngrade 等级标准\ngraph (graphic) 图\nGropher 将用户的请求自动转换成\nFTP\nguarantee 保证确定\nhash table hash function collision 哈希表哈希函数(散列函数) 碰撞\nHDLC 面向比特型数据链路层协议\nhit rate 命中率\nhost 主计算机\nhost language statement 主语言语句\nhypertext 超级文本\nillustrate 举例说明\nindependent 独立的\nindex 索引\nindirect 间接的\ninfluence 有影响的\ninitially 最初开头\ninsertion sort 插入排序\ninstruction format 指令格式\ninstruction set 指令集\ninterface 接口分界面连接体\ninternal 内部的内在的\ninterrupt 中断\nIPC 工业过程控制\nISAM VSAM 索引顺序存取方法虚拟存储存取方法\njoin natural join semijoin 连接自然连接半连接\njudgment 判断\nkernel executive supervisor user 核心执行管理用户\nkernels 核心程序\nkey comparison 键(码)值比较\nLAN(local area network) 局域网\nload 负载载入\nlogical functional 逻辑内聚功能内聚\nlongitudinal 水平的\nloop 圈环状\nmaintain 维护保养供给\nmaintanence phase 维护(保养)阶段\nMAN(metropclitan area network) 城域网\nManchester 曼彻斯特\nmap 地图映射图\nmatrix 矩阵点阵\nmemory reference 存储器参量\nmessage switching 报文交换\nmethod 方法技巧\nMFLOP(million floating point operate p s 每秒百万次浮点运算\nminimum 最小的\nMIPS(millions of instructions per second 每秒百万条指令\nmodule 单位基准\nmonitor (model benchmark physcal) method 监视(模型基准物理)法\nmultilevel data flow chart 分层数据流图\nmultiple 复合的多样的\nmultiple-term formula 多项式\nmultiplexing 多路复用技术\nmultiplication 乘法\nmutual exclusion 互相排斥\nnon-key attributes 非码属性\nnull 零空\nNyquist 奈奎斯特\nobject oriented 对象趋向的使适应的\nobject oriented analysis 面向对象的分析\nobject oriented databases 面向对象数据库\nobject oriented design 面向对象的设计\nobject oriented implementation 面向对象的实现\nobtain 获得\noccupy 占有居住于\noccurrence 事件\nodd 奇数的\none-dimensional array 一维数组\nOODB(object oriented data base) 面向对象数据库\nOOM(object oriented method) 面向对象的方法\noom: information object message class 信息对象消息类\noom: instance method message passing 实例方法消息传递\nopen system 开放系统\noperand 操作数\noptimized 尽量充分利用\noptional 任选的非强制的\norganize 组织\noverflow 溢出\noverlapping register windows 重叠寄存器窗口\npacket switching 报文分组交换\npage fault 页面失效\npage replacement algorithm 页替换算法\npaged segments 段页式管理\nPCB(process control block) 进程控制块\npeer entites 对等实体\nperform 表演执行\nperiod 时期周期\npermit 许可准许\nphase 阶段局面状态\nphysical data link network layer 物理层数据链路层网络层\npipeline 管道\nplatter track cluster 面磁道簇\npredicate 谓语\npreemption 有优先权的\nprefix (Polish form) 前缀(波兰表达式)\npreorder inorder postorder 前序中序后序\npresentation application layer 表示层应用层\nprimary key attributes 主码属性\nprinciple 原则方法\nprocedural coincidental 过程内聚偶然内聚\nprocess 过程加工处理\nproficient 精通\nprogram debugging 程序排错\nprojection selection join 投影选择连接\nproposition 主张建议陈述\nprotocal 协议\nprototype 原型样板\nprototyping method (model) 原型化周期(模型)\npseudo-code 伪码(又称程序设计语言PDL)\npunctuation 标点\npurpose 目的意图\nquality 质量品质\nqueue 队列\nready blocked running 就绪阻塞(等待) 运行\nreal page number 实页数\nreal programs 实程序\nredirected 重定向\nredundency 冗余\nreference integrity rule 引用完整性规则\nreferred to as 把.....当作\nregarde 关于\nregister(registry) 寄存器登记注册挂号\nregularly 定期的常规的\nrelation 关系\nrelay 中继\nreliability 可信赖的\nrepeater 中继器\nreplacement 替换\nrepresent 代表象征\nrequest indication response confirm 请求指示响应确认\nresource 资源\nrespon 回答响应\nRISC(reduced instruction set computer) 精简指令集计算机\nrobustness 健壮性\nrouter 路由器\nscheme 计划图表\nsector head cylinder 扇区磁头柱面\nselection sort 选择排序\nsemaphores 信号\nsequence 序列顺序\nShanon 香农\nshare locks 共享锁(简记为S 锁)\nshort path critical path 最短路径关键路径\nsignal 信号\nsignal-to-noise ratio 信噪比B/N\nsimilar 相似的\nSISD SIMD MISD MIMD * 指令流* 数据流\nSMDS 交换多兆位数据服务\nsoftware development phase 软件开发阶段\nsoftware engineering 软件工程\nsoftware portability 软件可移植性\nsoftware requirements specification 软件需求说明书\nsolve 解决\nsort 种类方式分类排序\nspanning tree 跨越树(生成树)\nspecify 指定说明\nspeedup 加速比\nSSTF(shortest-seek-time-first) 最短寻道时间优先(磁盘调度算法)\nstack strategy non-stack strategy 堆栈型非堆栈型\nstarvation 饥饿匮乏\nstatement 陈述\nstorage 贮藏库\nstore procdures 存储过程\nstrategy 战略兵法计划\nstrict 严密的\nstyles 文体风格\nsubgroup 循环的\nsubset 子集子设备\nsuperclass subclass abstract class 超类子类抽象类\nsuppose 假定\nsymbolic 象征的符号的\nsynthetic benchmark 复合基准程序\nsystem testing 系统测试\nSystolic 脉动阵列\ntable 表表格桌子\nTDM(time division multiplexing) 时分多路复用\ntechnology 工艺技术\nterminal 终端\ntesting phase 测试阶段\ntheta select project theta join θ选择投影θ连接\ntime complexity 时间复杂度\ntimestamping 时标技术\nToken Bus 令牌总线\nToken Ring 令牌环\ntoy benchmark 简单基准程序\ntransaction 事务记录\ntransmite 传送\ntransport layer session layer 传输层会话层\ntraversal method 遍历方法\ntriggers store procedures 触发器存储过程\n(ORACLE 系统)\nunderflow 下溢\nunique 唯一的\nunit system acceptance testing 单元测试系统测试确认测试\nuniverse 宇宙全世界\nupdate 更新\nvalue [数]值\nvariable 变量\nvertical 垂直的\nvertice edge 顶点(结点) 边\nvia 经过\nvirtual memory system 虚拟存储系统\nWAN(wide area network) 广域网\nwaterfall model 瀑布模型\nwhite noise 白噪声\nwrite-back(copy-back) 写回法\nwrite-through(store-through) 写直达法\nWWW(world wide web) 万维网\n\n## （IT）词汇\n\n### A\nActive-matrix主动距陈\nAdapter cards适配卡\nAdvanced application高级应用\nAnalytical graph分析图表\nAnalyze分析\nAnimations动画\nApplication software 应用软件\nArithmetic operations算术运算\nAudio-output device音频输出设备\nAccess time存取时间\naccess存取\naccuracy准确性\nad network cookies广告网络信息记录软件\nAdd-ons附软件\nAddress地址\nAgents代理\nAnalog signals模拟信号\nApplets程序\nAsynchronous communications port异步通信端口\nAttachment附件\n\n### B\nBar code条形码\nBar code reader条形码读卡器\nBasic application基础程序\nBinary coding schemes二进制译码方案\nBinary system二进制系统\nBit比特\nBrowser浏览器\nBus line总线\nBackup tape cartridge units备份磁带盒单元\nBandwidth带宽\nBluetooth蓝牙\nBroadband宽带\nBrowser浏览器\nBusiness-to-business企业对企业电子商务\nBusiness-to-consumer企业对消费者\nBus总线\n\n### C\nCables连线\nCell单元箱\nChain printer链式打印机\nCharacter and recognition device字符标识识别设备\nChart图表\nChassis支架\nChip芯片\nClarity清晰度\nClosed architecture封闭式体系结构\nColumn列\nCombination key结合键\ncomputer competency计算机能力\nconnectivity连接，结点\nContinuous-speech recognition system连续语言识别系统\nControl unit操纵单元\nCordless or wireless mouse无线鼠标\nCable modems有线调制解调器\ncarpal tunnel syndrome腕骨神经综合症\nCD-ROM可记录光盘\nCD-RW可重写光盘\nCD-R可记录压缩光盘\nChannel信道\nChat group谈话群组\nchlorofluorocarbons(CFCs) ]氯氟甲烷\nClient客户端\nCoaxial cable同轴电缆\ncold site冷战\nCommerce servers商业服务器\nCommunication channel信道\nCommunication systems信息系统\nCompact disc rewritable\nCompact disc光盘\ncomputer abuse amendments act of 19941994计算机滥用法案\ncomputer crime计算机犯罪\ncomputer ethics计算机道德\ncomputer fraud and abuse act of 1986计算机欺诈和滥用法案\ncomputer matching and privacy protection act of 1988计算机查找和隐私保护法案\nComputer network计算机网络\ncomputer support specialist计算机支持专家\ncomputer technician计算机技术人员\ncomputer trainer计算机教师\nConnection device连接设备\nConnectivity连接\nConsumer-to-consumer个人对个人\ncookies-cutter programs信息记录截取程序\ncookies信息记录程序 \ncracker解密高手\ncumulative trauma disorder积累性损伤错乱\nCybercash电子现金\nCyberspace计算机空间\ncynic愤世嫉俗者\n\n### D\nDatabase数据库\ndatabase files数据库文件\nDatabase manager数据库管理\nData bus数据总线\nData projector数码放映机\nDesktop system unit台式电脑系统单元\nDestination file目标文件\nDigital cameras数码照相机\nDigital notebooks数字笔记本\nDigital bideo camera数码摄影机\nDiscrete-speech recognition system不连续语言识别系统\nDocument文档\ndocument files文档文件\nDot-matrix printer点矩阵式打印机\nDual-scan monitor双向扫描显示器\nDumb terminal非智能终端\ndata security数据安全\nData transmission specifications数据传输说明\ndatabase administrator数据库管理员\nDataplay数字播放器\nDemodulation解调\ndenial of service attack拒绝服务攻击\nDial-up service拨号服务\nDigital cash数字现金\nDigital signals数字信号\nDigital subscriber line数字用户线路\nDigital versatile disc数字化通用磁盘\nDigital video disc数字化视频光盘\nDirect access直接存取\nDirectory search目录搜索\ndisaster recovery plan灾难恢复计划\nDisk caching磁盘驱动器高速缓存\nDiskette磁盘\nDisk磁碟 \nDistributed data processing system分部数据处理系统\nDistributed processing分布处理\nDomain code域代码\nDownloading下载\nDVD 数字化通用磁盘\nDVD-R 可写DVD\nDVD-RAM DVD随机存取器\nDVD-ROM 只读DVD\n\n### E\ne-book电子阅读\nExpansion cards扩展卡\nend user终端用户\ne-cash电子现金\ne-commerce电子商务\nelectronic cash电子现金\nelectronic commerce电子商务\nelectronic communications privacy act of1986电子通信隐私法案\nencrypting加密术\nenergy star能源之星\nEnterprise computing企业计算化\nenvironment环境\nErasable optical disks可擦除式光盘\nergonomics人类工程学\nethics道德规范\nExternal modem外置调制解调器\nextranet企业外部网\n\n### F\nFax machine传真机\nField域\nFind搜索\nFireWire port port火线端口\nFirmware固件\nFlash RAM闪存\nFlatbed scanner台式扫描器\nFlat-panel monitor纯平显示器 \nfloppy disk软盘\nFormatting toolbar格式化工具条\nFormula公式\nFunction函数\nfair credit reporting act of 1970公平信用报告法案\nFiber-optic cable光纤电缆\nFile compression文件压缩\nFile decompression文件解压缩\nfilter过滤\nfirewall防火墙\nfirewall防火墙\nFixed disk固定硬盘\nFlash memory闪存\nFlexible disk可折叠磁盘\nFloppies磁盘\nFloppy disk软盘\nFloppy-disk cartridge磁盘盒\nFormatting格式化\nfreedom of information act of 1970信息自由法案\nfrustrated受挫折\nFull-duplex communication全双通通信\n\n### G\nGeneral-purpose application通用运用程序\nGigahertz千兆赫\nGraphic tablet绘图板\ngreen pc绿色个人计算机\n\n### H\nhandheld computer手提电脑\nHard copy硬拷贝\nhard disk硬盘\nhardware硬件\nHelp帮助\nHost computer主机\nHome page主页\nHyperlink超链接\nhacker黑客\nHalf-duplex communication半双通通信 \nHard disk硬盘\nHard-disk cartridge硬盘盒\nHard-disk pack硬盘组\nHead crash磁头碰撞\nheader标题\nhelp desk specialist帮助办公专家\nhelper applications帮助软件\nHierarchical network层次型网络\nhistory file历史文件\nhits匹配记录\nhorizontal portal横向用户\nhot site热战\nHybrid network混合网络\nhyperlinks超连接\n\n### I\nImage capturing device图像获取设备\ninformation technology信息技术\nInk-jet printer墨水喷射印刷机\nIntegrated package综合性组件\nIntelligent terminal智能终端设备\nIntergrated circuit集成电路\nInterface cards接口卡\nInternal modem内部调制解调器\ninternet telephony网络电话\ninternet terminal互联网终端\nIdentification识别\ni-drive网络硬盘驱动器\nillusion of anonymity匿名幻想\nindex search索引搜索\ninformation pushers信息推送器\ninitializing 初始化\ninstant messaging计时信息\ninternal hard disk内置硬盘\nInternal modem内部调制解调器\nInternet hard drive 网络硬盘驱动器\nintranet企业内部网\n\n### J\njoystick操纵杆\n\n### K\nkeyword search关键字搜索\n\n### L\nlaser printer激光打印机\nLayout files版式文件\nLight pen光笔 \nLocate定位\nLogical operations逻辑运算\nLands凸面\nLine of sight communication视影通信\nLow bandwidth低带宽\nlurking潜伏\n\n### M\nMain board主板\nMark sensing标志检测\nMechanical mouse机械鼠标\nMemory内存\nMenu菜单\nMenu bar菜单条\nMicroprocessor微处理器\nMicroseconds微秒\nModem card调制解调器\nMonitor显示器\nMotherboard主板\nMouse 鼠标\nMultifunctional device多功能设备\nMagnetic tape reels磁带卷\nMagnetic tape streamers磁带条\nmailing list邮件列表\nMedium band媒质带宽\nmetasearch engine整合搜索引擎\nMicrowave微波\nModem解调器\nModulation解调\n\n### N\nNet PC网络计算机\nNetwork adapter card网卡\nNetwork personal computer网络个人电脑\nNetwork terminal 网络终端\nNotebook computer笔记本电脑\nNotebook system unit笔记本系统单元\nNumeric entry数字输入\nna?ve天真的人\nnational information infrastructure protection act of1996国际信息保护法案\nnational service provider全国性服务供应商\nNetwork architecture网络体系结构\nNetwork bridge网桥\nNetwork gateway网关\nnetwork manager网络管理员\nnewsgroup新闻组\nno electronic theft act of1997无电子盗窃法\nNode节点\nNonvolatile storage非易失性存储\n\n### O\nObject embedding对象嵌入\nObject linking目标链接\nOpen architecture开放式体系结构\nOptical disk光盘\nOptical mouse光电鼠标\nOptical scanner光电扫描仪\nOutline大纲\noff-line browsers离线浏览器\nOnline storage联机存储\n\n### P\npalmtop computer掌上电脑\nParallel ports并行端口\nPassive-matrix被动矩阵\nPC card个人计算机卡\nPersonal laser printer个人激光打印机\nPersonal video recorder card个人视频记录卡\nPhoto printer照片打印机\nPixel像素\nPlatform scanner平版式扫描仪\nPlotter绘图仪\nPlug and play即插即用\nPlug-in boards插件卡\nPointer指示器\nPointing stick指示棍\nPort端口\nPortable scanner便携式扫描仪\nPresentation files演示文稿\nPresentation graphics电子文稿程序\nPrimary storage主存\nProcedures规程\nProcessor处理机\nProgramming control lanugage程序控制语言\nPackets数据包\nParallel data transmission平行数据传输\nPeer-to-peer network system得等网络系统\nperson-person auction site个人对个人拍卖站点\nphysical security物理安全\nPits凹面\nplug-in插件程序\nPolling轮询\nprivacy隐私权\nproactive主动地\nprogrammer程序员\nProtocols协议\nprovider供应商\nproxy server代理服务\npull products推取程序\npush products推送程序\n\n### R\nRAM cache随机高速缓冲器\nRange范围\nRecord记录\nRelational database关系数据库\nReplace替换\nResolution分辨率\nRow行\nRead-only只读\nReformatting重组\nregional service provider区域性服务供应商\nrepetitive motion injury反复性动作损伤\nreverse directory反向目录\nright to financial privacy act of 1979财产隐私法案\n\n### S\nScanner扫描器\nSearch查找\nSecondary storage device助存储设备\nSemiconductor半导体\nSerial ports串行端口\nServer服务器\nShared laser printer共享激光打印机\nSheet表格\nSilicon chip硅片\nSlots插槽\nSmart card智能卡\nSoft copy软拷贝\nSoftware suite软件协议\nSorting排序分类\nSource file源文件\nSpecial-purpose application专用文件\nSpreadsheet电子数据表\nStandard toolbar标准工具栏\nSupercomputer巨型机\nSystem cabine 系统箱\nSystem clock时钟\nSystem software系统软件\nSatellite/air connection services卫星无线连接服务\nsearch engines搜索引擎\nsearch providers搜索供应者\nsearch services 搜索服务器\nSectors扇区\nsecurity安全\nSending and receiving devices发送接收设备\nSequential access顺序存取\nSerial data transmission单向通信\nsignature line签名档\nsnoopware监控软件\nsoftware copyright act of1980软件版权法案\nsoftware piracy软件盗版\nSolid-state storage固态存储器\nspecialized search engine专用搜索引擎\nspiders网页爬虫\nspike尖峰电压\nStar network星型网\nStrategy方案\nsubject主题\nsubscription address预定地址\nSuperdisk超级磁盘\nsurfing网上冲浪\nsurge protector浪涌保护器\nsystems analyst系统分析师\n\n### T\nTable二维表\nTelephony电话学\nTelevision boards电视扩展卡\nTerminal 终端\nTemplate模板\nText entry文本输入\nThermal printer 热印刷\nThin client瘦客\nToggle key触发键\nToolbar工具栏\nTouch screen触摸屏\nTrackball追踪球\nTV tuner card电视调谐卡\nTwo-state system双状态系统\ntechnical writer技术协作者\ntechnostress重压技术\ntelnet远程登录\nTime-sharing system分时系统\nTopology拓扑结构\nTracks磁道\ntraditional cookies传统的信息记录程序\nTwisted pair双绞线\n\n### U\nUnicode统一字符标准\nuploading上传\nusenet世界性新闻组网络\n\n### V\nVirtual memory虚拟内存\nVideo display screen视频显示屏\nVoice recognition system声音识别系统\nvertical portal纵向门户\nvideo privacy protection act of 1988视频隐私权保护法案\nvirus checker病毒检测程序\nvirus病毒\nVoiceband音频带宽\nVolatile storage易失性存储\nvoltage surge冲击性电压\n\n### W\nWand reader 条形码读入\nWeb 网络\nWeb appliance 环球网设备\nWeb page网页\nWeb site address网络地址\nWeb terminal环球网终端\nWebcam摄像头\nWhat-if analysis假定分析\nWireless revolution无线革命\nWord字长\nWord processing文字处理\nWord wrap自动换行\nWorksheet file 工作表文件\nweb auctions网上拍卖\nweb broadcasters网络广播\nweb portals门户网站\nweb sites网站\nweb storefront creation packages网上商店创建包\nweb storefronts网上商店\nweb utilities网上应用程序\nweb-downloading utilities网页下载应用程序\nwebmaster web站点管理员\nweb万维网\nWireless modems无线调制解调器\nwireless service provider无线服务供应商\nworld wide web万维网\nworm蠕虫病毒\nWrite-protect notch写保护口\n\n## 其他缩写\nDVD digital bersatile 数字化通用光盘\nIT ingormation technology信息技术 \nCD compact disc 压缩盘\nPDA personal digital assistant个人数字助理\nRAM random access memory随机存储器\nWWW World Wide Web 万维网\nDBMS database management system数据库管理系统\nHTML Hypertext Markup Language超文本标示语言\nOLE object linking and embedding对象链接潜入\nSQL structured query language结构化查询语言\nURL uniform resouice locator统一资源定位器\nAGP accelerated graphics port加速图形接口\nALU arithmetic-logic unit算术逻辑单元\nCPU central processing unit中央处理器\nCMOS complementary metal-oxide semiconductor互补金属氧化物半导体\nCISC complex instruction set computer复杂指令集计算机\nHPSB high performance serial bus高性能串行总线\nISA industry standard architecture工业标准结构体系\nPCI peripheral component interconnect外部设备互连总线\nPCMCIA Personal Memory Card International Association个人计算机存储卡国际协会\nRAM random-access memory随机存储器\nROM read-only memory只读存储器\nUSB universal serial bus通用串行总线\nCRT cathode-ray tube阴极射线管\nHDTV high-definition television高清晰度电视\nLCD liquid crystal display monitor液晶显示器\nMICRmagnetic-ink character recognition磁墨水字符识别器\nOCR optical-character recognition光电字符识别器\nOMR optical-mark recognition光标阅读器\nTFT thin film transistor monitor薄膜晶体管显示器\n\n## 其他\nZip disk压缩磁盘\nDomain name system（DNS）域名服务器\nfile transfer protocol(FTP)文件传送协议\nhypertext markup language(HTML)超文本链接标识语言\nLocal area network（LAN）局域网\ninternet relay chat(IRC)互联网多线交谈\nMetropolitan area network(MAN)城域网\nNetwork operation system(NOS)网络操作系统\nuniform resource locator(URL)统一资源定位器\nWide area network(WAN)广域网\n","slug":"Computer-English","published":1,"updated":"2017-11-29T07:39:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj5hvee3000xyhfyyoxncd7l","content":"<h1 id=\"计算机英语词汇\"><a href=\"#计算机英语词汇\" class=\"headerlink\" title=\"计算机英语词汇\"></a>计算机英语词汇</h1><h2 id=\"第一部分、计算机算法常用术语中英对照\"><a href=\"#第一部分、计算机算法常用术语中英对照\" class=\"headerlink\" title=\"第一部分、计算机算法常用术语中英对照\"></a>第一部分、计算机算法常用术语中英对照</h2><p>Data Structures 基本数据结构<br>Dictionaries 字典<br>Priority Queues 堆<br>Graph Data Structures 图<br>Set Data Structures 集合<br>Kd-Trees 线段树<br>Numerical Problems 数值问题<br>Solving Linear Equations 线性方程组<br>Bandwidth Reduction 带宽压缩<br>Matrix Multiplication 矩阵乘法<br>Determinants and Permanents 行列式<br>Constrained and Unconstrained Optimization 最值问题<br>Linear Programming 线性规划<br>Random Number Generation 随机数生成<br>Factoring and Primality Testing 因子分解/质数判定<br>Arbitrary Precision Arithmetic 高精度计算<br>Knapsack Problem 背包问题<br>Discrete Fourier Transform 离散Fourier变换<br>Combinatorial Problems 组合问题<br>Sorting 排序<br>Searching 查找<br>Median and Selection 中位数<br>Generating Permutations 排列生成<br>Generating Subsets 子集生成<br>Generating Partitions 划分生成<br>Generating Graphs 图的生成<br>Calendrical Calculations 日期<br>Job Scheduling 工程安排<br>Satisfiability 可满足性<br>Graph Problems – polynomial 图论-多项式算法<br>Connected Components 连通分支<br>Topological Sorting 拓扑排序<br>Minimum Spanning Tree 最小生成树<br>Shortest Path 最短路径<br>Transitive Closure and Reduction 传递闭包<br>Matching 匹配<br>Eulerian Cycle / Chinese Postman Euler回路/中国邮路<br>Edge and Vertex Connectivity 割边/割点<br>Network Flow 网络流<br>Drawing Graphs Nicely 图的描绘<br>Drawing Trees 树的描绘<br>Planarity Detection and Embedding 平面性检测和嵌入<br>Graph Problems – hard 图论-NP问题<br>Clique 最大团<br>Independent Set 独立集<br>Vertex Cover 点覆盖<br>Traveling Salesman Problem 旅行商问题<br>Hamiltonian Cycle Hamilton回路<br>Graph Partition 图的划分<br>Vertex Coloring 点染色<br>Edge Coloring 边染色<br>Graph Isomorphism 同构<br>Steiner Tree Steiner树<br>Feedback Edge/Vertex Set 最大无环子图<br>Computational Geometry 计算几何<br>Convex Hull 凸包<br>Triangulation 三角剖分<br>Voronoi Diagrams Voronoi图<br>Nearest Neighbor Search 最近点对查询<br>Range Search 范围查询<br>Point Location 位置查询<br>Intersection Detection 碰撞测试<br>Bin Packing 装箱问题<br>Medial-Axis Transformation 中轴变换<br>Polygon Partitioning 多边形分割<br>Simplifying Polygons 多边形化简<br>Shape Similarity 相似多边形<br>Motion Planning 运动规划<br>Maintaining Line Arrangements 平面分割<br>Minkowski Sum Minkowski和<br>Set and String Problems 集合与串的问题<br>Set Cover 集合覆盖<br>Set Packing 集合配置<br>String Matching 模式匹配<br>Approximate String Matching 模糊匹配<br>Text Compression 压缩<br>Cryptography 密码<br>Finite State Machine Minimization 有穷自动机简化<br>Longest Common Substring 最长公共子串<br>Shortest Common Superstring 最短公共父串<br>DP——Dynamic Programming——动态规划<br>recursion —— 递归 </p>\n<h2 id=\"第二部分、编程词汇\"><a href=\"#第二部分、编程词汇\" class=\"headerlink\" title=\"第二部分、编程词汇\"></a>第二部分、编程词汇</h2><p>A2A integration A2A整合<br>abstract 抽象的<br>abstract base class (ABC)抽象基类<br>abstract class 抽象类<br>abstraction 抽象、抽象物、抽象性<br>access 存取、访问<br>access level访问级别<br>access function 访问函数<br>account 账户<br>action 动作<br>activate 激活<br>active 活动的<br>actual parameter 实参<br>adapter 适配器<br>add-in 插件<br>address 地址<br>address space 地址空间<br>address-of operator 取地址操作符<br>ADL (argument-dependent lookup)<br>ADO(ActiveX Data Object)ActiveX数据对象<br>advanced<br>aggregation 聚合、聚集<br>algorithm 算法<br>alias 别名<br>align 排列、对齐<br>allocate 分配、配置<br>allocator分配器、配置器<br>angle bracket 尖括号<br>annotation 注解、评注<br>API (Application Programming Interface) 应用(程序)编程接口<br>app domain (application domain)应用域<br>application 应用、应用程序<br>application framework 应用程序框架<br>appearance 外观<br>append 附加<br>architecture 架构、体系结构<br>archive file 归档文件、存档文件<br>argument引数(传给函式的值)。参见parameter<br>array 数组<br>arrow operator 箭头操作符<br>ASP(Active Server Page)活动服务器页面<br>ASP.NET worker process ASP.NET工作者进程<br>assembly 装配件、配件<br>assembly language 汇编语言<br>assembly manifest 装配件清单<br>assert(ion) 断言<br>assign 赋值<br>assignment 赋值、分配<br>assignment operator 赋值操作符<br>associated 相关的、相关联的<br>associative container 关联式容器(对应sequential container)<br>asynchronous 异步的<br>atomic 原子的<br>atomic operation 原子操作<br>attribute 特性、属性<br>authentication service 验证服务<br>authorization 授权<br>audio 音频<br>A.I. 人工智能<br>B2B integration B2B整合、B2B集成(business-to-business integration)<br>background 背景、后台(进程)<br>backward compatible 向后兼容、向下兼容<br>backup 备份<br>backup device备份设备<br>backup file 备份文件<br>bandwidth 带宽<br>base class 基类<br>base type 基类型<br>batch 批处理<br>BCL (base class library)基类库<br>binary 二进制<br>binary search 二分查找<br>binary tree 二叉树<br>binary function 双参函数<br>binary large object二进制大对象<br>binary operator 二元操作符<br>binding 绑定<br>bit 位<br>bitmap 位图<br>bitwise 按位…<br>bitwise copy 为单元进行复制；位元逐一复制,按位拷<br>bitwise operation 按位运算<br>block 块、区块、语句块<br>bookkeeping 簿记<br>boolean 布林值(真假值，true或false)<br>border 边框<br>bounds checking 边界检查<br>boxing 装箱、装箱转换<br>brace (curly brace) 大括号、花括号<br>bracket (square brakcet) 中括号、方括号 </p>\n<p>breakpoint 断点<br>browser applications 浏览器应用(程序)<br>browser-accessible application 可经由浏览器访问的应用程序<br>build 编连(专指编译和连接<br>built-in 内建、内置<br>bus 总线<br>business 业务、商务(看场合)<br>business Logic 业务逻辑<br>business rules 业务规则<br>buttons 按钮<br>bug 臭虫<br>by/through 通过<br>byte 位元组(由8 bits组成)<br>cache 高速缓存<br>calendar 日历<br>call 调用<br>callback 回调<br>call-level interface (CLI)调用级接口(CLI)<br>call operator 调用操作符<br>candidate key 候选键 (for database)<br>cascading delete 级联删除 (for database)<br>cascading update 级联更新 (for database)<br>casting 转型、造型转换<br>catalog 目录<br>chain 链(function calls)<br>character 字符<br>character format 字符格式<br>character set 字符集<br>CHECK constraints CHECK约束 (for database)<br>checkpoint 检查点 (for database)<br>check box 复选框<br>check button 复选按钮<br>child class 子类<br>CIL (common intermediate language)通用中间语言、通用中介语言<br>class 类<br>class declaration 类声明<br>class definition 类定义<br>class derivation list 类继承列表<br>class factory 类厂<br>class hierarchy 类层次结构<br>class library 类库<br>class loader 类装载器<br>class template 类模板<br>class template partial specializations 类模板部分特化<br>class template specializations 类模板特化<br>classification 分类<br>clause 子句<br>client application 客户端应用程序<br>client cursor 客户端游标 (for database)<br>code page 代码页<br>cleanup 清理、清除<br>CLI (Common Language Infrastructure) 通用语言基础设施<br>client 客户、客户端<br>client area 客户区<br>client-server 客户机/服务器、客户端/服务器<br>clipboard 剪贴板<br>clone 克隆<br>CLS (common language specification) 通用语言规范<br>code access security 代码访问安全<br>COFF (Common Object File Format) 通用对象文件格式<br>collection 集合<br>COM (Component Object Model) 组件对象模型<br>combo box 组合框<br>command line 命令行<br>comment 注释<br>commit 提交 (for database)<br>communication 通讯<br>compatible 兼容<br>compile time 编译期、编译时<br>compiler 编译器<br>component组件<br>composite index 复合索引、组合索引 (for database)<br>composite key 复合键、组合键 (for database)<br>composition 复合、组合<br>concept 概念<br>concrete具体的<br>concrete class 具体类<br>concurrency 并发、并发机制<br>constraint 约束 (for database)<br>configuration 配置、组态<br>connection 连接 (for database)<br>connection pooling 连接池<br>console 控制台<br>constant 常量<br>construct 构件、成分、概念、构造（for language）<br>constructor (ctor) 构造函数、构造器<br>container 容器<br>containment包容<br>context 环境、上下文<br>control 控件<br>cookie (不译)<br>copy 拷贝<br>CORBA 通用对象请求中介架构(Common Object Request Broker Architecture)<br>cover 覆盖、涵盖<br>create/creation 创建、生成<br>crosstab query 交叉表查询 (for database)<br>CRTP (curiously recurring template pattern)<br>CTS (common type system)通用类型系统<br>cube 多维数据集 (for database)<br>cursor 光标<br>cursor 游标 (for database)<br>custom 定制、自定义<br>data 数据<br>data connection 数据连接 (for database)<br>Data Control Language (DCL) 数据控制语言(DCL) (for database)<br>Data Definition Language (DDL) 数据定义语言(DDL) (for database)<br>data dictionary 数据字典 (for database)<br>data dictionary view 数据字典视图 (for database)<br>data file 数据文件 (for database)<br>data integrity 数据完整性 (for database)<br>data manipulation language (DML)数据操作语言(DML) (for database)<br>data mart 数据集市 (for database)<br>data pump 数据抽取 (for database)<br>data scrubbing 数据清理 (for database)<br>data source 数据源 (for database)<br>Data source name (DSN) 数据源名称(DSN) (for database)<br>data warehouse 数据仓库 (for database)<br>dataset 数据集 (for database)<br>database 数据库 (for database)<br>database catalog 数据库目录 (for database)<br>database diagram 数据关系图 (for database)<br>database file 数据库文件 (for database)<br>database object 数据库对象 (for database)<br>database owner 数据库所有者 (for database)<br>database project 数据库工程 (for database)<br>database role 数据库角色 (for database)<br>database schema 数据库模式、数据库架构 (for database)<br>database scrīpt 数据库脚本 (for database)<br>data-bound 数据绑定 (for database)<br>data-aware control数据感知控件 (for database)<br>data member 数据成员、成员变量<br>dataset 数据集 (for database)<br>data source 数据源 (for database)<br>data structure数据结构<br>data table 数据表 (for database)<br>datagram 数据报文<br>DBMS (database management system)数据库管理系统 (for database)<br>DCOM (distributed COM)分布式COM<br>dead lock 死锁 (for database)<br>deallocate 归还<br>debug 调试<br>debugger 调试器<br>decay 退化<br>decision support 决策支持<br>declaration 声明<br>declarative referential integrity (DRI)声明引用完整性(DRI) (for database)<br>deduction 推导<br>DEFAULT constraint默认约束 (for database)<br>default database 默认数据库 (for database)<br>default instance 默认实例 (for database)<br>default result set 默认结果集 (for database)<br>default 缺省、默认值<br>defer 推迟<br>definition 定义<br>delegate 委托<br>delegation 委托<br>dependent name<br>deploy 部署<br>dereference 解引用<br>dereference operator (提领)运算子<br>derived class 派生类<br>design by contract 契约式设计<br>design pattern 设计模式<br>destroy 销毁<br>destructor(dtor)析构函数、析构器<br>device 设备<br>DHTML (dynamic HyperText Markup Language)动态超文本标记语言<br>dialog 对话框<br>digest 摘要<br>digital 数字的<br>DIME (Direct Internet Message Encapsulation)直接Internet消息封装<br>directive (编译)指示符<br>directory 目录<br>dirty pages脏页 (for database)<br>dirty read 脏读 (for database)<br>disassembler 反汇编器<br>DISCO (Discovery of Web Services)Web Services的查找<br>disk 盘<br>dispatch 调度、分派、派发（我喜欢“调度”）<br>DISPID (Dispatch Identifier)分派标识符<br>distributed computing 分布式计算<br>distributed query 分布式查询 (for database)<br>DNA (Distributed interNet Application) 分布式网间应用程序<br>document 文档<br>DOM (Document Object Model)文档对象模型<br>dot operator (圆)点操作符<br>driver 驱动(程序)<br>DTD (document type definition) 文档类型定义<br>double-byte character set (DBCS)双字节字符集(DBCS)<br>dump 转储<br>dump file 转储文件<br>dynamic cursor 动态游标 (for database)<br>dynamic filter 动态筛选 (for database)<br>dynamic locking 动态锁定 (for database)<br>dynamic recovery 动态恢复 (for database)<br>dynamic snapshot 动态快照 (for database)<br>dynamic SQL statements 动态SQL语句 (for database)<br>dynamic assembly 动态装配件、动态配件<br>dynamic binding 动态绑定<br>EAI (enterprise application integration)企业应用程序集成(整合)<br>EBCO (empty base class optimization) 空基类优化（机制）<br>e-business 电子商务<br>EDI (Dlectronic Data Interchange)电子数据交换<br>efficiency 效率<br>efficient 高效<br>end-to-end authentication 端对端身份验证<br>end user 最终用户<br>engine 引擎<br>entity 实体<br>encapsulation 封装<br>enclosing class 外围类别(与巢状类别 nested class有关)<br>enum (enumeration) 枚举<br>enumerators 枚举成员、枚举器<br>equal 相等<br>equality 相等性<br>equality operator 等号操作符<br>error log 错误日志 (for database)<br>escape code 转义码<br>escape character 转义符、转义字符<br>exclusive lock 排它锁 (for database)<br>explicit transaction 显式事务 (for database)<br>evaluate 评估<br>event 事件<br>event driven 事件驱动的<br>event handler 事件处理器<br>evidence 证据<br>exception 异常<br>exception declaration 异常声明<br>exception handling 异常处理、异常处理机制<br>exception-safe 异常安全的<br>exception specification 异常规范<br>exit 退出<br>explicit 显式<br>explicit specialization 显式特化<br>export 导出<br>expression 表达式<br>facility 设施、设备<br>fat client 胖客户端<br>feature 特性、特征<br>fetch 提取<br>field 字段(java)<br>field 字段 (for database)<br>field length 字段长度 (for database)<br>file 文件<br>filter 筛选 (for database)<br>finalization 终结<br>firewall 防火墙<br>finalizer 终结器<br>firmware 固件<br>flag 标记<br>flash memory 闪存<br>flush 刷新<br>font 字体<br>foreign key (FK) 外键(FK) (for database)<br>form 窗体<br>formal parameter 形参<br>forward declaration 前置声明<br>forward-only 只向前的<br>forward-only cursor 只向前游标 (for database)<br>fragmentation 碎片 (for database)<br>framework 框架<br>full specialization 完全特化<br>function 函数<br>function call operator (即operator ()) 函数调用操作符<br>function object 函数对象<br>function overloaded resolution函数重载决议<br>functionality 功能<br>function template函数模板<br>functor 仿函数<br>GAC (global assembly cache) 全局装配件缓存、全局配件缓存<br>GC (Garbage collection) 垃圾回收(机制)、垃圾收集(机制)<br>game 游戏<br>generate 生成<br>generic 泛化的、一般化的、通用的<br>generic algorithm通用算法<br>genericity 泛型<br>getter (相对于 setter)取值函数<br>global 全局的<br>global object 全局对象<br>global scope resolution operator 全局范围解析操作符<br>grant 授权 (for database)<br>granularity 粒度<br>group 组、群<br>group box 分组框<br>GUI 图形界面<br>GUID (Globally Unique Identifier) 全球唯一标识符<br>hand shaking 握手<br>handle 句柄<br>handler 处理器<br>hard-coded 硬编码的<br>hard-copy 截屏图<br>hard disk 硬盘<br>hardware 硬件<br>hash table 散列表、哈希表<br>header file头文件<br>heap 堆<br>help file 帮助文件<br>hierarchy 层次结构、继承体系<br>hierarchical data 阶层式数据、层次式数据<br>hook 钩子<br>Host (application)宿主(应用程序)<br>hot key 热键<br>hyperlink 超链接<br>HTML (HyperText Markup Language) 超文本标记语言<br>HTTP pipeline HTTP管道<br>HTTP (HyperText Transfer Protocol) 超文本传输协议<br>icon 图标<br>IDE (Integrated Development Environment)集成开发环境<br>IDL (Interface Definition Language) 接口定义语言<br>identifier 标识符<br>idle time 空闲时间<br>if and only if当且仅当<br>IL (Intermediate Language) 中间语言、中介语言<br>image 图象<br>IME 输入法<br>immediate base 直接基类<br>immediate derived 直接派生类<br>immediate updating 即时更新 (for database)<br>implicit transaction隐式事务 (for database)<br>incremental update 增量更新 (for database)<br>index 索引 (for database)<br>implement 实现<br>implementation 实现、实现品<br>implicit 隐式<br>import 导入<br>increment operator 增加操作符<br>infinite loop 无限循环<br>infinite recursive 无限递归<br>information 信息<br>infrastructure 基础设施<br>inheritance 继承、继承机制<br>inline 内联<br>inline expansion 内联展开<br>initialization 初始化<br>initialization list 初始化列表、初始值列表<br>initialize 初始化<br>inner join 内联接 (for database)<br>in-place active 现场激活<br>instance 实例<br>instantiated 具现化、实体化(常应用于template)<br>instantiation 具现体、具现化实体(常应用于template)<br>integrate 集成、整合<br>integrity 完整性、一致性<br>integrity constraint完整性约束 (for database)<br>interprocess communication (IPC)进程间通讯(IPC)<br>interacts 交互<br>interface 接口<br>for GUI 界面<br>interoperability 互操作性、互操作能力<br>interpreter 解释器<br>introspection 自省<br>invariants 不变性<br>invoke 调用<br>isolation level 隔离级别 (for database)<br>iterate 迭代<br>iterative 反复的、迭代的<br>iterator 迭代器<br>iteration 迭代(回圈每次轮回称为一个iteration)<br>item 项、条款、项目<br>JIT compilation JIT编译 即时编译<br>key 键 (for database)<br>key column 键列 (for database)<br>laser 激光<br>late binding 迟绑定<br>left outer join 左向外联接 (for database)<br>level 阶、层例<br>high level 高阶、高层<br>library 库<br>lifetime 生命期、寿命<br>link 连接、链接<br>linkage 连接、链接<br>linker 连接器、链接器<br>literal constant 字面常数<br>list 列表、表、链表<br>list box 列表框<br>livelock 活锁 (for database)<br>load 装载、加载<br>load balancing 负载平衡<br>loader 装载器、载入器<br>local 局部的<br>local object 局部对象<br>lock 锁<br>log 日志<br>login 登录<br>login security mode登录安全模式 (for database)<br>lookup table 查找表 (for database)<br>loop 循环<br>loose coupling 松散耦合<br>lvalue 左值<br>machine code 机器码、机器代码<br>macro 宏<br>maintain 维护<br>managed code 受控代码、托管代码<br>Managed Extensions 受控扩充件、托管扩展<br>managed object 受控对象、托管对象<br>mangled name<br>manifest 清单<br>manipulator 操纵器(iostream预先定义的一种东西)<br>many-to-many relationship 多对多关系 (for database)<br>many-to-one relationship 多对一关系 (for database)<br>marshal 列集<br>member 成员<br>member access operator 成员取用运算子(有dot和arrow两种)<br>member function 成员函数<br>member initialization list成员初始值列表<br>memberwise 以member为单元…、members 逐一…<br>memberwise copy<br>memory 内存<br>memory leak 内存泄漏<br>menu 菜单<br>message 消息<br>message based 基于消息的<br>message loop 消息环<br>message queuing消息队列<br>metadata 元数据<br>metaprogramming元编程<br>method 方法<br>micro 微<br>middleware 中间件<br>middle tier 中间层<br>modeling 建模<br>modeling language 建模语言<br>modifier 修饰字、修饰符<br>modem 调制解调器<br>module 模块<br>most derived class最底层的派生类<br>mouse 鼠标<br>mutable 可变的<br>mutex 互斥元、互斥体<br>multidimensional OLAP (MOLAP) 多维OLAP(MOLAP) (for database)<br>multithreaded server application 多线程服务器应用程序<br>multiuser 多用户<br>multi-tasking 多任务<br>multi-thread 多线程<br>multicast delegate 组播委托、多点委托<br>named parameter 命名参数<br>named pipe 命名管道<br>namespace 名字空间、命名空间<br>native 原生的、本地的<br>native code 本地码、本机码<br>Native Image Generator (NGEN)本地映像生成器<br>nested class 嵌套类<br>nested query 嵌套查询 (for database)<br>nested table 嵌套表 (for database)<br>network 网络<br>network card 网卡<br>nondependent name<br>object 对象<br>object based 基于对象的<br>object file 目标文件<br>object model 对象模型<br>object oriented 面向对象的<br>object pooling 对象池化<br>ODBC data source ODBC数据源 (for database)<br>ODBC driver ODBC驱动程序 (for database)<br>ODR (one-definition rule)<br>OLE Automation objects OLE自动化对象 (for database)<br>OLE Automation server OLE自动化服务器 (for database)<br>OLE DB consumer OLE DB使用者 (for database)<br>OLE DB for OLAP 用于OLAP的OLE DB (for database)<br>OLE DB provider OLE DB提供者 (for database)<br>one-to-many relationship 一对多关系 (for database)<br>one-to-one relationship 一对一关系 (for database)<br>online analytical processing (OLAP) 联机分析处理(OLAP) (for database)<br>online redo log 联机重做日志 (for database)<br>online transaction processing (OLTP) 联机事务处理(OLTP) (for database)<br>Open Data Services (ODS) 开放式数据服务(ODS) (for database)<br>Open Database Connectivity (ODBC) 开放式数据库连接(ODBC) (for database)<br>operand 操作数<br>operating system (OS) 操作系统<br>operation 操作<br>operator 操作符、运算符<br>option 选项<br>optimizer 优化器<br>outer join 外联接 (for database)<br>overflow 上限溢位(相对于underflow)<br>overhead 额外开销<br>overload 重载<br>overload resolution 重载决议<br>overloaded function 重载的函数<br>overloaded operator 被重载的操作符<br>override 覆写、重载、重新定义<br>package 包<br>packaging 打包<br>palette 调色板<br>parallel 并行<br>parameter 参数、形式参数、形参<br>parameter list 参数列表<br>parameterize 参数化<br>parent class 父类<br>parentheses 圆括弧、圆括号<br>parse 解析<br>parser 解析器<br>part 零件、部件<br>partial specialization 局部特化<br>pass by address 传址(函式引数的传递方式)(非正式用语)<br>pass by reference 传地址、按引用传递<br>pass by value 按值传递<br>pattern 模式<br>PDA (personal digital assistant)个人数字助理<br>PE (Portable Executable) file 可移植可执行文件<br>performance 性能<br>persistence 持久性<br>PInvoke (platform invoke service) 平台调用服务<br>pixel 像素<br>placement delete<br>placement new<br>placeholder 占位符<br>platform 平台<br>POD (plain old data (type))<br>POI (point of instantiation)<br>pointer 指针<br>poll 轮询<br>pooling 池化<br>polymorphism 多态<br>pop up 弹出式<br>port 端口<br>postfix 后缀<br>precedence 优先序(通常用于运算子的优先执行次序)<br>prefix 前缀<br>preprocessor 预处理器<br>primary key (PK)主键(PK) (for database)<br>primary table 主表 (for database)<br>primary template原始模板<br>primitive type 原始类型<br>print 打印<br>printer 打印机<br>procedure 过程<br>procedural 过程式的、过程化的<br>process 进程<br>profile 评测<br>profiler 效能(性能)评测器<br>program 程序<br>programmer 程序员<br>programming编程、程序设计<br>progress bar 进度指示器<br>project 项目、工程<br>property 属性<br>protocol 协议<br>pseudo code伪码<br>qualified 经过资格修饰(例如加上scope运算子)<br>qualifiedqualifier 修饰符<br>quality 质量<br>queue 队列<br>race condition 竞争条件（多线程环境常用语）<br>radian 弧度<br>radio button 单选按钮<br>raise 引发(常用来表示发出一个exception)<br>random number 随机数<br>range 范围、区间<br>rank 等级<br>raw 未经处理的<br>readOnly只读<br>record 记录 (for database)<br>recordset 记录集 (for database<br>recursive 递归<br>re-direction 重定向<br>refactoring 重构<br>refer 引用、参考<br>reference 引用、参考<br>reference counting引用计数<br>referential integrity (RI)引用完整性(RI) (for database)<br>register 寄存器<br>reflection 反射<br>refresh data 刷新数据 (for database)<br>regular expression 正则表达式<br>relational database 关系数据库<br>remote 远程<br>remote request 远程请求<br>represent 表述，表现<br>resolve 解析、决议<br>resolution 解析过程<br>result set 结果集 (for database)<br>retrieve data 检索数据<br>return 返回<br>return type 返回类型<br>return value 返回值<br>right outer join 右向外联接 (for database)<br>revoke 撤销<br>robust 健壮<br>robustness 健壮性<br>roll back 回滚 (for database)<br>roll forward 前滚 (for database)<br>routine 例程<br>row 行 (for database)<br>row lock 行锁 (for database)<br>rowset 行集 (for database)<br>RPC (remote procedure call)RPC(远程过程调用)<br>runtime 执行期、运行期、执行时、运行时<br>rvalue 右值<br>save 保存<br>savepoint 保存点 (for database)<br>SAX (Simple API for XML)<br>scalable 可伸缩的、可扩展的<br>schedule 调度<br>scheduler 调度程序<br>schema 模式、纲目结构<br>scroll bar滚动条<br>scope 作用域、生存空间<br>scope operator 生存空间操作符<br>scope resolution operator 生存空间解析操作符<br>screen 屏幕<br>SDK (Software Development Kit)软件开发包<br>sealed class 密封类<br>search 查找<br>semantics 语义<br>semaphore 信号量<br>sequential container序列式容器<br>server 服务器、服务端<br>serial 串行<br>serialization/serialize 序列化<br>server cursor服务端游标、服务器游标 (for database)<br>session 会话 (for database)<br>setter 设值函数<br>shared lock 共享锁 (for database)<br>sibling 同级<br>side effect 副作用<br>signature 签名<br>single-threaded 单线程<br>slider滑块<br>slot 槽<br>smart pointer 智能指针<br>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议<br>snapshot 截屏图<br>snapshot 快照 (for database)<br>specialization 特化<br>specification 规范、规格<br>splitter 切分窗口<br>SOAP (simple object access protocol) 简单对象访问协议<br>software 软件<br>source code 源码、源代码 </p>\n<p>SQL (Structured Query Language) 结构化查询语言 (for database)<br>stack 栈、堆栈<br>stack unwinding 叠辗转开解(此词用于exception主题)<br>standard library 标准库<br>standard template library 标准模板库<br>stateless 无状态的<br>statement 语句、声明<br>static cursor 静态游标 (for database)<br>static SQL statements 静态SQL语句 (for database)<br>stored procedure 存储过程 (for database)<br>status bar 状态条<br>stream 流<br>string 字符串<br>stub 存根<br>subobject子对象<br>subquery 子查询 (for database)<br>subroutine 子例程<br>subscrīpt operator 下标操作符<br>subset 子集<br>subtype 子类型<br>support 支持<br>suspend 挂起<br>symbol 记号<br>syntax 语法<br>system databases 系统数据库 (for database)<br>system tables 系统表 (for database)<br>table 表 (for database)<br>table lock 表锁 (for database)<br>table-level constraint 表级约束 (for database)<br>tape backup 磁带备份 (for database)<br>target 标的,目标<br>task switch 工作切换<br>TCP (Transport Control Protocol) 传输控制协议<br>template 模板<br>template-id<br>template argument deduction 模板参数推导<br>template explicit specialization 模板显式特化<br>template parameter 模板参数<br>template template parameter<br>temporary object 临时对象<br>temporary table 临时表 (for database)<br>text 文本<br>text file 文本文件<br>thin client 瘦客户端<br>third-party 第三方<br>thread 线程<br>thread-safe 线程安全的<br>throw 抛出、引发(常指发出一个exception)<br>token 符号、标记、令牌（看场合）<br>trace 跟踪<br>transaction 事务 (for database)<br>transaction log 事务日志 (for database)<br>transaction rollback 事务回滚 (for database)<br>transactional replication 事务复制 (for database)<br>translation unit 翻译单元<br>traverse 遍历<br>trigger 触发器 (for database)<br>two-phase commit 两阶段提交 (for database)<br>tuple<br>two-phase lookup 两阶段查找<br>type 类型<br>UDDI(Universary Descrīption, Discovery and Integration)统一描述、查询与集成<br>UML (unified modeling language)统一建模语言<br>unary function 单参函数<br>unary operator 一元操作符<br>unboxing 拆箱、拆箱转换<br>underflow 下限溢位(相对于overflow)<br>Union query 联合查询 (for database)<br>UNIQUE constraints UNIQUE约束 (for database)<br>unique index 唯一索引 (for database)<br>unmanaged code 非受控代码、非托管代码<br>unmarshal 散集<br>unqualified 未经限定的、未经修饰的<br>URI (Uniform Resource identifier) 统一资源标识符<br>URL (Uniform Resource Locator) 统一资源定位器<br>user 用户<br>user interface 用户界面<br>value types 值类型<br>variable 变量<br>vector 向量(一种容器，有点类似array)<br>viable 可行的<br>video 视频<br>view 视图<br>VEE (Virtual Execution Engine)虚拟执行引擎<br>vendor 厂商<br>view 视图 (for database)<br>virtual function 虚函数<br>virtual machine 虚拟机<br>virtual memory 虚拟内存<br>vowel 元音字母<br>Web Services web服务<br>WHERE clause WHERE子句 (for database)<br>wildcard characters 通配符字符 (for database)<br>wildcard search 通配符搜索 (for database)<br>window 窗口<br>window function 窗口函数<br>window procedure 窗口过程<br>Windows authentication Windows身份验证<br>wizard 向导<br>word 单词<br>word processor 字处理器<br>wrapper 包装、包装器<br>write enable 写启用 (for database)<br>write-ahead log 预写日志 (for database)<br>write-only 只写<br>WSDL (Web Service Descrīption Language)Web Service描述语言<br>XML Message Interface (XMI) XML消息接口<br>XML (eXtensible Markup Language) 可扩展标记语言<br>XSD (XML Schema Definition) XML模式定义语言<br>XSL (eXtensible Stylesheet Language) 可扩展样式表语言<br>XSLT (eXtensible Stylesheet Language Transformation)可扩展样式表语言转换<br>xxx based 基于xxx的<br>xxx oriented 面向xxx</p>\n<h2 id=\"可能有重复，另一个版本\"><a href=\"#可能有重复，另一个版本\" class=\"headerlink\" title=\"可能有重复，另一个版本\"></a>可能有重复，另一个版本</h2><p>application 应用程式 应用、应用程序<br>application framework 应用程式框架、应用框架 应用程序框架<br>architecture 架构、系统架构 体系结构<br>argument 引数（传给函式的值）。叁见 parameter 叁数、实质叁数、实叁、自变量<br>array 阵列 数组<br>arrow operator arrow（箭头）运算子 箭头操作符<br>assembly 装配件<br>assembly language 组合语言 汇编语言<br>assert(ion) 断言<br>assign 指派、指定、设值、赋值 赋值<br>assignment 指派、指定 赋值、分配<br>assignment operator 指派（赋值）运算子 = 赋值操作符<br>associated 相应的、相关的 相关的、关联、相应的<br>associative container 关联式容器（对应 sequential container） 关联式容器<br>atomic 不可分割的 原子的<br>attribute 属性 属性、特性<br>audio 音讯 音频<br>A.I. 人工智慧 人工智能<br>background 背景 背景（用於图形着色）<br>後台（用於行程）<br>backward compatible 回溯相容 向下兼容<br>bandwidth 频宽 带宽<br>base class 基础类别 基类<br>base type 基础型别 (等同於 base class)<br>batch 批次（意思是整批作业） 批处理<br>benefit 利益 收益<br>best viable function 最佳可行函式 最佳可行函式<br>（从 viable functions 中挑出的最佳吻合者）<br>binary search 二分搜寻法 二分查找<br>binary tree 二元树 二叉树<br>binary function 二元函式 双叁函数<br>binary operator 二元运算子 二元操作符<br>binding 系结 绑定<br>bit 位元 位<br>bit field 位元栏 位域<br>bitmap 位元图 位图<br>bitwise 以 bit 为单元逐一┅<br>bitwise copy 以 bit 为单元进行复制；位元逐一复制 位拷贝<br>block 区块,区段 块、区块、语句块<br>boolean 布林值（真假值，true 或 false） 布尔值<br>border 边框、框线 边框<br>brace(curly brace) 大括弧、大括号 花括弧、花括号<br>bracket(square brakcet) 中括弧、中括号 方括弧、方括号<br>breakpoint 中断点 断点<br>build 建造、构筑、建置（MS 用语）<br>build－in 内建 内置<br>bus 汇流排 总线<br>business 商务,业务 业务<br>buttons 按钮 按钮<br>byte 位元组（由 8 bits 组成） 字节<br>cache 快取 高速缓存<br>call 呼叫、叫用 调用<br>callback 回呼 回调<br>call operator call（函式呼叫）运算子调用操作符<br>（同 function call operator）<br>candidate function 候选函式 候选函数<br>（在函式多载决议程序中出现的候选函式）<br>chain 串链（例 chain of function calls） 链<br>character 字元 字符<br>check box 核取方块 (i.e. check button) 复选框<br>checked exception 可控式异常(Java)<br>check button 方钮 (i.e. check box) 复选按钮<br>child class 子类别（或称为derived class, subtype） 子类<br>class 类别 类<br>class body 类别本体 类体<br>class declaration 类别宣告、类别宣告式 类声明<br>class definition 类别定义、类别定义式 类定义<br>class derivation list 类别衍化列 类继承列表<br>class head 类别表头 类头<br>class hierarchy 类别继承体系, 类别阶层 类层次体系<br>class library 类别程式库、类别库 类库<br>class template 类别模板、类别范本 类模板<br>class template partial specializations<br>类别模板偏特化 类模板部分特化<br>class template specializations<br>类别模板特化 类模板特化<br>cleanup 清理、善後 清理、清除<br>client 客端、客户端、客户 客户<br>client－server 主从架构 客户/服务器<br>clipboard 剪贴簿 剪贴板<br>clone 复制 克隆<br>collection 群集 集合<br>combo box 复合方块、复合框 组合框<br>command line 命令列 命令行<br>(系统文字模式下的整行执行命令)<br>communication 通讯 通讯<br>compatible 相容 兼容<br>compile time 编译期 编译期、编译时<br>compiler 编译器 编译器<br>component 组件 组件<br>composition 复合、合成、组合 组合<br>computer 电脑、计算机 计算机、电脑<br>concept 概念 概念<br>concrete 具象的 实在的<br>concurrent 并行 并发<br>configuration 组态 配置<br>connection 连接，连线（网络,资料库） 连接<br>constraint 约束（条件）<br>construct 构件 构件<br>container 容器 容器<br>（存放资料的某种结构如 list, vector…）<br>containment 内含 包容<br>context 背景关系、周遭环境、上下脉络 环境、上下文<br>control 控制元件、控件 控件<br>console 主控台 控制台<br>const 常数（constant 的缩写，C++ 关键字）<br>constant 常数（相对於 variable） 常量<br>constructor（ctor） 建构式 构造函数<br>（与class 同名的一种 member functions）<br>copy (v) 复制、拷贝 拷贝<br>copy (n) 复件, 副本<br>cover 涵盖 覆盖<br>create 创建、建立、产生、生成 创建<br>creation 产生、生成 创建<br>cursor 游标 光标<br>custom 订制、自定 定制<br>data 资料 数据<br>database 资料库 数据库<br>database schema 数据库结构纲目<br>data member 资料成员、成员变数 数据成员、成员变量<br>data structure 资料结构 数据结构<br>datagram 资料元 数据报文<br>dead lock 死结 死锁<br>debug 除错 调试<br>debugger 除错器 调试器<br>declaration 宣告、宣告式 声明<br>deduction 推导（例：template argument deduction） 推导、推断<br>default 预设 缺省、默认<br>defer 延缓 推迟<br>define 定义 预定义<br>definition 定义、定义区、定义式 定义<br>delegate 委派、委托、委任 委托<br>delegation （同上）<br>demarshal 反编列 散集<br>dereference 提领（取出指标所指物体的内容） 解叁考<br>dereference operator dereference（提领）运算子 <em> 解叁考操作符<br>derived class 衍生类别 派生类<br>design by contract 契约式设计<br>design pattern 设计范式、设计样式 设计模式<br>※ 最近我比较喜欢「设计范式」一词<br>destroy 摧毁、销毁<br>destructor 解构式 析构函数<br>device 装置、设备 设备<br>dialog 对话窗、对话盒 对话框<br>directive 指令（例：using directive） (编译)指示符<br>directory 目录 目录<br>disk 碟 盘<br>dispatch 分派 分派<br>distributed computing 分布式计算 (分布式电算) 分布式计算<br>分散式计算 (分散式电算)<br>document 文件 文档<br>dot operator dot（句点）运算子 . (圆)点操作符<br>driver 驱动程式 驱动（程序）<br>dynamic binding 动态系结 动态绑定<br>efficiency 效率 效率<br>efficient 高效 高效<br>end user 终端用户<br>entity 物体 实体、物体<br>encapsulation 封装 封装<br>enclosing class 外围类别（与巢状类别 nested class 有关）外围类<br>enum (enumeration) 列举（一种 C++ 资料型别） 枚举<br>enumerators 列举元（enum 型别中的成员） 枚举成员、枚举器<br>equal 相等 相等<br>equality 相等性 相等性<br>equality operator equality（等号）运算子 == 等号操作符<br>equivalence 等价性、等同性、对等性 等价性<br>equivalent 等价、等同、对等 等价<br>escape code 转义码 转义码<br>evaluate 评估、求值、核定 评估<br>event 事件 事件<br>event driven 事件驱动的 事件驱动的<br>exception 异常情况 异常<br>exception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明<br>exception handling 异常处理、异常处理机制 异常处理、异常处理机制<br>exception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范<br>exit 退离（指离开函式时的那一个执行点） 退出<br>explicit 明白的、明显的、显式 显式<br>export 汇出 引出、导出<br>expression 运算式、算式 表达式<br>facility 设施、设备 设施、设备<br>feature 特性<br>field 栏位,资料栏（Java） 字段, 值域（Java）<br>file 档案 文件<br>firmware 韧体 固件<br>flag 旗标 标记<br>flash memory 快闪记忆体 闪存<br>flexibility 弹性 灵活性<br>flush 清理、扫清 刷新<br>font 字型 字体<br>form 表单（programming 用语） 窗体<br>formal parameter 形式叁数 形式叁数<br>forward declaration 前置宣告 前置声明<br>forwarding 转呼叫,转发 转发<br>forwarding function 转呼叫函式,转发函式 转发函数<br>fractal 碎形 分形<br>framework 框架 框架<br>full specialization 全特化（ref. partial specialization）<br>function 函式、函数 函数<br>function call operator 同 call operator<br>function object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象<br>function overloaded resolution<br>函式多载决议程序 函数重载解决（方案）<br>functionality 功能、机能 功能<br>function template 函式模板、函式范本 函数模板<br>functor 仿函式 仿函式、函子<br>game 游戏 游戏<br>generate 生成<br>generic 泛型、一般化的 一般化的、通用的、泛化<br>generic algorithm 泛型演算法 通用算法<br>getter (相对於 setter) 取值函式<br>global 全域的（对应於 local） 全局的<br>global object 全域物件 全局对象<br>global scope resolution operator<br>全域生存空间（范围决议）运算子 :: 全局范围解析操作符<br>group 群组<br>group box 群组方块 分组框<br>guard clause 卫述句 (Refactoring, p250) 卫语句<br>GUI 图形介面 图形界面<br>hand shaking 握手协商<br>handle 识别码、识别号、号码牌、权柄 句柄<br>handler 处理常式 处理函数<br>hard－coded 编死的 硬编码的<br>hard－copy 硬拷图 屏幕截图<br>hard disk 硬碟 硬盘<br>hardware 硬体 硬件<br>hash table 杂凑表 哈希表、散列表<br>header file 表头档、标头档 头文件<br>heap 堆积 堆<br>hierarchy 阶层体系 层次结构（体系）<br>hook 挂钩 钩子<br>hyperlink 超链结 超链接<br>icon 图示、图标 图标<br>IDE 整合开发环境 集成开发环境<br>identifier 识别字、识别符号 标识符<br>if and only if 若且唯若 当且仅当<br>Illinois 伊利诺 伊利诺斯<br>image 影像 图象<br>immediate base 直接的（紧临的）上层 base class。 直接上层基类<br>immediate derived 直接的（紧临的）下层 derived class。 直接下层派生类<br>immutability 不变性<br>immutable 不可变（的）<br>implement 实作、实现 实现<br>implementation 实作品、实作体、实作码、实件 实现<br>implicit 隐喻的、暗自的、隐式 隐式<br>import 汇入 导入<br>increment operator 累加运算子 ++ 增加操作符<br>infinite loop 无穷回圈 无限循环<br>infinite recursive 无穷递回 无限递归<br>information 资讯 信息<br>infrastructure 公共基础建设<br>inheritance 继承、继承机制 继承、继承机制<br>inline 行内 内联<br>inline expansion 行内展开 内联展开<br>initialization 初始化（动作） 初始化<br>initialization list 初值列 初始值列表<br>initialize 初始化 初始化<br>inner class 内隐类别 内嵌类<br>instance 实体 实例<br>（根据某种表述而实际产生的「东西」）<br>instantiated 具现化、实体化（常应用於 template） 实例化<br>instantiation 具现体、具现化实体（常应用於 template） 实例<br>integer (integral) 整数（的） 整型（的）<br>integrate 整合 集成<br>interacts 交谈、互动 交互<br>interface 介面 接口<br>for GUI 介面 界面<br>interpreter 直译器 解释器<br>invariants 恒常性,约束条件 约束条件<br>invoke 唤起 调用<br>iterate 迭代（回圈一个轮回一个轮回地进行） 迭代<br>exception 异常情况 异常<br>exception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明<br>exception handling 异常处理、异常处理机制 异常处理、异常处理机制<br>exception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范<br>exit 退离（指离开函式时的那一个执行点） 退出<br>explicit 明白的、明显的、显式 显式<br>export 汇出 引出、导出<br>expression 运算式、算式 表达式<br>facility 设施、设备 设施、设备<br>feature 特性<br>field 栏位,资料栏（Java） 字段, 值域（Java）<br>file 档案 文件<br>firmware 韧体 固件<br>flag 旗标 标记<br>flash memory 快闪记忆体 闪存<br>flexibility 弹性 灵活性<br>flush 清理、扫清 刷新<br>font 字型 字体<br>form 表单（programming 用语） 窗体<br>formal parameter 形式叁数 形式叁数<br>forward declaration 前置宣告 前置声明<br>forwarding 转呼叫,转发 转发<br>forwarding function 转呼叫函式,转发函式 转发函数<br>fractal 碎形 分形<br>framework 框架 框架<br>full specialization 全特化（ref. partial specialization）<br>function 函式、函数 函数<br>function call operator 同 call operator<br>function object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象<br>function overloaded resolution<br>函式多载决议程序 函数重载解决（方案）<br>functionality 功能、机能 功能<br>function template 函式模板、函式范本 函数模板<br>functor 仿函式 仿函式、函子<br>game 游戏 游戏<br>generate 生成<br>generic 泛型、一般化的 一般化的、通用的、泛化<br>generic algorithm 泛型演算法 通用算法<br>getter (相对於 setter) 取值函式<br>global 全域的（对应於 local） 全局的<br>global object 全域物件 全局对象<br>global scope resolution operator<br>全域生存空间（范围决议）运算子 :: 全局范围解析操作符<br>group 群组<br>group box 群组方块 分组框<br>guard clause 卫述句 (Refactoring, p250) 卫语句<br>GUI 图形介面 图形界面<br>hand shaking 握手协商<br>handle 识别码、识别号、号码牌、权柄 句柄<br>handler 处理常式 处理函数<br>hard－coded 编死的 硬编码的<br>hard－copy 硬拷图 屏幕截图<br>hard disk 硬碟 硬盘<br>hardware 硬体 硬件<br>hash table 杂凑表 哈希表、散列表<br>header file 表头档、标头档 头文件<br>heap 堆积 堆<br>hierarchy 阶层体系 层次结构（体系）<br>hook 挂钩 钩子<br>hyperlink 超链结 超链接<br>icon 图示、图标 图标<br>IDE 整合开发环境 集成开发环境<br>identifier 识别字、识别符号 标识符<br>if and only if 若且唯若 当且仅当<br>Illinois 伊利诺 伊利诺斯<br>image 影像 图象<br>immediate base 直接的（紧临的）上层 base class。 直接上层基类<br>immediate derived 直接的（紧临的）下层 derived class。 直接下层派生类<br>immutability 不变性<br>immutable 不可变（的）<br>implement 实作、实现 实现<br>implementation 实作品、实作体、实作码、实件 实现<br>implicit 隐喻的、暗自的、隐式 隐式<br>import 汇入 导入<br>increment operator 累加运算子 ++ 增加操作符<br>infinite loop 无穷回圈 无限循环<br>infinite recursive 无穷递回 无限递归<br>information 资讯 信息<br>infrastructure 公共基础建设<br>inheritance 继承、继承机制 继承、继承机制<br>inline 行内 内联<br>inline expansion 行内展开 内联展开<br>initialization 初始化（动作） 初始化<br>initialization list 初值列 初始值列表<br>initialize 初始化 初始化<br>inner class 内隐类别 内嵌类<br>instance 实体 实例<br>（根据某种表述而实际产生的「东西」）<br>instantiated 具现化、实体化（常应用於 template） 实例化<br>instantiation 具现体、具现化实体（常应用於 template） 实例<br>integer (integral) 整数（的） 整型（的）<br>integrate 整合 集成<br>interacts 交谈、互动 交互<br>interface 介面 接口<br>for GUI 介面 界面<br>interpreter 直译器 解释器<br>invariants 恒常性,约束条件 约束条件<br>invoke 唤起 调用<br>iterate 迭代（回圈一个轮回一个轮回地进行） 迭代<br>iterative 反覆的，迭代的<br>iterator 迭代器（一种泛型指标） 迭代器<br>iteration 迭代（回圈每次轮回称为一个 iteration） 迭代<br>item 项目、条款 项、条款、项目<br>laser 雷射 激光<br>level 阶 层 (级)<br>例 high level 高阶 高层<br>library 程式库、函式库 库、函数库<br>lifetime 生命期、寿命 生命期、寿命<br>link 联结、连结 连接,链接<br>linker 联结器、连结器 连接器<br>literal constant 字面常数（例 3.14 或 “hi” 这等常数值） 字面常数<br>list 串列（linked－list） 列表、表、链表<br>list box 列表方块、列表框 列表框<br>load 载入 装载<br>loader 载入器 装载器、载入器<br>local 区域的（对应於 global） 局部的<br>local object 区域物件 局部对象<br>lock 机锁<br>loop 回圈 循环<br>lvalue 左值 左值<br>macro 巨集 宏<br>magic number 魔术数字 魔法数<br>maintain 维护 维护<br>manipulator 操纵器（iostream 预先定义的一种东西） 操纵器<br>marshal 编列 列集<br>叁考 demarshal<br>mechanism 机制 机制<br>member 成员 成员<br>member access operator 成员取用运算子（有 dot 和 arrow 两种） 成员存取操作符<br>member function 成员函式 成员函数<br>member initialization list<br>成员初值列 成员初始值列表<br>memberwise 以 member 为单元┅、members 逐一┅ 以成员为单位<br>memberwise copy 以 members 为单元逐一复制<br>memory 记忆体 内存<br>menu 表单、选单 菜单<br>message 讯息 消息<br>message based 以讯息为基础的 基於消息的<br>message loop 讯息回圈 消息环<br>method (java) 方法、行为、函式 方法<br>meta－ 超－ 元－<br>例 meta－programming 超编程 元编程<br>micro 微 微<br>middleware 中介层 中间件<br>modeling 模塑<br>modeling language 塑模语言，建模语言<br>modem 数据机 调制解调器<br>module 模组 模块<br>modifier 饰词 修饰符<br>most derived class 最末层衍生类别 最底层的派生类<br>mouse 滑鼠 鼠标<br>mutable 可变的 可变的<br>multi－tasking 多工 多任务<br>namespace 命名空间 名字空间、命名空间<br>native 原生的 本地的、固有的<br>nested class 巢状类别 嵌套类<br>network 网路 网络<br>network card 网路卡 网卡<br>object 物件 对象<br>object based 以物件为基础的 基於对象的<br>object file 目的档 目标文件<br>object model 物件模型 对象模型<br>object oriented 物件导向的 面向对象的<br>online 线上 在线<br>opaque 不透明的<br>operand 运算元 操作数<br>operating system (OS) 作业系统 操作系统<br>operation 操作、操作行为 操作<br>operator 运算子 操作符、运算符<br>option 选项，可选方案 选项<br>ordinary 常规的 常规的<br>overflow 上限溢位（相对於 underflow） 溢出（underflow:下溢）<br>overhead 额外负担、额外开销 额外开销<br>overload 多载化、多载化、重载 重载<br>overloaded function 多载化函式 重载的函数<br>overloaded operator 多载化运算子 被重载的操作符<br>overloaded set 多载集合 重载集合<br>override 改写、覆写 重载、改写、重新定义<br>（在 derived class 中重新定义虚拟函式<br>package 套件 包<br>pair 对组<br>palette 调色盘、组件盘、工具箱<br>pane 窗格 窗格<br>（有时为嵌板之意，例 Java Content Pane）<br>parallel 平行 并行<br>parameter 叁数（函式叁数列上的变数） 叁数、形式叁数、形叁<br>parameter list 叁数列 叁数列表<br>parent class 父类别（或称 base class） 父类<br>parentheses 小括弧、小括号 圆括弧、圆括号<br>parse 解析 解析<br>part 零件 部件<br>partial specialization 偏特化（ref. C++ Primer 3/e, 16.10） 局部特化<br>（ref. full specialization）<br>pass by address 传址（函式引数的传递方式）（非正式用语）传地址<br>pass by reference 传址（函式引数的一种传递方式） 传地址, 按引用传递<br>pass by value 传值（函式引数的一种传递方式） 按值传递<br>pattern 范式、样式 模式<br>performance 效率、性能兼而有之 性能<br>persistence 永续性 持久性<br>pixel 图素、像素 像素<br>placement delete ref. C++ Primer 3/e, 15.8.2<br>placement new ref. C++ Primer 3/e, 15.8.2<br>platform 平台 平台<br>pointer 指标 指针<br>址位器（和址叁器 reference 形成对映，满好）<br>poll 轮询 轮询<br>polymorphism 多型 多态<br>pop up 冒起式、弹出式 弹出式<br>port 埠 端口<br>postfix 後置式、後序式 後置式<br>precedence 优先序（通常用於运算子的优先执行次序）<br>prefix 前置式、前序式 前置式<br>preprocessor 前处理器 预处理器<br>prime 质数 素数<br>primitive type 基本型别 (不同於 base class,基础类别)<br>print 列印 打印<br>printer 印表机 打印机<br>priority 优先权 (通常用於执行绪获得 CPU 时间的优先次序）<br>procedure 程序 过程<br>procedural 程序性的、程序式的 过程式的、过程化的<br>process 行程 进程<br>profile 评测 评测<br>profiler 效能（效率）评测器 效能（性能）评测器<br>programmer 程式员 程序员<br>programming 编程、程式设计、程式化 编程<br>progress bar 进度指示器 进度指示器<br>project 专案 项目、工程<br>property 属性<br>protocol 协定 协议<br>pseudo code 假码、虚拟码、伪码 伪码<br>qualified 经过资格修饰（例如加上 scope 运算子） 限定<br>qualifier 资格修饰词、饰词 限定修饰词<br>quality 品质 质量<br>queue 伫列 队列<br>radian 径度 弧度<br>radio button 圆钮 单选按钮<br>raise 引发（常用来表示发出一个 exception） 引起、引发<br>random number 随机数、乱数 随机数<br>range 范围、区间（用於 STL 时） 范围、区间<br>rank 等级、分等（ref. C++Primer 3/e 9,15章） 等级<br>raw 生鲜的、未经处理的 未经处理的<br>record 记录 记录<br>recordset 记录集 记录集<br>recursive 递回 递归<br>re－direction 重导向 重定向<br>refactoring 重构、重整 重构<br>refer 取用 叁考<br>refer to 指向、指涉、指代<br>reference （C++ 中类似指标的东西，相当於 “化身”） 引用、叁考<br>址叁器, see pointer<br>register 暂存器 寄存器<br>reflection 反射 反射、映像<br>relational database 关联式资料库 关系数据库<br>represent 表述，表现 表述，表现<br>resolve 决议（为算式中的符号名称寻找 解析<br>对应之宣告式的过程）<br>resolution 决议程序、决议过程 解析过程<br>resolution 解析度 分辨率<br>restriction 局限<br>return 传回、回返 返回<br>return type 回返型别 返回类型<br>return value 回返值 返回值<br>robust 强固、稳健 健壮<br>robustness 强固性、稳健性 健壮性<br>routine 常式 例程<br>runtime 执行期 运行期、运行时<br>common language runtime (CLR) 译为「通用语言执行层」<br>rvalue 右值 右值<br>save 储存 存储<br>schedule 排程 调度<br>scheduler 排程器 调度程序<br>scheme 结构纲目、组织纲目<br>scroll bar 卷轴 滚动条<br>scope 生存空间、生存范围、范畴、作用域 生存空间<br>scope operator 生存空间（范围决议）运算子 :: 生存空间操作符<br>scope resolution operator<br>生存空间决议运算子 生存空间解析操作符<br>（与scope operator同）<br>screen 萤幕 屏幕<br>search 搜寻 查找<br>semantics 语意 语义<br>sequential container 序列式容器 顺序式容器<br>（对应於 associative container）<br>server 伺服器、伺服端 服务器、服务端<br>serial 串行<br>serialization 次第读写,序列化 序列化<br>(serialize)<br>setter (相对於 getter) 设值函式<br>signal 信号<br>signature 标记式、签名式、署名式 签名<br>slider 滚轴 滑块<br>slot 条孔、槽 槽<br>smart pointer 灵巧指标、精灵指标 智能指针<br>snapshot 萤幕快照（图） 屏幕截图<br>specialization 特殊化、特殊化定义、特殊化宣告 特化<br>specification 规格 规格、规范<br>splitter 分裂视窗 切分窗口<br>software 软体 软件<br>solution 解法,解决方案 方案<br>source 原始码 源码、源代码<br>stack 堆叠 栈<br>stack unwinding 堆叠辗转开解（此词用於 exception 主题） 栈辗转开解 </em><br>standard library 标准程式库<br>standard template library 标准模板程式库<br>statement 述句 语句、声明<br>status bar 状态列、状态栏 状态条<br>STL 见 standard template library<br>stream 资料流、串流 流<br>string 字串 字符串<br>subroutine<br>subscript operator 下标运算子 [ ] 下标操作符<br>subtype 子型别 子类型<br>support 支援 支持<br>suspend 虚悬 挂起<br>symbol 符号 记号<br>syntax 语法 语法<br>tag 标签 标记<br>索引标签,页签<br>target 标的（例 target pointer：标的指标） 目标<br>task switch 工作切换 任务切换<br>template 模板、范本 模板<br>template argument deduction<br>模板引数推导 模板叁数推导<br>template explicit specialization<br>模板显式特化（版本） 模板显式特化<br>template parameter 模板叁数 模板叁数<br>temporary object 暂时物件 临时对象<br>text 文字 文本<br>text file 程式本文档（放置程式原始码的档案） 文本文件<br>thread 执行绪 线程<br>thread safe 多绪安全 多线程安全<br>throw 丢掷（常指发出一个 exception） 丢掷、引发<br>token 语汇单元 符号、标记<br>transaction 交易 事务<br>transparent(ly) 透通的(地)<br>traverse 巡访（来回走动） 遍历<br>trigger 触发 触发<br>type 型别 类型<br>UML unified modeling language 统一建模语言<br>unary function 一元函式 单叁函数<br>unary operator 一元运算子 一元操作符<br>underflow 下限溢位（相对於 overflow） 下溢<br>unchecked exception 不可控异常(Java)<br>unqualified 未经资格修饰（而直接取用）<br>unwinding ref. stack unwinding<br>user 使用者、用户 用户<br>user interface 使用者介面、用户介面、人机介面 用户界面<br>variable 变数（相对於常数 const） 变量<br>vector 向量（一种容器，有点类似 array） 向量、矢量<br>viable 可实行的、可行的 可行的<br>viable function 可行函式 可行函数<br>（从 candidate functions 中挑出者）<br>video 视讯 视频<br>view (1) 视图<br>(document/view) 文档/视图<br>view (2) 映件<br>virtual function 虚拟函式 虚函数<br>virtual machine 虚拟机器 虚拟机<br>virtual memory 虚拟记忆体 虚内存, 虚存<br>volatile 易挥发的、易变的<br>vowel 母音 元音字母<br>window 视窗 窗口<br>window function 视窗函式 窗口函数<br>window procedure 视窗函式 窗口过程<br>word 字 单词<br>word processor 文书处理器 字处理器<br>wrapper 外覆、外包 包装absence 缺席<br>access 访问存取通路进入<br>achieve 实现完成<br>acquire 获得<br>adjacency list method 邻接表表示法<br>adjacency matrix method 邻接矩阵表示法<br>algorithm 算法<br>allocate 留下分配<br>analog 推论<br>append 添加<br>archive 档案归档<br>array 数组<br>assign 分配<br>assume 假设<br>assurance 确信信任<br>ATM(asynchronous transfer mode) 异步传输模式<br>b.. real programs kernels 实程序核心程序<br>b.. toy benchmark synthetic benchmark 简单基准程序复合基准程序<br>balance 平衡<br>bandwidth 带宽<br>batch 一批一组<br>benchmark 基准测试程序<br>best-fit algorithm 最佳适应算法<br>BFS(breadth first search) 广度优先搜索法<br>binary 二进制<br>binary relation 二元关系<br>binary tree 二叉树<br>bit series 比特序列<br>black-box white-box 黑盒白盒<br>block miss 块失效<br>blocked 阻塞(等待状态也称阻塞或封锁状态)<br>boundary 界线分界<br>bridge 网桥<br>bubble sort 冒泡排序<br>calculation 计算<br>candidate key 候选键(辅键)<br>capability 能力才能<br>capacity 容量<br>cartesian product 笛卡尔积<br>CASE(com.. aided sof.. engineering) 计算机辅助软件工程<br>CCP(communication control processor) 通信控制处理机<br>cell 信元<br>characteristic 特征特性<br>circuit switching 线路交换<br>circular wait 循环等待<br>CISC(complex instruction set computer) 复杂指令集计算机<br>class 类<br>Client/Server 客户机/服务器<br>clock cycle clock rate 时钟周期时钟频率<br>coaxial cable 同轴电缆<br>cohesion coupling 内聚耦合<br>coincidental logical procedural functional 偶然内聚逻辑内聚过程内聚功能内聚<br>combination 联合配合<br>common 公用的共同的<br>communication 通信<br>complement number 补码<br>component 成分<br>concept 概念观念<br>condition 情况状况<br>conform 符合<br>consist 组成存在<br>constrain 约束<br>contain 包含<br>correspond (corresponding) 相符合(相应的一致的)<br>CPETT 计算机性能评价工具与技术<br>CPI 每条指令需要的周期数<br>CSMA/CD 带冲突检测的载波监听多路访问<br>cursor 游标<br>cyclic redundency check 循环冗余检校<br>database: integrity consistency restory 完整性一致性可恢复性<br>database: security efficiency 数据库设计的目标: 安全性效率<br>deadlock: mutual exclusion 死锁条件: 互斥<br>deadlock: circular wait no preemption 死锁条件: 循环等待狗熊先权<br>decimal 十进位的<br>decision 决定判断<br>decomposition 双重的混合的<br>decrease 减少<br>definition 定义<br>definition phase 定义阶段<br>demonstrate 证明<br>design phase 设计阶段<br>determine 限定<br>development phase 开发阶段<br>DFS(depth first search) 深度优先搜索法<br>diagram 图表<br>Difference Manchester 差分曼彻斯特<br>directed graph undirected graph 有向图无向图<br>distinguish 辩认区别<br>distributed system 分布式系统<br>divide division 分开除除法<br>divide union intersection difference 除并交差<br>document 文件文档<br>DQDB(distributed queue dual bus) 分布队列双总线<br>draw 绘制<br>dual 二元的双的<br>dynamic design process 动态定义过程<br>element 元素要素<br>elevator (scan) algorithm 电梯算法又称扫描算法<br>encapsulation inheritance 封装(压缩) 继承(遗传)<br>encode 译成密码<br>entity 实体<br>entity integrity rule 实体完整性规则<br>equal 相等的<br>equation 方程式等式<br>estimate 估计判断<br>Ethernet 以太网<br>evolution 发展演化<br>exceed 超过<br>exchange sort 交换排序<br>exclusive locks 排它锁(简记为X 锁)<br>execute 实现执行<br>exhibit 表现展示陈列<br>existence 存在发生<br>expertise 专门技术<br>external(internal) fragmentation 外(内)碎片<br>fault page fault 中断过错页中断<br>FDDI(fiber distributed data interface) 光纤分布式数据接口<br>FDM(frequency division multiplexing 频分多路复用<br>fiber optic cable 光缆<br>FIFO replacement policy 先进先出替换算法<br>figure 数字图形<br>final 最后的最终的<br>first normal form 第一范式<br>floppy 活动盘片(软盘)<br>foreign key domain tuple 外来键值域元组<br>form 形状形式<br>formula 公式表达式<br>foundation 基础根据基金<br>frame page frame 帧结构页结构<br>frequency 频率<br>FTP 文件传送服务<br>function 函数<br>functionally dependent 函数依赖<br>gateway 网间连接器<br>gather 聚集采集推测<br>general-purose registers 通用寄存器<br>generate 产生<br>grade 等级标准<br>graph (graphic) 图<br>Gropher 将用户的请求自动转换成<br>FTP<br>guarantee 保证确定<br>hash table hash function collision 哈希表哈希函数(散列函数) 碰撞<br>HDLC 面向比特型数据链路层协议<br>hit rate 命中率<br>host 主计算机<br>host language statement 主语言语句<br>hypertext 超级文本<br>illustrate 举例说明<br>independent 独立的<br>index 索引<br>indirect 间接的<br>influence 有影响的<br>initially 最初开头<br>insertion sort 插入排序<br>instruction format 指令格式<br>instruction set 指令集<br>interface 接口分界面连接体<br>internal 内部的内在的<br>interrupt 中断<br>IPC 工业过程控制<br>ISAM VSAM 索引顺序存取方法虚拟存储存取方法<br>join natural join semijoin 连接自然连接半连接<br>judgment 判断<br>kernel executive supervisor user 核心执行管理用户<br>kernels 核心程序<br>key comparison 键(码)值比较<br>LAN(local area network) 局域网<br>load 负载载入<br>logical functional 逻辑内聚功能内聚<br>longitudinal 水平的<br>loop 圈环状<br>maintain 维护保养供给<br>maintanence phase 维护(保养)阶段<br>MAN(metropclitan area network) 城域网<br>Manchester 曼彻斯特<br>map 地图映射图<br>matrix 矩阵点阵<br>memory reference 存储器参量<br>message switching 报文交换<br>method 方法技巧<br>MFLOP(million floating point operate p s 每秒百万次浮点运算<br>minimum 最小的<br>MIPS(millions of instructions per second 每秒百万条指令<br>module 单位基准<br>monitor (model benchmark physcal) method 监视(模型基准物理)法<br>multilevel data flow chart 分层数据流图<br>multiple 复合的多样的<br>multiple-term formula 多项式<br>multiplexing 多路复用技术<br>multiplication 乘法<br>mutual exclusion 互相排斥<br>non-key attributes 非码属性<br>null 零空<br>Nyquist 奈奎斯特<br>object oriented 对象趋向的使适应的<br>object oriented analysis 面向对象的分析<br>object oriented databases 面向对象数据库<br>object oriented design 面向对象的设计<br>object oriented implementation 面向对象的实现<br>obtain 获得<br>occupy 占有居住于<br>occurrence 事件<br>odd 奇数的<br>one-dimensional array 一维数组<br>OODB(object oriented data base) 面向对象数据库<br>OOM(object oriented method) 面向对象的方法<br>oom: information object message class 信息对象消息类<br>oom: instance method message passing 实例方法消息传递<br>open system 开放系统<br>operand 操作数<br>optimized 尽量充分利用<br>optional 任选的非强制的<br>organize 组织<br>overflow 溢出<br>overlapping register windows 重叠寄存器窗口<br>packet switching 报文分组交换<br>page fault 页面失效<br>page replacement algorithm 页替换算法<br>paged segments 段页式管理<br>PCB(process control block) 进程控制块<br>peer entites 对等实体<br>perform 表演执行<br>period 时期周期<br>permit 许可准许<br>phase 阶段局面状态<br>physical data link network layer 物理层数据链路层网络层<br>pipeline 管道<br>platter track cluster 面磁道簇<br>predicate 谓语<br>preemption 有优先权的<br>prefix (Polish form) 前缀(波兰表达式)<br>preorder inorder postorder 前序中序后序<br>presentation application layer 表示层应用层<br>primary key attributes 主码属性<br>principle 原则方法<br>procedural coincidental 过程内聚偶然内聚<br>process 过程加工处理<br>proficient 精通<br>program debugging 程序排错<br>projection selection join 投影选择连接<br>proposition 主张建议陈述<br>protocal 协议<br>prototype 原型样板<br>prototyping method (model) 原型化周期(模型)<br>pseudo-code 伪码(又称程序设计语言PDL)<br>punctuation 标点<br>purpose 目的意图<br>quality 质量品质<br>queue 队列<br>ready blocked running 就绪阻塞(等待) 运行<br>real page number 实页数<br>real programs 实程序<br>redirected 重定向<br>redundency 冗余<br>reference integrity rule 引用完整性规则<br>referred to as 把…..当作<br>regarde 关于<br>register(registry) 寄存器登记注册挂号<br>regularly 定期的常规的<br>relation 关系<br>relay 中继<br>reliability 可信赖的<br>repeater 中继器<br>replacement 替换<br>represent 代表象征<br>request indication response confirm 请求指示响应确认<br>resource 资源<br>respon 回答响应<br>RISC(reduced instruction set computer) 精简指令集计算机<br>robustness 健壮性<br>router 路由器<br>scheme 计划图表<br>sector head cylinder 扇区磁头柱面<br>selection sort 选择排序<br>semaphores 信号<br>sequence 序列顺序<br>Shanon 香农<br>share locks 共享锁(简记为S 锁)<br>short path critical path 最短路径关键路径<br>signal 信号<br>signal-to-noise ratio 信噪比B/N<br>similar 相似的<br>SISD SIMD MISD MIMD <em> 指令流</em> 数据流<br>SMDS 交换多兆位数据服务<br>software development phase 软件开发阶段<br>software engineering 软件工程<br>software portability 软件可移植性<br>software requirements specification 软件需求说明书<br>solve 解决<br>sort 种类方式分类排序<br>spanning tree 跨越树(生成树)<br>specify 指定说明<br>speedup 加速比<br>SSTF(shortest-seek-time-first) 最短寻道时间优先(磁盘调度算法)<br>stack strategy non-stack strategy 堆栈型非堆栈型<br>starvation 饥饿匮乏<br>statement 陈述<br>storage 贮藏库<br>store procdures 存储过程<br>strategy 战略兵法计划<br>strict 严密的<br>styles 文体风格<br>subgroup 循环的<br>subset 子集子设备<br>superclass subclass abstract class 超类子类抽象类<br>suppose 假定<br>symbolic 象征的符号的<br>synthetic benchmark 复合基准程序<br>system testing 系统测试<br>Systolic 脉动阵列<br>table 表表格桌子<br>TDM(time division multiplexing) 时分多路复用<br>technology 工艺技术<br>terminal 终端<br>testing phase 测试阶段<br>theta select project theta join θ选择投影θ连接<br>time complexity 时间复杂度<br>timestamping 时标技术<br>Token Bus 令牌总线<br>Token Ring 令牌环<br>toy benchmark 简单基准程序<br>transaction 事务记录<br>transmite 传送<br>transport layer session layer 传输层会话层<br>traversal method 遍历方法<br>triggers store procedures 触发器存储过程<br>(ORACLE 系统)<br>underflow 下溢<br>unique 唯一的<br>unit system acceptance testing 单元测试系统测试确认测试<br>universe 宇宙全世界<br>update 更新<br>value [数]值<br>variable 变量<br>vertical 垂直的<br>vertice edge 顶点(结点) 边<br>via 经过<br>virtual memory system 虚拟存储系统<br>WAN(wide area network) 广域网<br>waterfall model 瀑布模型<br>white noise 白噪声<br>write-back(copy-back) 写回法<br>write-through(store-through) 写直达法<br>WWW(world wide web) 万维网</p>\n<h2 id=\"（IT）词汇\"><a href=\"#（IT）词汇\" class=\"headerlink\" title=\"（IT）词汇\"></a>（IT）词汇</h2><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>Active-matrix主动距陈<br>Adapter cards适配卡<br>Advanced application高级应用<br>Analytical graph分析图表<br>Analyze分析<br>Animations动画<br>Application software 应用软件<br>Arithmetic operations算术运算<br>Audio-output device音频输出设备<br>Access time存取时间<br>access存取<br>accuracy准确性<br>ad network cookies广告网络信息记录软件<br>Add-ons附软件<br>Address地址<br>Agents代理<br>Analog signals模拟信号<br>Applets程序<br>Asynchronous communications port异步通信端口<br>Attachment附件</p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p>Bar code条形码<br>Bar code reader条形码读卡器<br>Basic application基础程序<br>Binary coding schemes二进制译码方案<br>Binary system二进制系统<br>Bit比特<br>Browser浏览器<br>Bus line总线<br>Backup tape cartridge units备份磁带盒单元<br>Bandwidth带宽<br>Bluetooth蓝牙<br>Broadband宽带<br>Browser浏览器<br>Business-to-business企业对企业电子商务<br>Business-to-consumer企业对消费者<br>Bus总线</p>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p>Cables连线<br>Cell单元箱<br>Chain printer链式打印机<br>Character and recognition device字符标识识别设备<br>Chart图表<br>Chassis支架<br>Chip芯片<br>Clarity清晰度<br>Closed architecture封闭式体系结构<br>Column列<br>Combination key结合键<br>computer competency计算机能力<br>connectivity连接，结点<br>Continuous-speech recognition system连续语言识别系统<br>Control unit操纵单元<br>Cordless or wireless mouse无线鼠标<br>Cable modems有线调制解调器<br>carpal tunnel syndrome腕骨神经综合症<br>CD-ROM可记录光盘<br>CD-RW可重写光盘<br>CD-R可记录压缩光盘<br>Channel信道<br>Chat group谈话群组<br>chlorofluorocarbons(CFCs) ]氯氟甲烷<br>Client客户端<br>Coaxial cable同轴电缆<br>cold site冷战<br>Commerce servers商业服务器<br>Communication channel信道<br>Communication systems信息系统<br>Compact disc rewritable<br>Compact disc光盘<br>computer abuse amendments act of 19941994计算机滥用法案<br>computer crime计算机犯罪<br>computer ethics计算机道德<br>computer fraud and abuse act of 1986计算机欺诈和滥用法案<br>computer matching and privacy protection act of 1988计算机查找和隐私保护法案<br>Computer network计算机网络<br>computer support specialist计算机支持专家<br>computer technician计算机技术人员<br>computer trainer计算机教师<br>Connection device连接设备<br>Connectivity连接<br>Consumer-to-consumer个人对个人<br>cookies-cutter programs信息记录截取程序<br>cookies信息记录程序<br>cracker解密高手<br>cumulative trauma disorder积累性损伤错乱<br>Cybercash电子现金<br>Cyberspace计算机空间<br>cynic愤世嫉俗者</p>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p>Database数据库<br>database files数据库文件<br>Database manager数据库管理<br>Data bus数据总线<br>Data projector数码放映机<br>Desktop system unit台式电脑系统单元<br>Destination file目标文件<br>Digital cameras数码照相机<br>Digital notebooks数字笔记本<br>Digital bideo camera数码摄影机<br>Discrete-speech recognition system不连续语言识别系统<br>Document文档<br>document files文档文件<br>Dot-matrix printer点矩阵式打印机<br>Dual-scan monitor双向扫描显示器<br>Dumb terminal非智能终端<br>data security数据安全<br>Data transmission specifications数据传输说明<br>database administrator数据库管理员<br>Dataplay数字播放器<br>Demodulation解调<br>denial of service attack拒绝服务攻击<br>Dial-up service拨号服务<br>Digital cash数字现金<br>Digital signals数字信号<br>Digital subscriber line数字用户线路<br>Digital versatile disc数字化通用磁盘<br>Digital video disc数字化视频光盘<br>Direct access直接存取<br>Directory search目录搜索<br>disaster recovery plan灾难恢复计划<br>Disk caching磁盘驱动器高速缓存<br>Diskette磁盘<br>Disk磁碟<br>Distributed data processing system分部数据处理系统<br>Distributed processing分布处理<br>Domain code域代码<br>Downloading下载<br>DVD 数字化通用磁盘<br>DVD-R 可写DVD<br>DVD-RAM DVD随机存取器<br>DVD-ROM 只读DVD</p>\n<h3 id=\"E\"><a href=\"#E\" class=\"headerlink\" title=\"E\"></a>E</h3><p>e-book电子阅读<br>Expansion cards扩展卡<br>end user终端用户<br>e-cash电子现金<br>e-commerce电子商务<br>electronic cash电子现金<br>electronic commerce电子商务<br>electronic communications privacy act of1986电子通信隐私法案<br>encrypting加密术<br>energy star能源之星<br>Enterprise computing企业计算化<br>environment环境<br>Erasable optical disks可擦除式光盘<br>ergonomics人类工程学<br>ethics道德规范<br>External modem外置调制解调器<br>extranet企业外部网</p>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p>Fax machine传真机<br>Field域<br>Find搜索<br>FireWire port port火线端口<br>Firmware固件<br>Flash RAM闪存<br>Flatbed scanner台式扫描器<br>Flat-panel monitor纯平显示器<br>floppy disk软盘<br>Formatting toolbar格式化工具条<br>Formula公式<br>Function函数<br>fair credit reporting act of 1970公平信用报告法案<br>Fiber-optic cable光纤电缆<br>File compression文件压缩<br>File decompression文件解压缩<br>filter过滤<br>firewall防火墙<br>firewall防火墙<br>Fixed disk固定硬盘<br>Flash memory闪存<br>Flexible disk可折叠磁盘<br>Floppies磁盘<br>Floppy disk软盘<br>Floppy-disk cartridge磁盘盒<br>Formatting格式化<br>freedom of information act of 1970信息自由法案<br>frustrated受挫折<br>Full-duplex communication全双通通信</p>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p>General-purpose application通用运用程序<br>Gigahertz千兆赫<br>Graphic tablet绘图板<br>green pc绿色个人计算机</p>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p>handheld computer手提电脑<br>Hard copy硬拷贝<br>hard disk硬盘<br>hardware硬件<br>Help帮助<br>Host computer主机<br>Home page主页<br>Hyperlink超链接<br>hacker黑客<br>Half-duplex communication半双通通信<br>Hard disk硬盘<br>Hard-disk cartridge硬盘盒<br>Hard-disk pack硬盘组<br>Head crash磁头碰撞<br>header标题<br>help desk specialist帮助办公专家<br>helper applications帮助软件<br>Hierarchical network层次型网络<br>history file历史文件<br>hits匹配记录<br>horizontal portal横向用户<br>hot site热战<br>Hybrid network混合网络<br>hyperlinks超连接</p>\n<h3 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"I\"></a>I</h3><p>Image capturing device图像获取设备<br>information technology信息技术<br>Ink-jet printer墨水喷射印刷机<br>Integrated package综合性组件<br>Intelligent terminal智能终端设备<br>Intergrated circuit集成电路<br>Interface cards接口卡<br>Internal modem内部调制解调器<br>internet telephony网络电话<br>internet terminal互联网终端<br>Identification识别<br>i-drive网络硬盘驱动器<br>illusion of anonymity匿名幻想<br>index search索引搜索<br>information pushers信息推送器<br>initializing 初始化<br>instant messaging计时信息<br>internal hard disk内置硬盘<br>Internal modem内部调制解调器<br>Internet hard drive 网络硬盘驱动器<br>intranet企业内部网</p>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p>joystick操纵杆</p>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p>keyword search关键字搜索</p>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p>laser printer激光打印机<br>Layout files版式文件<br>Light pen光笔<br>Locate定位<br>Logical operations逻辑运算<br>Lands凸面<br>Line of sight communication视影通信<br>Low bandwidth低带宽<br>lurking潜伏</p>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p>Main board主板<br>Mark sensing标志检测<br>Mechanical mouse机械鼠标<br>Memory内存<br>Menu菜单<br>Menu bar菜单条<br>Microprocessor微处理器<br>Microseconds微秒<br>Modem card调制解调器<br>Monitor显示器<br>Motherboard主板<br>Mouse 鼠标<br>Multifunctional device多功能设备<br>Magnetic tape reels磁带卷<br>Magnetic tape streamers磁带条<br>mailing list邮件列表<br>Medium band媒质带宽<br>metasearch engine整合搜索引擎<br>Microwave微波<br>Modem解调器<br>Modulation解调</p>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p>Net PC网络计算机<br>Network adapter card网卡<br>Network personal computer网络个人电脑<br>Network terminal 网络终端<br>Notebook computer笔记本电脑<br>Notebook system unit笔记本系统单元<br>Numeric entry数字输入<br>na?ve天真的人<br>national information infrastructure protection act of1996国际信息保护法案<br>national service provider全国性服务供应商<br>Network architecture网络体系结构<br>Network bridge网桥<br>Network gateway网关<br>network manager网络管理员<br>newsgroup新闻组<br>no electronic theft act of1997无电子盗窃法<br>Node节点<br>Nonvolatile storage非易失性存储</p>\n<h3 id=\"O\"><a href=\"#O\" class=\"headerlink\" title=\"O\"></a>O</h3><p>Object embedding对象嵌入<br>Object linking目标链接<br>Open architecture开放式体系结构<br>Optical disk光盘<br>Optical mouse光电鼠标<br>Optical scanner光电扫描仪<br>Outline大纲<br>off-line browsers离线浏览器<br>Online storage联机存储</p>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p>palmtop computer掌上电脑<br>Parallel ports并行端口<br>Passive-matrix被动矩阵<br>PC card个人计算机卡<br>Personal laser printer个人激光打印机<br>Personal video recorder card个人视频记录卡<br>Photo printer照片打印机<br>Pixel像素<br>Platform scanner平版式扫描仪<br>Plotter绘图仪<br>Plug and play即插即用<br>Plug-in boards插件卡<br>Pointer指示器<br>Pointing stick指示棍<br>Port端口<br>Portable scanner便携式扫描仪<br>Presentation files演示文稿<br>Presentation graphics电子文稿程序<br>Primary storage主存<br>Procedures规程<br>Processor处理机<br>Programming control lanugage程序控制语言<br>Packets数据包<br>Parallel data transmission平行数据传输<br>Peer-to-peer network system得等网络系统<br>person-person auction site个人对个人拍卖站点<br>physical security物理安全<br>Pits凹面<br>plug-in插件程序<br>Polling轮询<br>privacy隐私权<br>proactive主动地<br>programmer程序员<br>Protocols协议<br>provider供应商<br>proxy server代理服务<br>pull products推取程序<br>push products推送程序</p>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p>RAM cache随机高速缓冲器<br>Range范围<br>Record记录<br>Relational database关系数据库<br>Replace替换<br>Resolution分辨率<br>Row行<br>Read-only只读<br>Reformatting重组<br>regional service provider区域性服务供应商<br>repetitive motion injury反复性动作损伤<br>reverse directory反向目录<br>right to financial privacy act of 1979财产隐私法案</p>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p>Scanner扫描器<br>Search查找<br>Secondary storage device助存储设备<br>Semiconductor半导体<br>Serial ports串行端口<br>Server服务器<br>Shared laser printer共享激光打印机<br>Sheet表格<br>Silicon chip硅片<br>Slots插槽<br>Smart card智能卡<br>Soft copy软拷贝<br>Software suite软件协议<br>Sorting排序分类<br>Source file源文件<br>Special-purpose application专用文件<br>Spreadsheet电子数据表<br>Standard toolbar标准工具栏<br>Supercomputer巨型机<br>System cabine 系统箱<br>System clock时钟<br>System software系统软件<br>Satellite/air connection services卫星无线连接服务<br>search engines搜索引擎<br>search providers搜索供应者<br>search services 搜索服务器<br>Sectors扇区<br>security安全<br>Sending and receiving devices发送接收设备<br>Sequential access顺序存取<br>Serial data transmission单向通信<br>signature line签名档<br>snoopware监控软件<br>software copyright act of1980软件版权法案<br>software piracy软件盗版<br>Solid-state storage固态存储器<br>specialized search engine专用搜索引擎<br>spiders网页爬虫<br>spike尖峰电压<br>Star network星型网<br>Strategy方案<br>subject主题<br>subscription address预定地址<br>Superdisk超级磁盘<br>surfing网上冲浪<br>surge protector浪涌保护器<br>systems analyst系统分析师</p>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p>Table二维表<br>Telephony电话学<br>Television boards电视扩展卡<br>Terminal 终端<br>Template模板<br>Text entry文本输入<br>Thermal printer 热印刷<br>Thin client瘦客<br>Toggle key触发键<br>Toolbar工具栏<br>Touch screen触摸屏<br>Trackball追踪球<br>TV tuner card电视调谐卡<br>Two-state system双状态系统<br>technical writer技术协作者<br>technostress重压技术<br>telnet远程登录<br>Time-sharing system分时系统<br>Topology拓扑结构<br>Tracks磁道<br>traditional cookies传统的信息记录程序<br>Twisted pair双绞线</p>\n<h3 id=\"U\"><a href=\"#U\" class=\"headerlink\" title=\"U\"></a>U</h3><p>Unicode统一字符标准<br>uploading上传<br>usenet世界性新闻组网络</p>\n<h3 id=\"V\"><a href=\"#V\" class=\"headerlink\" title=\"V\"></a>V</h3><p>Virtual memory虚拟内存<br>Video display screen视频显示屏<br>Voice recognition system声音识别系统<br>vertical portal纵向门户<br>video privacy protection act of 1988视频隐私权保护法案<br>virus checker病毒检测程序<br>virus病毒<br>Voiceband音频带宽<br>Volatile storage易失性存储<br>voltage surge冲击性电压</p>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p>Wand reader 条形码读入<br>Web 网络<br>Web appliance 环球网设备<br>Web page网页<br>Web site address网络地址<br>Web terminal环球网终端<br>Webcam摄像头<br>What-if analysis假定分析<br>Wireless revolution无线革命<br>Word字长<br>Word processing文字处理<br>Word wrap自动换行<br>Worksheet file 工作表文件<br>web auctions网上拍卖<br>web broadcasters网络广播<br>web portals门户网站<br>web sites网站<br>web storefront creation packages网上商店创建包<br>web storefronts网上商店<br>web utilities网上应用程序<br>web-downloading utilities网页下载应用程序<br>webmaster web站点管理员<br>web万维网<br>Wireless modems无线调制解调器<br>wireless service provider无线服务供应商<br>world wide web万维网<br>worm蠕虫病毒<br>Write-protect notch写保护口</p>\n<h2 id=\"其他缩写\"><a href=\"#其他缩写\" class=\"headerlink\" title=\"其他缩写\"></a>其他缩写</h2><p>DVD digital bersatile 数字化通用光盘<br>IT ingormation technology信息技术<br>CD compact disc 压缩盘<br>PDA personal digital assistant个人数字助理<br>RAM random access memory随机存储器<br>WWW World Wide Web 万维网<br>DBMS database management system数据库管理系统<br>HTML Hypertext Markup Language超文本标示语言<br>OLE object linking and embedding对象链接潜入<br>SQL structured query language结构化查询语言<br>URL uniform resouice locator统一资源定位器<br>AGP accelerated graphics port加速图形接口<br>ALU arithmetic-logic unit算术逻辑单元<br>CPU central processing unit中央处理器<br>CMOS complementary metal-oxide semiconductor互补金属氧化物半导体<br>CISC complex instruction set computer复杂指令集计算机<br>HPSB high performance serial bus高性能串行总线<br>ISA industry standard architecture工业标准结构体系<br>PCI peripheral component interconnect外部设备互连总线<br>PCMCIA Personal Memory Card International Association个人计算机存储卡国际协会<br>RAM random-access memory随机存储器<br>ROM read-only memory只读存储器<br>USB universal serial bus通用串行总线<br>CRT cathode-ray tube阴极射线管<br>HDTV high-definition television高清晰度电视<br>LCD liquid crystal display monitor液晶显示器<br>MICRmagnetic-ink character recognition磁墨水字符识别器<br>OCR optical-character recognition光电字符识别器<br>OMR optical-mark recognition光标阅读器<br>TFT thin film transistor monitor薄膜晶体管显示器</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Zip disk压缩磁盘<br>Domain name system（DNS）域名服务器<br>file transfer protocol(FTP)文件传送协议<br>hypertext markup language(HTML)超文本链接标识语言<br>Local area network（LAN）局域网<br>internet relay chat(IRC)互联网多线交谈<br>Metropolitan area network(MAN)城域网<br>Network operation system(NOS)网络操作系统<br>uniform resource locator(URL)统一资源定位器<br>Wide area network(WAN)广域网</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机英语词汇\"><a href=\"#计算机英语词汇\" class=\"headerlink\" title=\"计算机英语词汇\"></a>计算机英语词汇</h1><h2 id=\"第一部分、计算机算法常用术语中英对照\"><a href=\"#第一部分、计算机算法常用术语中英对照\" class=\"headerlink\" title=\"第一部分、计算机算法常用术语中英对照\"></a>第一部分、计算机算法常用术语中英对照</h2><p>Data Structures 基本数据结构<br>Dictionaries 字典<br>Priority Queues 堆<br>Graph Data Structures 图<br>Set Data Structures 集合<br>Kd-Trees 线段树<br>Numerical Problems 数值问题<br>Solving Linear Equations 线性方程组<br>Bandwidth Reduction 带宽压缩<br>Matrix Multiplication 矩阵乘法<br>Determinants and Permanents 行列式<br>Constrained and Unconstrained Optimization 最值问题<br>Linear Programming 线性规划<br>Random Number Generation 随机数生成<br>Factoring and Primality Testing 因子分解/质数判定<br>Arbitrary Precision Arithmetic 高精度计算<br>Knapsack Problem 背包问题<br>Discrete Fourier Transform 离散Fourier变换<br>Combinatorial Problems 组合问题<br>Sorting 排序<br>Searching 查找<br>Median and Selection 中位数<br>Generating Permutations 排列生成<br>Generating Subsets 子集生成<br>Generating Partitions 划分生成<br>Generating Graphs 图的生成<br>Calendrical Calculations 日期<br>Job Scheduling 工程安排<br>Satisfiability 可满足性<br>Graph Problems – polynomial 图论-多项式算法<br>Connected Components 连通分支<br>Topological Sorting 拓扑排序<br>Minimum Spanning Tree 最小生成树<br>Shortest Path 最短路径<br>Transitive Closure and Reduction 传递闭包<br>Matching 匹配<br>Eulerian Cycle / Chinese Postman Euler回路/中国邮路<br>Edge and Vertex Connectivity 割边/割点<br>Network Flow 网络流<br>Drawing Graphs Nicely 图的描绘<br>Drawing Trees 树的描绘<br>Planarity Detection and Embedding 平面性检测和嵌入<br>Graph Problems – hard 图论-NP问题<br>Clique 最大团<br>Independent Set 独立集<br>Vertex Cover 点覆盖<br>Traveling Salesman Problem 旅行商问题<br>Hamiltonian Cycle Hamilton回路<br>Graph Partition 图的划分<br>Vertex Coloring 点染色<br>Edge Coloring 边染色<br>Graph Isomorphism 同构<br>Steiner Tree Steiner树<br>Feedback Edge/Vertex Set 最大无环子图<br>Computational Geometry 计算几何<br>Convex Hull 凸包<br>Triangulation 三角剖分<br>Voronoi Diagrams Voronoi图<br>Nearest Neighbor Search 最近点对查询<br>Range Search 范围查询<br>Point Location 位置查询<br>Intersection Detection 碰撞测试<br>Bin Packing 装箱问题<br>Medial-Axis Transformation 中轴变换<br>Polygon Partitioning 多边形分割<br>Simplifying Polygons 多边形化简<br>Shape Similarity 相似多边形<br>Motion Planning 运动规划<br>Maintaining Line Arrangements 平面分割<br>Minkowski Sum Minkowski和<br>Set and String Problems 集合与串的问题<br>Set Cover 集合覆盖<br>Set Packing 集合配置<br>String Matching 模式匹配<br>Approximate String Matching 模糊匹配<br>Text Compression 压缩<br>Cryptography 密码<br>Finite State Machine Minimization 有穷自动机简化<br>Longest Common Substring 最长公共子串<br>Shortest Common Superstring 最短公共父串<br>DP——Dynamic Programming——动态规划<br>recursion —— 递归 </p>\n<h2 id=\"第二部分、编程词汇\"><a href=\"#第二部分、编程词汇\" class=\"headerlink\" title=\"第二部分、编程词汇\"></a>第二部分、编程词汇</h2><p>A2A integration A2A整合<br>abstract 抽象的<br>abstract base class (ABC)抽象基类<br>abstract class 抽象类<br>abstraction 抽象、抽象物、抽象性<br>access 存取、访问<br>access level访问级别<br>access function 访问函数<br>account 账户<br>action 动作<br>activate 激活<br>active 活动的<br>actual parameter 实参<br>adapter 适配器<br>add-in 插件<br>address 地址<br>address space 地址空间<br>address-of operator 取地址操作符<br>ADL (argument-dependent lookup)<br>ADO(ActiveX Data Object)ActiveX数据对象<br>advanced<br>aggregation 聚合、聚集<br>algorithm 算法<br>alias 别名<br>align 排列、对齐<br>allocate 分配、配置<br>allocator分配器、配置器<br>angle bracket 尖括号<br>annotation 注解、评注<br>API (Application Programming Interface) 应用(程序)编程接口<br>app domain (application domain)应用域<br>application 应用、应用程序<br>application framework 应用程序框架<br>appearance 外观<br>append 附加<br>architecture 架构、体系结构<br>archive file 归档文件、存档文件<br>argument引数(传给函式的值)。参见parameter<br>array 数组<br>arrow operator 箭头操作符<br>ASP(Active Server Page)活动服务器页面<br>ASP.NET worker process ASP.NET工作者进程<br>assembly 装配件、配件<br>assembly language 汇编语言<br>assembly manifest 装配件清单<br>assert(ion) 断言<br>assign 赋值<br>assignment 赋值、分配<br>assignment operator 赋值操作符<br>associated 相关的、相关联的<br>associative container 关联式容器(对应sequential container)<br>asynchronous 异步的<br>atomic 原子的<br>atomic operation 原子操作<br>attribute 特性、属性<br>authentication service 验证服务<br>authorization 授权<br>audio 音频<br>A.I. 人工智能<br>B2B integration B2B整合、B2B集成(business-to-business integration)<br>background 背景、后台(进程)<br>backward compatible 向后兼容、向下兼容<br>backup 备份<br>backup device备份设备<br>backup file 备份文件<br>bandwidth 带宽<br>base class 基类<br>base type 基类型<br>batch 批处理<br>BCL (base class library)基类库<br>binary 二进制<br>binary search 二分查找<br>binary tree 二叉树<br>binary function 双参函数<br>binary large object二进制大对象<br>binary operator 二元操作符<br>binding 绑定<br>bit 位<br>bitmap 位图<br>bitwise 按位…<br>bitwise copy 为单元进行复制；位元逐一复制,按位拷<br>bitwise operation 按位运算<br>block 块、区块、语句块<br>bookkeeping 簿记<br>boolean 布林值(真假值，true或false)<br>border 边框<br>bounds checking 边界检查<br>boxing 装箱、装箱转换<br>brace (curly brace) 大括号、花括号<br>bracket (square brakcet) 中括号、方括号 </p>\n<p>breakpoint 断点<br>browser applications 浏览器应用(程序)<br>browser-accessible application 可经由浏览器访问的应用程序<br>build 编连(专指编译和连接<br>built-in 内建、内置<br>bus 总线<br>business 业务、商务(看场合)<br>business Logic 业务逻辑<br>business rules 业务规则<br>buttons 按钮<br>bug 臭虫<br>by/through 通过<br>byte 位元组(由8 bits组成)<br>cache 高速缓存<br>calendar 日历<br>call 调用<br>callback 回调<br>call-level interface (CLI)调用级接口(CLI)<br>call operator 调用操作符<br>candidate key 候选键 (for database)<br>cascading delete 级联删除 (for database)<br>cascading update 级联更新 (for database)<br>casting 转型、造型转换<br>catalog 目录<br>chain 链(function calls)<br>character 字符<br>character format 字符格式<br>character set 字符集<br>CHECK constraints CHECK约束 (for database)<br>checkpoint 检查点 (for database)<br>check box 复选框<br>check button 复选按钮<br>child class 子类<br>CIL (common intermediate language)通用中间语言、通用中介语言<br>class 类<br>class declaration 类声明<br>class definition 类定义<br>class derivation list 类继承列表<br>class factory 类厂<br>class hierarchy 类层次结构<br>class library 类库<br>class loader 类装载器<br>class template 类模板<br>class template partial specializations 类模板部分特化<br>class template specializations 类模板特化<br>classification 分类<br>clause 子句<br>client application 客户端应用程序<br>client cursor 客户端游标 (for database)<br>code page 代码页<br>cleanup 清理、清除<br>CLI (Common Language Infrastructure) 通用语言基础设施<br>client 客户、客户端<br>client area 客户区<br>client-server 客户机/服务器、客户端/服务器<br>clipboard 剪贴板<br>clone 克隆<br>CLS (common language specification) 通用语言规范<br>code access security 代码访问安全<br>COFF (Common Object File Format) 通用对象文件格式<br>collection 集合<br>COM (Component Object Model) 组件对象模型<br>combo box 组合框<br>command line 命令行<br>comment 注释<br>commit 提交 (for database)<br>communication 通讯<br>compatible 兼容<br>compile time 编译期、编译时<br>compiler 编译器<br>component组件<br>composite index 复合索引、组合索引 (for database)<br>composite key 复合键、组合键 (for database)<br>composition 复合、组合<br>concept 概念<br>concrete具体的<br>concrete class 具体类<br>concurrency 并发、并发机制<br>constraint 约束 (for database)<br>configuration 配置、组态<br>connection 连接 (for database)<br>connection pooling 连接池<br>console 控制台<br>constant 常量<br>construct 构件、成分、概念、构造（for language）<br>constructor (ctor) 构造函数、构造器<br>container 容器<br>containment包容<br>context 环境、上下文<br>control 控件<br>cookie (不译)<br>copy 拷贝<br>CORBA 通用对象请求中介架构(Common Object Request Broker Architecture)<br>cover 覆盖、涵盖<br>create/creation 创建、生成<br>crosstab query 交叉表查询 (for database)<br>CRTP (curiously recurring template pattern)<br>CTS (common type system)通用类型系统<br>cube 多维数据集 (for database)<br>cursor 光标<br>cursor 游标 (for database)<br>custom 定制、自定义<br>data 数据<br>data connection 数据连接 (for database)<br>Data Control Language (DCL) 数据控制语言(DCL) (for database)<br>Data Definition Language (DDL) 数据定义语言(DDL) (for database)<br>data dictionary 数据字典 (for database)<br>data dictionary view 数据字典视图 (for database)<br>data file 数据文件 (for database)<br>data integrity 数据完整性 (for database)<br>data manipulation language (DML)数据操作语言(DML) (for database)<br>data mart 数据集市 (for database)<br>data pump 数据抽取 (for database)<br>data scrubbing 数据清理 (for database)<br>data source 数据源 (for database)<br>Data source name (DSN) 数据源名称(DSN) (for database)<br>data warehouse 数据仓库 (for database)<br>dataset 数据集 (for database)<br>database 数据库 (for database)<br>database catalog 数据库目录 (for database)<br>database diagram 数据关系图 (for database)<br>database file 数据库文件 (for database)<br>database object 数据库对象 (for database)<br>database owner 数据库所有者 (for database)<br>database project 数据库工程 (for database)<br>database role 数据库角色 (for database)<br>database schema 数据库模式、数据库架构 (for database)<br>database scrīpt 数据库脚本 (for database)<br>data-bound 数据绑定 (for database)<br>data-aware control数据感知控件 (for database)<br>data member 数据成员、成员变量<br>dataset 数据集 (for database)<br>data source 数据源 (for database)<br>data structure数据结构<br>data table 数据表 (for database)<br>datagram 数据报文<br>DBMS (database management system)数据库管理系统 (for database)<br>DCOM (distributed COM)分布式COM<br>dead lock 死锁 (for database)<br>deallocate 归还<br>debug 调试<br>debugger 调试器<br>decay 退化<br>decision support 决策支持<br>declaration 声明<br>declarative referential integrity (DRI)声明引用完整性(DRI) (for database)<br>deduction 推导<br>DEFAULT constraint默认约束 (for database)<br>default database 默认数据库 (for database)<br>default instance 默认实例 (for database)<br>default result set 默认结果集 (for database)<br>default 缺省、默认值<br>defer 推迟<br>definition 定义<br>delegate 委托<br>delegation 委托<br>dependent name<br>deploy 部署<br>dereference 解引用<br>dereference operator (提领)运算子<br>derived class 派生类<br>design by contract 契约式设计<br>design pattern 设计模式<br>destroy 销毁<br>destructor(dtor)析构函数、析构器<br>device 设备<br>DHTML (dynamic HyperText Markup Language)动态超文本标记语言<br>dialog 对话框<br>digest 摘要<br>digital 数字的<br>DIME (Direct Internet Message Encapsulation)直接Internet消息封装<br>directive (编译)指示符<br>directory 目录<br>dirty pages脏页 (for database)<br>dirty read 脏读 (for database)<br>disassembler 反汇编器<br>DISCO (Discovery of Web Services)Web Services的查找<br>disk 盘<br>dispatch 调度、分派、派发（我喜欢“调度”）<br>DISPID (Dispatch Identifier)分派标识符<br>distributed computing 分布式计算<br>distributed query 分布式查询 (for database)<br>DNA (Distributed interNet Application) 分布式网间应用程序<br>document 文档<br>DOM (Document Object Model)文档对象模型<br>dot operator (圆)点操作符<br>driver 驱动(程序)<br>DTD (document type definition) 文档类型定义<br>double-byte character set (DBCS)双字节字符集(DBCS)<br>dump 转储<br>dump file 转储文件<br>dynamic cursor 动态游标 (for database)<br>dynamic filter 动态筛选 (for database)<br>dynamic locking 动态锁定 (for database)<br>dynamic recovery 动态恢复 (for database)<br>dynamic snapshot 动态快照 (for database)<br>dynamic SQL statements 动态SQL语句 (for database)<br>dynamic assembly 动态装配件、动态配件<br>dynamic binding 动态绑定<br>EAI (enterprise application integration)企业应用程序集成(整合)<br>EBCO (empty base class optimization) 空基类优化（机制）<br>e-business 电子商务<br>EDI (Dlectronic Data Interchange)电子数据交换<br>efficiency 效率<br>efficient 高效<br>end-to-end authentication 端对端身份验证<br>end user 最终用户<br>engine 引擎<br>entity 实体<br>encapsulation 封装<br>enclosing class 外围类别(与巢状类别 nested class有关)<br>enum (enumeration) 枚举<br>enumerators 枚举成员、枚举器<br>equal 相等<br>equality 相等性<br>equality operator 等号操作符<br>error log 错误日志 (for database)<br>escape code 转义码<br>escape character 转义符、转义字符<br>exclusive lock 排它锁 (for database)<br>explicit transaction 显式事务 (for database)<br>evaluate 评估<br>event 事件<br>event driven 事件驱动的<br>event handler 事件处理器<br>evidence 证据<br>exception 异常<br>exception declaration 异常声明<br>exception handling 异常处理、异常处理机制<br>exception-safe 异常安全的<br>exception specification 异常规范<br>exit 退出<br>explicit 显式<br>explicit specialization 显式特化<br>export 导出<br>expression 表达式<br>facility 设施、设备<br>fat client 胖客户端<br>feature 特性、特征<br>fetch 提取<br>field 字段(java)<br>field 字段 (for database)<br>field length 字段长度 (for database)<br>file 文件<br>filter 筛选 (for database)<br>finalization 终结<br>firewall 防火墙<br>finalizer 终结器<br>firmware 固件<br>flag 标记<br>flash memory 闪存<br>flush 刷新<br>font 字体<br>foreign key (FK) 外键(FK) (for database)<br>form 窗体<br>formal parameter 形参<br>forward declaration 前置声明<br>forward-only 只向前的<br>forward-only cursor 只向前游标 (for database)<br>fragmentation 碎片 (for database)<br>framework 框架<br>full specialization 完全特化<br>function 函数<br>function call operator (即operator ()) 函数调用操作符<br>function object 函数对象<br>function overloaded resolution函数重载决议<br>functionality 功能<br>function template函数模板<br>functor 仿函数<br>GAC (global assembly cache) 全局装配件缓存、全局配件缓存<br>GC (Garbage collection) 垃圾回收(机制)、垃圾收集(机制)<br>game 游戏<br>generate 生成<br>generic 泛化的、一般化的、通用的<br>generic algorithm通用算法<br>genericity 泛型<br>getter (相对于 setter)取值函数<br>global 全局的<br>global object 全局对象<br>global scope resolution operator 全局范围解析操作符<br>grant 授权 (for database)<br>granularity 粒度<br>group 组、群<br>group box 分组框<br>GUI 图形界面<br>GUID (Globally Unique Identifier) 全球唯一标识符<br>hand shaking 握手<br>handle 句柄<br>handler 处理器<br>hard-coded 硬编码的<br>hard-copy 截屏图<br>hard disk 硬盘<br>hardware 硬件<br>hash table 散列表、哈希表<br>header file头文件<br>heap 堆<br>help file 帮助文件<br>hierarchy 层次结构、继承体系<br>hierarchical data 阶层式数据、层次式数据<br>hook 钩子<br>Host (application)宿主(应用程序)<br>hot key 热键<br>hyperlink 超链接<br>HTML (HyperText Markup Language) 超文本标记语言<br>HTTP pipeline HTTP管道<br>HTTP (HyperText Transfer Protocol) 超文本传输协议<br>icon 图标<br>IDE (Integrated Development Environment)集成开发环境<br>IDL (Interface Definition Language) 接口定义语言<br>identifier 标识符<br>idle time 空闲时间<br>if and only if当且仅当<br>IL (Intermediate Language) 中间语言、中介语言<br>image 图象<br>IME 输入法<br>immediate base 直接基类<br>immediate derived 直接派生类<br>immediate updating 即时更新 (for database)<br>implicit transaction隐式事务 (for database)<br>incremental update 增量更新 (for database)<br>index 索引 (for database)<br>implement 实现<br>implementation 实现、实现品<br>implicit 隐式<br>import 导入<br>increment operator 增加操作符<br>infinite loop 无限循环<br>infinite recursive 无限递归<br>information 信息<br>infrastructure 基础设施<br>inheritance 继承、继承机制<br>inline 内联<br>inline expansion 内联展开<br>initialization 初始化<br>initialization list 初始化列表、初始值列表<br>initialize 初始化<br>inner join 内联接 (for database)<br>in-place active 现场激活<br>instance 实例<br>instantiated 具现化、实体化(常应用于template)<br>instantiation 具现体、具现化实体(常应用于template)<br>integrate 集成、整合<br>integrity 完整性、一致性<br>integrity constraint完整性约束 (for database)<br>interprocess communication (IPC)进程间通讯(IPC)<br>interacts 交互<br>interface 接口<br>for GUI 界面<br>interoperability 互操作性、互操作能力<br>interpreter 解释器<br>introspection 自省<br>invariants 不变性<br>invoke 调用<br>isolation level 隔离级别 (for database)<br>iterate 迭代<br>iterative 反复的、迭代的<br>iterator 迭代器<br>iteration 迭代(回圈每次轮回称为一个iteration)<br>item 项、条款、项目<br>JIT compilation JIT编译 即时编译<br>key 键 (for database)<br>key column 键列 (for database)<br>laser 激光<br>late binding 迟绑定<br>left outer join 左向外联接 (for database)<br>level 阶、层例<br>high level 高阶、高层<br>library 库<br>lifetime 生命期、寿命<br>link 连接、链接<br>linkage 连接、链接<br>linker 连接器、链接器<br>literal constant 字面常数<br>list 列表、表、链表<br>list box 列表框<br>livelock 活锁 (for database)<br>load 装载、加载<br>load balancing 负载平衡<br>loader 装载器、载入器<br>local 局部的<br>local object 局部对象<br>lock 锁<br>log 日志<br>login 登录<br>login security mode登录安全模式 (for database)<br>lookup table 查找表 (for database)<br>loop 循环<br>loose coupling 松散耦合<br>lvalue 左值<br>machine code 机器码、机器代码<br>macro 宏<br>maintain 维护<br>managed code 受控代码、托管代码<br>Managed Extensions 受控扩充件、托管扩展<br>managed object 受控对象、托管对象<br>mangled name<br>manifest 清单<br>manipulator 操纵器(iostream预先定义的一种东西)<br>many-to-many relationship 多对多关系 (for database)<br>many-to-one relationship 多对一关系 (for database)<br>marshal 列集<br>member 成员<br>member access operator 成员取用运算子(有dot和arrow两种)<br>member function 成员函数<br>member initialization list成员初始值列表<br>memberwise 以member为单元…、members 逐一…<br>memberwise copy<br>memory 内存<br>memory leak 内存泄漏<br>menu 菜单<br>message 消息<br>message based 基于消息的<br>message loop 消息环<br>message queuing消息队列<br>metadata 元数据<br>metaprogramming元编程<br>method 方法<br>micro 微<br>middleware 中间件<br>middle tier 中间层<br>modeling 建模<br>modeling language 建模语言<br>modifier 修饰字、修饰符<br>modem 调制解调器<br>module 模块<br>most derived class最底层的派生类<br>mouse 鼠标<br>mutable 可变的<br>mutex 互斥元、互斥体<br>multidimensional OLAP (MOLAP) 多维OLAP(MOLAP) (for database)<br>multithreaded server application 多线程服务器应用程序<br>multiuser 多用户<br>multi-tasking 多任务<br>multi-thread 多线程<br>multicast delegate 组播委托、多点委托<br>named parameter 命名参数<br>named pipe 命名管道<br>namespace 名字空间、命名空间<br>native 原生的、本地的<br>native code 本地码、本机码<br>Native Image Generator (NGEN)本地映像生成器<br>nested class 嵌套类<br>nested query 嵌套查询 (for database)<br>nested table 嵌套表 (for database)<br>network 网络<br>network card 网卡<br>nondependent name<br>object 对象<br>object based 基于对象的<br>object file 目标文件<br>object model 对象模型<br>object oriented 面向对象的<br>object pooling 对象池化<br>ODBC data source ODBC数据源 (for database)<br>ODBC driver ODBC驱动程序 (for database)<br>ODR (one-definition rule)<br>OLE Automation objects OLE自动化对象 (for database)<br>OLE Automation server OLE自动化服务器 (for database)<br>OLE DB consumer OLE DB使用者 (for database)<br>OLE DB for OLAP 用于OLAP的OLE DB (for database)<br>OLE DB provider OLE DB提供者 (for database)<br>one-to-many relationship 一对多关系 (for database)<br>one-to-one relationship 一对一关系 (for database)<br>online analytical processing (OLAP) 联机分析处理(OLAP) (for database)<br>online redo log 联机重做日志 (for database)<br>online transaction processing (OLTP) 联机事务处理(OLTP) (for database)<br>Open Data Services (ODS) 开放式数据服务(ODS) (for database)<br>Open Database Connectivity (ODBC) 开放式数据库连接(ODBC) (for database)<br>operand 操作数<br>operating system (OS) 操作系统<br>operation 操作<br>operator 操作符、运算符<br>option 选项<br>optimizer 优化器<br>outer join 外联接 (for database)<br>overflow 上限溢位(相对于underflow)<br>overhead 额外开销<br>overload 重载<br>overload resolution 重载决议<br>overloaded function 重载的函数<br>overloaded operator 被重载的操作符<br>override 覆写、重载、重新定义<br>package 包<br>packaging 打包<br>palette 调色板<br>parallel 并行<br>parameter 参数、形式参数、形参<br>parameter list 参数列表<br>parameterize 参数化<br>parent class 父类<br>parentheses 圆括弧、圆括号<br>parse 解析<br>parser 解析器<br>part 零件、部件<br>partial specialization 局部特化<br>pass by address 传址(函式引数的传递方式)(非正式用语)<br>pass by reference 传地址、按引用传递<br>pass by value 按值传递<br>pattern 模式<br>PDA (personal digital assistant)个人数字助理<br>PE (Portable Executable) file 可移植可执行文件<br>performance 性能<br>persistence 持久性<br>PInvoke (platform invoke service) 平台调用服务<br>pixel 像素<br>placement delete<br>placement new<br>placeholder 占位符<br>platform 平台<br>POD (plain old data (type))<br>POI (point of instantiation)<br>pointer 指针<br>poll 轮询<br>pooling 池化<br>polymorphism 多态<br>pop up 弹出式<br>port 端口<br>postfix 后缀<br>precedence 优先序(通常用于运算子的优先执行次序)<br>prefix 前缀<br>preprocessor 预处理器<br>primary key (PK)主键(PK) (for database)<br>primary table 主表 (for database)<br>primary template原始模板<br>primitive type 原始类型<br>print 打印<br>printer 打印机<br>procedure 过程<br>procedural 过程式的、过程化的<br>process 进程<br>profile 评测<br>profiler 效能(性能)评测器<br>program 程序<br>programmer 程序员<br>programming编程、程序设计<br>progress bar 进度指示器<br>project 项目、工程<br>property 属性<br>protocol 协议<br>pseudo code伪码<br>qualified 经过资格修饰(例如加上scope运算子)<br>qualifiedqualifier 修饰符<br>quality 质量<br>queue 队列<br>race condition 竞争条件（多线程环境常用语）<br>radian 弧度<br>radio button 单选按钮<br>raise 引发(常用来表示发出一个exception)<br>random number 随机数<br>range 范围、区间<br>rank 等级<br>raw 未经处理的<br>readOnly只读<br>record 记录 (for database)<br>recordset 记录集 (for database<br>recursive 递归<br>re-direction 重定向<br>refactoring 重构<br>refer 引用、参考<br>reference 引用、参考<br>reference counting引用计数<br>referential integrity (RI)引用完整性(RI) (for database)<br>register 寄存器<br>reflection 反射<br>refresh data 刷新数据 (for database)<br>regular expression 正则表达式<br>relational database 关系数据库<br>remote 远程<br>remote request 远程请求<br>represent 表述，表现<br>resolve 解析、决议<br>resolution 解析过程<br>result set 结果集 (for database)<br>retrieve data 检索数据<br>return 返回<br>return type 返回类型<br>return value 返回值<br>right outer join 右向外联接 (for database)<br>revoke 撤销<br>robust 健壮<br>robustness 健壮性<br>roll back 回滚 (for database)<br>roll forward 前滚 (for database)<br>routine 例程<br>row 行 (for database)<br>row lock 行锁 (for database)<br>rowset 行集 (for database)<br>RPC (remote procedure call)RPC(远程过程调用)<br>runtime 执行期、运行期、执行时、运行时<br>rvalue 右值<br>save 保存<br>savepoint 保存点 (for database)<br>SAX (Simple API for XML)<br>scalable 可伸缩的、可扩展的<br>schedule 调度<br>scheduler 调度程序<br>schema 模式、纲目结构<br>scroll bar滚动条<br>scope 作用域、生存空间<br>scope operator 生存空间操作符<br>scope resolution operator 生存空间解析操作符<br>screen 屏幕<br>SDK (Software Development Kit)软件开发包<br>sealed class 密封类<br>search 查找<br>semantics 语义<br>semaphore 信号量<br>sequential container序列式容器<br>server 服务器、服务端<br>serial 串行<br>serialization/serialize 序列化<br>server cursor服务端游标、服务器游标 (for database)<br>session 会话 (for database)<br>setter 设值函数<br>shared lock 共享锁 (for database)<br>sibling 同级<br>side effect 副作用<br>signature 签名<br>single-threaded 单线程<br>slider滑块<br>slot 槽<br>smart pointer 智能指针<br>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议<br>snapshot 截屏图<br>snapshot 快照 (for database)<br>specialization 特化<br>specification 规范、规格<br>splitter 切分窗口<br>SOAP (simple object access protocol) 简单对象访问协议<br>software 软件<br>source code 源码、源代码 </p>\n<p>SQL (Structured Query Language) 结构化查询语言 (for database)<br>stack 栈、堆栈<br>stack unwinding 叠辗转开解(此词用于exception主题)<br>standard library 标准库<br>standard template library 标准模板库<br>stateless 无状态的<br>statement 语句、声明<br>static cursor 静态游标 (for database)<br>static SQL statements 静态SQL语句 (for database)<br>stored procedure 存储过程 (for database)<br>status bar 状态条<br>stream 流<br>string 字符串<br>stub 存根<br>subobject子对象<br>subquery 子查询 (for database)<br>subroutine 子例程<br>subscrīpt operator 下标操作符<br>subset 子集<br>subtype 子类型<br>support 支持<br>suspend 挂起<br>symbol 记号<br>syntax 语法<br>system databases 系统数据库 (for database)<br>system tables 系统表 (for database)<br>table 表 (for database)<br>table lock 表锁 (for database)<br>table-level constraint 表级约束 (for database)<br>tape backup 磁带备份 (for database)<br>target 标的,目标<br>task switch 工作切换<br>TCP (Transport Control Protocol) 传输控制协议<br>template 模板<br>template-id<br>template argument deduction 模板参数推导<br>template explicit specialization 模板显式特化<br>template parameter 模板参数<br>template template parameter<br>temporary object 临时对象<br>temporary table 临时表 (for database)<br>text 文本<br>text file 文本文件<br>thin client 瘦客户端<br>third-party 第三方<br>thread 线程<br>thread-safe 线程安全的<br>throw 抛出、引发(常指发出一个exception)<br>token 符号、标记、令牌（看场合）<br>trace 跟踪<br>transaction 事务 (for database)<br>transaction log 事务日志 (for database)<br>transaction rollback 事务回滚 (for database)<br>transactional replication 事务复制 (for database)<br>translation unit 翻译单元<br>traverse 遍历<br>trigger 触发器 (for database)<br>two-phase commit 两阶段提交 (for database)<br>tuple<br>two-phase lookup 两阶段查找<br>type 类型<br>UDDI(Universary Descrīption, Discovery and Integration)统一描述、查询与集成<br>UML (unified modeling language)统一建模语言<br>unary function 单参函数<br>unary operator 一元操作符<br>unboxing 拆箱、拆箱转换<br>underflow 下限溢位(相对于overflow)<br>Union query 联合查询 (for database)<br>UNIQUE constraints UNIQUE约束 (for database)<br>unique index 唯一索引 (for database)<br>unmanaged code 非受控代码、非托管代码<br>unmarshal 散集<br>unqualified 未经限定的、未经修饰的<br>URI (Uniform Resource identifier) 统一资源标识符<br>URL (Uniform Resource Locator) 统一资源定位器<br>user 用户<br>user interface 用户界面<br>value types 值类型<br>variable 变量<br>vector 向量(一种容器，有点类似array)<br>viable 可行的<br>video 视频<br>view 视图<br>VEE (Virtual Execution Engine)虚拟执行引擎<br>vendor 厂商<br>view 视图 (for database)<br>virtual function 虚函数<br>virtual machine 虚拟机<br>virtual memory 虚拟内存<br>vowel 元音字母<br>Web Services web服务<br>WHERE clause WHERE子句 (for database)<br>wildcard characters 通配符字符 (for database)<br>wildcard search 通配符搜索 (for database)<br>window 窗口<br>window function 窗口函数<br>window procedure 窗口过程<br>Windows authentication Windows身份验证<br>wizard 向导<br>word 单词<br>word processor 字处理器<br>wrapper 包装、包装器<br>write enable 写启用 (for database)<br>write-ahead log 预写日志 (for database)<br>write-only 只写<br>WSDL (Web Service Descrīption Language)Web Service描述语言<br>XML Message Interface (XMI) XML消息接口<br>XML (eXtensible Markup Language) 可扩展标记语言<br>XSD (XML Schema Definition) XML模式定义语言<br>XSL (eXtensible Stylesheet Language) 可扩展样式表语言<br>XSLT (eXtensible Stylesheet Language Transformation)可扩展样式表语言转换<br>xxx based 基于xxx的<br>xxx oriented 面向xxx</p>\n<h2 id=\"可能有重复，另一个版本\"><a href=\"#可能有重复，另一个版本\" class=\"headerlink\" title=\"可能有重复，另一个版本\"></a>可能有重复，另一个版本</h2><p>application 应用程式 应用、应用程序<br>application framework 应用程式框架、应用框架 应用程序框架<br>architecture 架构、系统架构 体系结构<br>argument 引数（传给函式的值）。叁见 parameter 叁数、实质叁数、实叁、自变量<br>array 阵列 数组<br>arrow operator arrow（箭头）运算子 箭头操作符<br>assembly 装配件<br>assembly language 组合语言 汇编语言<br>assert(ion) 断言<br>assign 指派、指定、设值、赋值 赋值<br>assignment 指派、指定 赋值、分配<br>assignment operator 指派（赋值）运算子 = 赋值操作符<br>associated 相应的、相关的 相关的、关联、相应的<br>associative container 关联式容器（对应 sequential container） 关联式容器<br>atomic 不可分割的 原子的<br>attribute 属性 属性、特性<br>audio 音讯 音频<br>A.I. 人工智慧 人工智能<br>background 背景 背景（用於图形着色）<br>後台（用於行程）<br>backward compatible 回溯相容 向下兼容<br>bandwidth 频宽 带宽<br>base class 基础类别 基类<br>base type 基础型别 (等同於 base class)<br>batch 批次（意思是整批作业） 批处理<br>benefit 利益 收益<br>best viable function 最佳可行函式 最佳可行函式<br>（从 viable functions 中挑出的最佳吻合者）<br>binary search 二分搜寻法 二分查找<br>binary tree 二元树 二叉树<br>binary function 二元函式 双叁函数<br>binary operator 二元运算子 二元操作符<br>binding 系结 绑定<br>bit 位元 位<br>bit field 位元栏 位域<br>bitmap 位元图 位图<br>bitwise 以 bit 为单元逐一┅<br>bitwise copy 以 bit 为单元进行复制；位元逐一复制 位拷贝<br>block 区块,区段 块、区块、语句块<br>boolean 布林值（真假值，true 或 false） 布尔值<br>border 边框、框线 边框<br>brace(curly brace) 大括弧、大括号 花括弧、花括号<br>bracket(square brakcet) 中括弧、中括号 方括弧、方括号<br>breakpoint 中断点 断点<br>build 建造、构筑、建置（MS 用语）<br>build－in 内建 内置<br>bus 汇流排 总线<br>business 商务,业务 业务<br>buttons 按钮 按钮<br>byte 位元组（由 8 bits 组成） 字节<br>cache 快取 高速缓存<br>call 呼叫、叫用 调用<br>callback 回呼 回调<br>call operator call（函式呼叫）运算子调用操作符<br>（同 function call operator）<br>candidate function 候选函式 候选函数<br>（在函式多载决议程序中出现的候选函式）<br>chain 串链（例 chain of function calls） 链<br>character 字元 字符<br>check box 核取方块 (i.e. check button) 复选框<br>checked exception 可控式异常(Java)<br>check button 方钮 (i.e. check box) 复选按钮<br>child class 子类别（或称为derived class, subtype） 子类<br>class 类别 类<br>class body 类别本体 类体<br>class declaration 类别宣告、类别宣告式 类声明<br>class definition 类别定义、类别定义式 类定义<br>class derivation list 类别衍化列 类继承列表<br>class head 类别表头 类头<br>class hierarchy 类别继承体系, 类别阶层 类层次体系<br>class library 类别程式库、类别库 类库<br>class template 类别模板、类别范本 类模板<br>class template partial specializations<br>类别模板偏特化 类模板部分特化<br>class template specializations<br>类别模板特化 类模板特化<br>cleanup 清理、善後 清理、清除<br>client 客端、客户端、客户 客户<br>client－server 主从架构 客户/服务器<br>clipboard 剪贴簿 剪贴板<br>clone 复制 克隆<br>collection 群集 集合<br>combo box 复合方块、复合框 组合框<br>command line 命令列 命令行<br>(系统文字模式下的整行执行命令)<br>communication 通讯 通讯<br>compatible 相容 兼容<br>compile time 编译期 编译期、编译时<br>compiler 编译器 编译器<br>component 组件 组件<br>composition 复合、合成、组合 组合<br>computer 电脑、计算机 计算机、电脑<br>concept 概念 概念<br>concrete 具象的 实在的<br>concurrent 并行 并发<br>configuration 组态 配置<br>connection 连接，连线（网络,资料库） 连接<br>constraint 约束（条件）<br>construct 构件 构件<br>container 容器 容器<br>（存放资料的某种结构如 list, vector…）<br>containment 内含 包容<br>context 背景关系、周遭环境、上下脉络 环境、上下文<br>control 控制元件、控件 控件<br>console 主控台 控制台<br>const 常数（constant 的缩写，C++ 关键字）<br>constant 常数（相对於 variable） 常量<br>constructor（ctor） 建构式 构造函数<br>（与class 同名的一种 member functions）<br>copy (v) 复制、拷贝 拷贝<br>copy (n) 复件, 副本<br>cover 涵盖 覆盖<br>create 创建、建立、产生、生成 创建<br>creation 产生、生成 创建<br>cursor 游标 光标<br>custom 订制、自定 定制<br>data 资料 数据<br>database 资料库 数据库<br>database schema 数据库结构纲目<br>data member 资料成员、成员变数 数据成员、成员变量<br>data structure 资料结构 数据结构<br>datagram 资料元 数据报文<br>dead lock 死结 死锁<br>debug 除错 调试<br>debugger 除错器 调试器<br>declaration 宣告、宣告式 声明<br>deduction 推导（例：template argument deduction） 推导、推断<br>default 预设 缺省、默认<br>defer 延缓 推迟<br>define 定义 预定义<br>definition 定义、定义区、定义式 定义<br>delegate 委派、委托、委任 委托<br>delegation （同上）<br>demarshal 反编列 散集<br>dereference 提领（取出指标所指物体的内容） 解叁考<br>dereference operator dereference（提领）运算子 <em> 解叁考操作符<br>derived class 衍生类别 派生类<br>design by contract 契约式设计<br>design pattern 设计范式、设计样式 设计模式<br>※ 最近我比较喜欢「设计范式」一词<br>destroy 摧毁、销毁<br>destructor 解构式 析构函数<br>device 装置、设备 设备<br>dialog 对话窗、对话盒 对话框<br>directive 指令（例：using directive） (编译)指示符<br>directory 目录 目录<br>disk 碟 盘<br>dispatch 分派 分派<br>distributed computing 分布式计算 (分布式电算) 分布式计算<br>分散式计算 (分散式电算)<br>document 文件 文档<br>dot operator dot（句点）运算子 . (圆)点操作符<br>driver 驱动程式 驱动（程序）<br>dynamic binding 动态系结 动态绑定<br>efficiency 效率 效率<br>efficient 高效 高效<br>end user 终端用户<br>entity 物体 实体、物体<br>encapsulation 封装 封装<br>enclosing class 外围类别（与巢状类别 nested class 有关）外围类<br>enum (enumeration) 列举（一种 C++ 资料型别） 枚举<br>enumerators 列举元（enum 型别中的成员） 枚举成员、枚举器<br>equal 相等 相等<br>equality 相等性 相等性<br>equality operator equality（等号）运算子 == 等号操作符<br>equivalence 等价性、等同性、对等性 等价性<br>equivalent 等价、等同、对等 等价<br>escape code 转义码 转义码<br>evaluate 评估、求值、核定 评估<br>event 事件 事件<br>event driven 事件驱动的 事件驱动的<br>exception 异常情况 异常<br>exception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明<br>exception handling 异常处理、异常处理机制 异常处理、异常处理机制<br>exception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范<br>exit 退离（指离开函式时的那一个执行点） 退出<br>explicit 明白的、明显的、显式 显式<br>export 汇出 引出、导出<br>expression 运算式、算式 表达式<br>facility 设施、设备 设施、设备<br>feature 特性<br>field 栏位,资料栏（Java） 字段, 值域（Java）<br>file 档案 文件<br>firmware 韧体 固件<br>flag 旗标 标记<br>flash memory 快闪记忆体 闪存<br>flexibility 弹性 灵活性<br>flush 清理、扫清 刷新<br>font 字型 字体<br>form 表单（programming 用语） 窗体<br>formal parameter 形式叁数 形式叁数<br>forward declaration 前置宣告 前置声明<br>forwarding 转呼叫,转发 转发<br>forwarding function 转呼叫函式,转发函式 转发函数<br>fractal 碎形 分形<br>framework 框架 框架<br>full specialization 全特化（ref. partial specialization）<br>function 函式、函数 函数<br>function call operator 同 call operator<br>function object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象<br>function overloaded resolution<br>函式多载决议程序 函数重载解决（方案）<br>functionality 功能、机能 功能<br>function template 函式模板、函式范本 函数模板<br>functor 仿函式 仿函式、函子<br>game 游戏 游戏<br>generate 生成<br>generic 泛型、一般化的 一般化的、通用的、泛化<br>generic algorithm 泛型演算法 通用算法<br>getter (相对於 setter) 取值函式<br>global 全域的（对应於 local） 全局的<br>global object 全域物件 全局对象<br>global scope resolution operator<br>全域生存空间（范围决议）运算子 :: 全局范围解析操作符<br>group 群组<br>group box 群组方块 分组框<br>guard clause 卫述句 (Refactoring, p250) 卫语句<br>GUI 图形介面 图形界面<br>hand shaking 握手协商<br>handle 识别码、识别号、号码牌、权柄 句柄<br>handler 处理常式 处理函数<br>hard－coded 编死的 硬编码的<br>hard－copy 硬拷图 屏幕截图<br>hard disk 硬碟 硬盘<br>hardware 硬体 硬件<br>hash table 杂凑表 哈希表、散列表<br>header file 表头档、标头档 头文件<br>heap 堆积 堆<br>hierarchy 阶层体系 层次结构（体系）<br>hook 挂钩 钩子<br>hyperlink 超链结 超链接<br>icon 图示、图标 图标<br>IDE 整合开发环境 集成开发环境<br>identifier 识别字、识别符号 标识符<br>if and only if 若且唯若 当且仅当<br>Illinois 伊利诺 伊利诺斯<br>image 影像 图象<br>immediate base 直接的（紧临的）上层 base class。 直接上层基类<br>immediate derived 直接的（紧临的）下层 derived class。 直接下层派生类<br>immutability 不变性<br>immutable 不可变（的）<br>implement 实作、实现 实现<br>implementation 实作品、实作体、实作码、实件 实现<br>implicit 隐喻的、暗自的、隐式 隐式<br>import 汇入 导入<br>increment operator 累加运算子 ++ 增加操作符<br>infinite loop 无穷回圈 无限循环<br>infinite recursive 无穷递回 无限递归<br>information 资讯 信息<br>infrastructure 公共基础建设<br>inheritance 继承、继承机制 继承、继承机制<br>inline 行内 内联<br>inline expansion 行内展开 内联展开<br>initialization 初始化（动作） 初始化<br>initialization list 初值列 初始值列表<br>initialize 初始化 初始化<br>inner class 内隐类别 内嵌类<br>instance 实体 实例<br>（根据某种表述而实际产生的「东西」）<br>instantiated 具现化、实体化（常应用於 template） 实例化<br>instantiation 具现体、具现化实体（常应用於 template） 实例<br>integer (integral) 整数（的） 整型（的）<br>integrate 整合 集成<br>interacts 交谈、互动 交互<br>interface 介面 接口<br>for GUI 介面 界面<br>interpreter 直译器 解释器<br>invariants 恒常性,约束条件 约束条件<br>invoke 唤起 调用<br>iterate 迭代（回圈一个轮回一个轮回地进行） 迭代<br>exception 异常情况 异常<br>exception declaration 异常宣告（ref. C++ Primer 3/e, 11.3） 异常声明<br>exception handling 异常处理、异常处理机制 异常处理、异常处理机制<br>exception specification 异常规格（ref. C++ Primer 3/e, 11.4） 异常规范<br>exit 退离（指离开函式时的那一个执行点） 退出<br>explicit 明白的、明显的、显式 显式<br>export 汇出 引出、导出<br>expression 运算式、算式 表达式<br>facility 设施、设备 设施、设备<br>feature 特性<br>field 栏位,资料栏（Java） 字段, 值域（Java）<br>file 档案 文件<br>firmware 韧体 固件<br>flag 旗标 标记<br>flash memory 快闪记忆体 闪存<br>flexibility 弹性 灵活性<br>flush 清理、扫清 刷新<br>font 字型 字体<br>form 表单（programming 用语） 窗体<br>formal parameter 形式叁数 形式叁数<br>forward declaration 前置宣告 前置声明<br>forwarding 转呼叫,转发 转发<br>forwarding function 转呼叫函式,转发函式 转发函数<br>fractal 碎形 分形<br>framework 框架 框架<br>full specialization 全特化（ref. partial specialization）<br>function 函式、函数 函数<br>function call operator 同 call operator<br>function object 函式物件（ref. C++ Primer 3/e, 12.3） 函数对象<br>function overloaded resolution<br>函式多载决议程序 函数重载解决（方案）<br>functionality 功能、机能 功能<br>function template 函式模板、函式范本 函数模板<br>functor 仿函式 仿函式、函子<br>game 游戏 游戏<br>generate 生成<br>generic 泛型、一般化的 一般化的、通用的、泛化<br>generic algorithm 泛型演算法 通用算法<br>getter (相对於 setter) 取值函式<br>global 全域的（对应於 local） 全局的<br>global object 全域物件 全局对象<br>global scope resolution operator<br>全域生存空间（范围决议）运算子 :: 全局范围解析操作符<br>group 群组<br>group box 群组方块 分组框<br>guard clause 卫述句 (Refactoring, p250) 卫语句<br>GUI 图形介面 图形界面<br>hand shaking 握手协商<br>handle 识别码、识别号、号码牌、权柄 句柄<br>handler 处理常式 处理函数<br>hard－coded 编死的 硬编码的<br>hard－copy 硬拷图 屏幕截图<br>hard disk 硬碟 硬盘<br>hardware 硬体 硬件<br>hash table 杂凑表 哈希表、散列表<br>header file 表头档、标头档 头文件<br>heap 堆积 堆<br>hierarchy 阶层体系 层次结构（体系）<br>hook 挂钩 钩子<br>hyperlink 超链结 超链接<br>icon 图示、图标 图标<br>IDE 整合开发环境 集成开发环境<br>identifier 识别字、识别符号 标识符<br>if and only if 若且唯若 当且仅当<br>Illinois 伊利诺 伊利诺斯<br>image 影像 图象<br>immediate base 直接的（紧临的）上层 base class。 直接上层基类<br>immediate derived 直接的（紧临的）下层 derived class。 直接下层派生类<br>immutability 不变性<br>immutable 不可变（的）<br>implement 实作、实现 实现<br>implementation 实作品、实作体、实作码、实件 实现<br>implicit 隐喻的、暗自的、隐式 隐式<br>import 汇入 导入<br>increment operator 累加运算子 ++ 增加操作符<br>infinite loop 无穷回圈 无限循环<br>infinite recursive 无穷递回 无限递归<br>information 资讯 信息<br>infrastructure 公共基础建设<br>inheritance 继承、继承机制 继承、继承机制<br>inline 行内 内联<br>inline expansion 行内展开 内联展开<br>initialization 初始化（动作） 初始化<br>initialization list 初值列 初始值列表<br>initialize 初始化 初始化<br>inner class 内隐类别 内嵌类<br>instance 实体 实例<br>（根据某种表述而实际产生的「东西」）<br>instantiated 具现化、实体化（常应用於 template） 实例化<br>instantiation 具现体、具现化实体（常应用於 template） 实例<br>integer (integral) 整数（的） 整型（的）<br>integrate 整合 集成<br>interacts 交谈、互动 交互<br>interface 介面 接口<br>for GUI 介面 界面<br>interpreter 直译器 解释器<br>invariants 恒常性,约束条件 约束条件<br>invoke 唤起 调用<br>iterate 迭代（回圈一个轮回一个轮回地进行） 迭代<br>iterative 反覆的，迭代的<br>iterator 迭代器（一种泛型指标） 迭代器<br>iteration 迭代（回圈每次轮回称为一个 iteration） 迭代<br>item 项目、条款 项、条款、项目<br>laser 雷射 激光<br>level 阶 层 (级)<br>例 high level 高阶 高层<br>library 程式库、函式库 库、函数库<br>lifetime 生命期、寿命 生命期、寿命<br>link 联结、连结 连接,链接<br>linker 联结器、连结器 连接器<br>literal constant 字面常数（例 3.14 或 “hi” 这等常数值） 字面常数<br>list 串列（linked－list） 列表、表、链表<br>list box 列表方块、列表框 列表框<br>load 载入 装载<br>loader 载入器 装载器、载入器<br>local 区域的（对应於 global） 局部的<br>local object 区域物件 局部对象<br>lock 机锁<br>loop 回圈 循环<br>lvalue 左值 左值<br>macro 巨集 宏<br>magic number 魔术数字 魔法数<br>maintain 维护 维护<br>manipulator 操纵器（iostream 预先定义的一种东西） 操纵器<br>marshal 编列 列集<br>叁考 demarshal<br>mechanism 机制 机制<br>member 成员 成员<br>member access operator 成员取用运算子（有 dot 和 arrow 两种） 成员存取操作符<br>member function 成员函式 成员函数<br>member initialization list<br>成员初值列 成员初始值列表<br>memberwise 以 member 为单元┅、members 逐一┅ 以成员为单位<br>memberwise copy 以 members 为单元逐一复制<br>memory 记忆体 内存<br>menu 表单、选单 菜单<br>message 讯息 消息<br>message based 以讯息为基础的 基於消息的<br>message loop 讯息回圈 消息环<br>method (java) 方法、行为、函式 方法<br>meta－ 超－ 元－<br>例 meta－programming 超编程 元编程<br>micro 微 微<br>middleware 中介层 中间件<br>modeling 模塑<br>modeling language 塑模语言，建模语言<br>modem 数据机 调制解调器<br>module 模组 模块<br>modifier 饰词 修饰符<br>most derived class 最末层衍生类别 最底层的派生类<br>mouse 滑鼠 鼠标<br>mutable 可变的 可变的<br>multi－tasking 多工 多任务<br>namespace 命名空间 名字空间、命名空间<br>native 原生的 本地的、固有的<br>nested class 巢状类别 嵌套类<br>network 网路 网络<br>network card 网路卡 网卡<br>object 物件 对象<br>object based 以物件为基础的 基於对象的<br>object file 目的档 目标文件<br>object model 物件模型 对象模型<br>object oriented 物件导向的 面向对象的<br>online 线上 在线<br>opaque 不透明的<br>operand 运算元 操作数<br>operating system (OS) 作业系统 操作系统<br>operation 操作、操作行为 操作<br>operator 运算子 操作符、运算符<br>option 选项，可选方案 选项<br>ordinary 常规的 常规的<br>overflow 上限溢位（相对於 underflow） 溢出（underflow:下溢）<br>overhead 额外负担、额外开销 额外开销<br>overload 多载化、多载化、重载 重载<br>overloaded function 多载化函式 重载的函数<br>overloaded operator 多载化运算子 被重载的操作符<br>overloaded set 多载集合 重载集合<br>override 改写、覆写 重载、改写、重新定义<br>（在 derived class 中重新定义虚拟函式<br>package 套件 包<br>pair 对组<br>palette 调色盘、组件盘、工具箱<br>pane 窗格 窗格<br>（有时为嵌板之意，例 Java Content Pane）<br>parallel 平行 并行<br>parameter 叁数（函式叁数列上的变数） 叁数、形式叁数、形叁<br>parameter list 叁数列 叁数列表<br>parent class 父类别（或称 base class） 父类<br>parentheses 小括弧、小括号 圆括弧、圆括号<br>parse 解析 解析<br>part 零件 部件<br>partial specialization 偏特化（ref. C++ Primer 3/e, 16.10） 局部特化<br>（ref. full specialization）<br>pass by address 传址（函式引数的传递方式）（非正式用语）传地址<br>pass by reference 传址（函式引数的一种传递方式） 传地址, 按引用传递<br>pass by value 传值（函式引数的一种传递方式） 按值传递<br>pattern 范式、样式 模式<br>performance 效率、性能兼而有之 性能<br>persistence 永续性 持久性<br>pixel 图素、像素 像素<br>placement delete ref. C++ Primer 3/e, 15.8.2<br>placement new ref. C++ Primer 3/e, 15.8.2<br>platform 平台 平台<br>pointer 指标 指针<br>址位器（和址叁器 reference 形成对映，满好）<br>poll 轮询 轮询<br>polymorphism 多型 多态<br>pop up 冒起式、弹出式 弹出式<br>port 埠 端口<br>postfix 後置式、後序式 後置式<br>precedence 优先序（通常用於运算子的优先执行次序）<br>prefix 前置式、前序式 前置式<br>preprocessor 前处理器 预处理器<br>prime 质数 素数<br>primitive type 基本型别 (不同於 base class,基础类别)<br>print 列印 打印<br>printer 印表机 打印机<br>priority 优先权 (通常用於执行绪获得 CPU 时间的优先次序）<br>procedure 程序 过程<br>procedural 程序性的、程序式的 过程式的、过程化的<br>process 行程 进程<br>profile 评测 评测<br>profiler 效能（效率）评测器 效能（性能）评测器<br>programmer 程式员 程序员<br>programming 编程、程式设计、程式化 编程<br>progress bar 进度指示器 进度指示器<br>project 专案 项目、工程<br>property 属性<br>protocol 协定 协议<br>pseudo code 假码、虚拟码、伪码 伪码<br>qualified 经过资格修饰（例如加上 scope 运算子） 限定<br>qualifier 资格修饰词、饰词 限定修饰词<br>quality 品质 质量<br>queue 伫列 队列<br>radian 径度 弧度<br>radio button 圆钮 单选按钮<br>raise 引发（常用来表示发出一个 exception） 引起、引发<br>random number 随机数、乱数 随机数<br>range 范围、区间（用於 STL 时） 范围、区间<br>rank 等级、分等（ref. C++Primer 3/e 9,15章） 等级<br>raw 生鲜的、未经处理的 未经处理的<br>record 记录 记录<br>recordset 记录集 记录集<br>recursive 递回 递归<br>re－direction 重导向 重定向<br>refactoring 重构、重整 重构<br>refer 取用 叁考<br>refer to 指向、指涉、指代<br>reference （C++ 中类似指标的东西，相当於 “化身”） 引用、叁考<br>址叁器, see pointer<br>register 暂存器 寄存器<br>reflection 反射 反射、映像<br>relational database 关联式资料库 关系数据库<br>represent 表述，表现 表述，表现<br>resolve 决议（为算式中的符号名称寻找 解析<br>对应之宣告式的过程）<br>resolution 决议程序、决议过程 解析过程<br>resolution 解析度 分辨率<br>restriction 局限<br>return 传回、回返 返回<br>return type 回返型别 返回类型<br>return value 回返值 返回值<br>robust 强固、稳健 健壮<br>robustness 强固性、稳健性 健壮性<br>routine 常式 例程<br>runtime 执行期 运行期、运行时<br>common language runtime (CLR) 译为「通用语言执行层」<br>rvalue 右值 右值<br>save 储存 存储<br>schedule 排程 调度<br>scheduler 排程器 调度程序<br>scheme 结构纲目、组织纲目<br>scroll bar 卷轴 滚动条<br>scope 生存空间、生存范围、范畴、作用域 生存空间<br>scope operator 生存空间（范围决议）运算子 :: 生存空间操作符<br>scope resolution operator<br>生存空间决议运算子 生存空间解析操作符<br>（与scope operator同）<br>screen 萤幕 屏幕<br>search 搜寻 查找<br>semantics 语意 语义<br>sequential container 序列式容器 顺序式容器<br>（对应於 associative container）<br>server 伺服器、伺服端 服务器、服务端<br>serial 串行<br>serialization 次第读写,序列化 序列化<br>(serialize)<br>setter (相对於 getter) 设值函式<br>signal 信号<br>signature 标记式、签名式、署名式 签名<br>slider 滚轴 滑块<br>slot 条孔、槽 槽<br>smart pointer 灵巧指标、精灵指标 智能指针<br>snapshot 萤幕快照（图） 屏幕截图<br>specialization 特殊化、特殊化定义、特殊化宣告 特化<br>specification 规格 规格、规范<br>splitter 分裂视窗 切分窗口<br>software 软体 软件<br>solution 解法,解决方案 方案<br>source 原始码 源码、源代码<br>stack 堆叠 栈<br>stack unwinding 堆叠辗转开解（此词用於 exception 主题） 栈辗转开解 </em><br>standard library 标准程式库<br>standard template library 标准模板程式库<br>statement 述句 语句、声明<br>status bar 状态列、状态栏 状态条<br>STL 见 standard template library<br>stream 资料流、串流 流<br>string 字串 字符串<br>subroutine<br>subscript operator 下标运算子 [ ] 下标操作符<br>subtype 子型别 子类型<br>support 支援 支持<br>suspend 虚悬 挂起<br>symbol 符号 记号<br>syntax 语法 语法<br>tag 标签 标记<br>索引标签,页签<br>target 标的（例 target pointer：标的指标） 目标<br>task switch 工作切换 任务切换<br>template 模板、范本 模板<br>template argument deduction<br>模板引数推导 模板叁数推导<br>template explicit specialization<br>模板显式特化（版本） 模板显式特化<br>template parameter 模板叁数 模板叁数<br>temporary object 暂时物件 临时对象<br>text 文字 文本<br>text file 程式本文档（放置程式原始码的档案） 文本文件<br>thread 执行绪 线程<br>thread safe 多绪安全 多线程安全<br>throw 丢掷（常指发出一个 exception） 丢掷、引发<br>token 语汇单元 符号、标记<br>transaction 交易 事务<br>transparent(ly) 透通的(地)<br>traverse 巡访（来回走动） 遍历<br>trigger 触发 触发<br>type 型别 类型<br>UML unified modeling language 统一建模语言<br>unary function 一元函式 单叁函数<br>unary operator 一元运算子 一元操作符<br>underflow 下限溢位（相对於 overflow） 下溢<br>unchecked exception 不可控异常(Java)<br>unqualified 未经资格修饰（而直接取用）<br>unwinding ref. stack unwinding<br>user 使用者、用户 用户<br>user interface 使用者介面、用户介面、人机介面 用户界面<br>variable 变数（相对於常数 const） 变量<br>vector 向量（一种容器，有点类似 array） 向量、矢量<br>viable 可实行的、可行的 可行的<br>viable function 可行函式 可行函数<br>（从 candidate functions 中挑出者）<br>video 视讯 视频<br>view (1) 视图<br>(document/view) 文档/视图<br>view (2) 映件<br>virtual function 虚拟函式 虚函数<br>virtual machine 虚拟机器 虚拟机<br>virtual memory 虚拟记忆体 虚内存, 虚存<br>volatile 易挥发的、易变的<br>vowel 母音 元音字母<br>window 视窗 窗口<br>window function 视窗函式 窗口函数<br>window procedure 视窗函式 窗口过程<br>word 字 单词<br>word processor 文书处理器 字处理器<br>wrapper 外覆、外包 包装absence 缺席<br>access 访问存取通路进入<br>achieve 实现完成<br>acquire 获得<br>adjacency list method 邻接表表示法<br>adjacency matrix method 邻接矩阵表示法<br>algorithm 算法<br>allocate 留下分配<br>analog 推论<br>append 添加<br>archive 档案归档<br>array 数组<br>assign 分配<br>assume 假设<br>assurance 确信信任<br>ATM(asynchronous transfer mode) 异步传输模式<br>b.. real programs kernels 实程序核心程序<br>b.. toy benchmark synthetic benchmark 简单基准程序复合基准程序<br>balance 平衡<br>bandwidth 带宽<br>batch 一批一组<br>benchmark 基准测试程序<br>best-fit algorithm 最佳适应算法<br>BFS(breadth first search) 广度优先搜索法<br>binary 二进制<br>binary relation 二元关系<br>binary tree 二叉树<br>bit series 比特序列<br>black-box white-box 黑盒白盒<br>block miss 块失效<br>blocked 阻塞(等待状态也称阻塞或封锁状态)<br>boundary 界线分界<br>bridge 网桥<br>bubble sort 冒泡排序<br>calculation 计算<br>candidate key 候选键(辅键)<br>capability 能力才能<br>capacity 容量<br>cartesian product 笛卡尔积<br>CASE(com.. aided sof.. engineering) 计算机辅助软件工程<br>CCP(communication control processor) 通信控制处理机<br>cell 信元<br>characteristic 特征特性<br>circuit switching 线路交换<br>circular wait 循环等待<br>CISC(complex instruction set computer) 复杂指令集计算机<br>class 类<br>Client/Server 客户机/服务器<br>clock cycle clock rate 时钟周期时钟频率<br>coaxial cable 同轴电缆<br>cohesion coupling 内聚耦合<br>coincidental logical procedural functional 偶然内聚逻辑内聚过程内聚功能内聚<br>combination 联合配合<br>common 公用的共同的<br>communication 通信<br>complement number 补码<br>component 成分<br>concept 概念观念<br>condition 情况状况<br>conform 符合<br>consist 组成存在<br>constrain 约束<br>contain 包含<br>correspond (corresponding) 相符合(相应的一致的)<br>CPETT 计算机性能评价工具与技术<br>CPI 每条指令需要的周期数<br>CSMA/CD 带冲突检测的载波监听多路访问<br>cursor 游标<br>cyclic redundency check 循环冗余检校<br>database: integrity consistency restory 完整性一致性可恢复性<br>database: security efficiency 数据库设计的目标: 安全性效率<br>deadlock: mutual exclusion 死锁条件: 互斥<br>deadlock: circular wait no preemption 死锁条件: 循环等待狗熊先权<br>decimal 十进位的<br>decision 决定判断<br>decomposition 双重的混合的<br>decrease 减少<br>definition 定义<br>definition phase 定义阶段<br>demonstrate 证明<br>design phase 设计阶段<br>determine 限定<br>development phase 开发阶段<br>DFS(depth first search) 深度优先搜索法<br>diagram 图表<br>Difference Manchester 差分曼彻斯特<br>directed graph undirected graph 有向图无向图<br>distinguish 辩认区别<br>distributed system 分布式系统<br>divide division 分开除除法<br>divide union intersection difference 除并交差<br>document 文件文档<br>DQDB(distributed queue dual bus) 分布队列双总线<br>draw 绘制<br>dual 二元的双的<br>dynamic design process 动态定义过程<br>element 元素要素<br>elevator (scan) algorithm 电梯算法又称扫描算法<br>encapsulation inheritance 封装(压缩) 继承(遗传)<br>encode 译成密码<br>entity 实体<br>entity integrity rule 实体完整性规则<br>equal 相等的<br>equation 方程式等式<br>estimate 估计判断<br>Ethernet 以太网<br>evolution 发展演化<br>exceed 超过<br>exchange sort 交换排序<br>exclusive locks 排它锁(简记为X 锁)<br>execute 实现执行<br>exhibit 表现展示陈列<br>existence 存在发生<br>expertise 专门技术<br>external(internal) fragmentation 外(内)碎片<br>fault page fault 中断过错页中断<br>FDDI(fiber distributed data interface) 光纤分布式数据接口<br>FDM(frequency division multiplexing 频分多路复用<br>fiber optic cable 光缆<br>FIFO replacement policy 先进先出替换算法<br>figure 数字图形<br>final 最后的最终的<br>first normal form 第一范式<br>floppy 活动盘片(软盘)<br>foreign key domain tuple 外来键值域元组<br>form 形状形式<br>formula 公式表达式<br>foundation 基础根据基金<br>frame page frame 帧结构页结构<br>frequency 频率<br>FTP 文件传送服务<br>function 函数<br>functionally dependent 函数依赖<br>gateway 网间连接器<br>gather 聚集采集推测<br>general-purose registers 通用寄存器<br>generate 产生<br>grade 等级标准<br>graph (graphic) 图<br>Gropher 将用户的请求自动转换成<br>FTP<br>guarantee 保证确定<br>hash table hash function collision 哈希表哈希函数(散列函数) 碰撞<br>HDLC 面向比特型数据链路层协议<br>hit rate 命中率<br>host 主计算机<br>host language statement 主语言语句<br>hypertext 超级文本<br>illustrate 举例说明<br>independent 独立的<br>index 索引<br>indirect 间接的<br>influence 有影响的<br>initially 最初开头<br>insertion sort 插入排序<br>instruction format 指令格式<br>instruction set 指令集<br>interface 接口分界面连接体<br>internal 内部的内在的<br>interrupt 中断<br>IPC 工业过程控制<br>ISAM VSAM 索引顺序存取方法虚拟存储存取方法<br>join natural join semijoin 连接自然连接半连接<br>judgment 判断<br>kernel executive supervisor user 核心执行管理用户<br>kernels 核心程序<br>key comparison 键(码)值比较<br>LAN(local area network) 局域网<br>load 负载载入<br>logical functional 逻辑内聚功能内聚<br>longitudinal 水平的<br>loop 圈环状<br>maintain 维护保养供给<br>maintanence phase 维护(保养)阶段<br>MAN(metropclitan area network) 城域网<br>Manchester 曼彻斯特<br>map 地图映射图<br>matrix 矩阵点阵<br>memory reference 存储器参量<br>message switching 报文交换<br>method 方法技巧<br>MFLOP(million floating point operate p s 每秒百万次浮点运算<br>minimum 最小的<br>MIPS(millions of instructions per second 每秒百万条指令<br>module 单位基准<br>monitor (model benchmark physcal) method 监视(模型基准物理)法<br>multilevel data flow chart 分层数据流图<br>multiple 复合的多样的<br>multiple-term formula 多项式<br>multiplexing 多路复用技术<br>multiplication 乘法<br>mutual exclusion 互相排斥<br>non-key attributes 非码属性<br>null 零空<br>Nyquist 奈奎斯特<br>object oriented 对象趋向的使适应的<br>object oriented analysis 面向对象的分析<br>object oriented databases 面向对象数据库<br>object oriented design 面向对象的设计<br>object oriented implementation 面向对象的实现<br>obtain 获得<br>occupy 占有居住于<br>occurrence 事件<br>odd 奇数的<br>one-dimensional array 一维数组<br>OODB(object oriented data base) 面向对象数据库<br>OOM(object oriented method) 面向对象的方法<br>oom: information object message class 信息对象消息类<br>oom: instance method message passing 实例方法消息传递<br>open system 开放系统<br>operand 操作数<br>optimized 尽量充分利用<br>optional 任选的非强制的<br>organize 组织<br>overflow 溢出<br>overlapping register windows 重叠寄存器窗口<br>packet switching 报文分组交换<br>page fault 页面失效<br>page replacement algorithm 页替换算法<br>paged segments 段页式管理<br>PCB(process control block) 进程控制块<br>peer entites 对等实体<br>perform 表演执行<br>period 时期周期<br>permit 许可准许<br>phase 阶段局面状态<br>physical data link network layer 物理层数据链路层网络层<br>pipeline 管道<br>platter track cluster 面磁道簇<br>predicate 谓语<br>preemption 有优先权的<br>prefix (Polish form) 前缀(波兰表达式)<br>preorder inorder postorder 前序中序后序<br>presentation application layer 表示层应用层<br>primary key attributes 主码属性<br>principle 原则方法<br>procedural coincidental 过程内聚偶然内聚<br>process 过程加工处理<br>proficient 精通<br>program debugging 程序排错<br>projection selection join 投影选择连接<br>proposition 主张建议陈述<br>protocal 协议<br>prototype 原型样板<br>prototyping method (model) 原型化周期(模型)<br>pseudo-code 伪码(又称程序设计语言PDL)<br>punctuation 标点<br>purpose 目的意图<br>quality 质量品质<br>queue 队列<br>ready blocked running 就绪阻塞(等待) 运行<br>real page number 实页数<br>real programs 实程序<br>redirected 重定向<br>redundency 冗余<br>reference integrity rule 引用完整性规则<br>referred to as 把…..当作<br>regarde 关于<br>register(registry) 寄存器登记注册挂号<br>regularly 定期的常规的<br>relation 关系<br>relay 中继<br>reliability 可信赖的<br>repeater 中继器<br>replacement 替换<br>represent 代表象征<br>request indication response confirm 请求指示响应确认<br>resource 资源<br>respon 回答响应<br>RISC(reduced instruction set computer) 精简指令集计算机<br>robustness 健壮性<br>router 路由器<br>scheme 计划图表<br>sector head cylinder 扇区磁头柱面<br>selection sort 选择排序<br>semaphores 信号<br>sequence 序列顺序<br>Shanon 香农<br>share locks 共享锁(简记为S 锁)<br>short path critical path 最短路径关键路径<br>signal 信号<br>signal-to-noise ratio 信噪比B/N<br>similar 相似的<br>SISD SIMD MISD MIMD <em> 指令流</em> 数据流<br>SMDS 交换多兆位数据服务<br>software development phase 软件开发阶段<br>software engineering 软件工程<br>software portability 软件可移植性<br>software requirements specification 软件需求说明书<br>solve 解决<br>sort 种类方式分类排序<br>spanning tree 跨越树(生成树)<br>specify 指定说明<br>speedup 加速比<br>SSTF(shortest-seek-time-first) 最短寻道时间优先(磁盘调度算法)<br>stack strategy non-stack strategy 堆栈型非堆栈型<br>starvation 饥饿匮乏<br>statement 陈述<br>storage 贮藏库<br>store procdures 存储过程<br>strategy 战略兵法计划<br>strict 严密的<br>styles 文体风格<br>subgroup 循环的<br>subset 子集子设备<br>superclass subclass abstract class 超类子类抽象类<br>suppose 假定<br>symbolic 象征的符号的<br>synthetic benchmark 复合基准程序<br>system testing 系统测试<br>Systolic 脉动阵列<br>table 表表格桌子<br>TDM(time division multiplexing) 时分多路复用<br>technology 工艺技术<br>terminal 终端<br>testing phase 测试阶段<br>theta select project theta join θ选择投影θ连接<br>time complexity 时间复杂度<br>timestamping 时标技术<br>Token Bus 令牌总线<br>Token Ring 令牌环<br>toy benchmark 简单基准程序<br>transaction 事务记录<br>transmite 传送<br>transport layer session layer 传输层会话层<br>traversal method 遍历方法<br>triggers store procedures 触发器存储过程<br>(ORACLE 系统)<br>underflow 下溢<br>unique 唯一的<br>unit system acceptance testing 单元测试系统测试确认测试<br>universe 宇宙全世界<br>update 更新<br>value [数]值<br>variable 变量<br>vertical 垂直的<br>vertice edge 顶点(结点) 边<br>via 经过<br>virtual memory system 虚拟存储系统<br>WAN(wide area network) 广域网<br>waterfall model 瀑布模型<br>white noise 白噪声<br>write-back(copy-back) 写回法<br>write-through(store-through) 写直达法<br>WWW(world wide web) 万维网</p>\n<h2 id=\"（IT）词汇\"><a href=\"#（IT）词汇\" class=\"headerlink\" title=\"（IT）词汇\"></a>（IT）词汇</h2><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>Active-matrix主动距陈<br>Adapter cards适配卡<br>Advanced application高级应用<br>Analytical graph分析图表<br>Analyze分析<br>Animations动画<br>Application software 应用软件<br>Arithmetic operations算术运算<br>Audio-output device音频输出设备<br>Access time存取时间<br>access存取<br>accuracy准确性<br>ad network cookies广告网络信息记录软件<br>Add-ons附软件<br>Address地址<br>Agents代理<br>Analog signals模拟信号<br>Applets程序<br>Asynchronous communications port异步通信端口<br>Attachment附件</p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p>Bar code条形码<br>Bar code reader条形码读卡器<br>Basic application基础程序<br>Binary coding schemes二进制译码方案<br>Binary system二进制系统<br>Bit比特<br>Browser浏览器<br>Bus line总线<br>Backup tape cartridge units备份磁带盒单元<br>Bandwidth带宽<br>Bluetooth蓝牙<br>Broadband宽带<br>Browser浏览器<br>Business-to-business企业对企业电子商务<br>Business-to-consumer企业对消费者<br>Bus总线</p>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><p>Cables连线<br>Cell单元箱<br>Chain printer链式打印机<br>Character and recognition device字符标识识别设备<br>Chart图表<br>Chassis支架<br>Chip芯片<br>Clarity清晰度<br>Closed architecture封闭式体系结构<br>Column列<br>Combination key结合键<br>computer competency计算机能力<br>connectivity连接，结点<br>Continuous-speech recognition system连续语言识别系统<br>Control unit操纵单元<br>Cordless or wireless mouse无线鼠标<br>Cable modems有线调制解调器<br>carpal tunnel syndrome腕骨神经综合症<br>CD-ROM可记录光盘<br>CD-RW可重写光盘<br>CD-R可记录压缩光盘<br>Channel信道<br>Chat group谈话群组<br>chlorofluorocarbons(CFCs) ]氯氟甲烷<br>Client客户端<br>Coaxial cable同轴电缆<br>cold site冷战<br>Commerce servers商业服务器<br>Communication channel信道<br>Communication systems信息系统<br>Compact disc rewritable<br>Compact disc光盘<br>computer abuse amendments act of 19941994计算机滥用法案<br>computer crime计算机犯罪<br>computer ethics计算机道德<br>computer fraud and abuse act of 1986计算机欺诈和滥用法案<br>computer matching and privacy protection act of 1988计算机查找和隐私保护法案<br>Computer network计算机网络<br>computer support specialist计算机支持专家<br>computer technician计算机技术人员<br>computer trainer计算机教师<br>Connection device连接设备<br>Connectivity连接<br>Consumer-to-consumer个人对个人<br>cookies-cutter programs信息记录截取程序<br>cookies信息记录程序<br>cracker解密高手<br>cumulative trauma disorder积累性损伤错乱<br>Cybercash电子现金<br>Cyberspace计算机空间<br>cynic愤世嫉俗者</p>\n<h3 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h3><p>Database数据库<br>database files数据库文件<br>Database manager数据库管理<br>Data bus数据总线<br>Data projector数码放映机<br>Desktop system unit台式电脑系统单元<br>Destination file目标文件<br>Digital cameras数码照相机<br>Digital notebooks数字笔记本<br>Digital bideo camera数码摄影机<br>Discrete-speech recognition system不连续语言识别系统<br>Document文档<br>document files文档文件<br>Dot-matrix printer点矩阵式打印机<br>Dual-scan monitor双向扫描显示器<br>Dumb terminal非智能终端<br>data security数据安全<br>Data transmission specifications数据传输说明<br>database administrator数据库管理员<br>Dataplay数字播放器<br>Demodulation解调<br>denial of service attack拒绝服务攻击<br>Dial-up service拨号服务<br>Digital cash数字现金<br>Digital signals数字信号<br>Digital subscriber line数字用户线路<br>Digital versatile disc数字化通用磁盘<br>Digital video disc数字化视频光盘<br>Direct access直接存取<br>Directory search目录搜索<br>disaster recovery plan灾难恢复计划<br>Disk caching磁盘驱动器高速缓存<br>Diskette磁盘<br>Disk磁碟<br>Distributed data processing system分部数据处理系统<br>Distributed processing分布处理<br>Domain code域代码<br>Downloading下载<br>DVD 数字化通用磁盘<br>DVD-R 可写DVD<br>DVD-RAM DVD随机存取器<br>DVD-ROM 只读DVD</p>\n<h3 id=\"E\"><a href=\"#E\" class=\"headerlink\" title=\"E\"></a>E</h3><p>e-book电子阅读<br>Expansion cards扩展卡<br>end user终端用户<br>e-cash电子现金<br>e-commerce电子商务<br>electronic cash电子现金<br>electronic commerce电子商务<br>electronic communications privacy act of1986电子通信隐私法案<br>encrypting加密术<br>energy star能源之星<br>Enterprise computing企业计算化<br>environment环境<br>Erasable optical disks可擦除式光盘<br>ergonomics人类工程学<br>ethics道德规范<br>External modem外置调制解调器<br>extranet企业外部网</p>\n<h3 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h3><p>Fax machine传真机<br>Field域<br>Find搜索<br>FireWire port port火线端口<br>Firmware固件<br>Flash RAM闪存<br>Flatbed scanner台式扫描器<br>Flat-panel monitor纯平显示器<br>floppy disk软盘<br>Formatting toolbar格式化工具条<br>Formula公式<br>Function函数<br>fair credit reporting act of 1970公平信用报告法案<br>Fiber-optic cable光纤电缆<br>File compression文件压缩<br>File decompression文件解压缩<br>filter过滤<br>firewall防火墙<br>firewall防火墙<br>Fixed disk固定硬盘<br>Flash memory闪存<br>Flexible disk可折叠磁盘<br>Floppies磁盘<br>Floppy disk软盘<br>Floppy-disk cartridge磁盘盒<br>Formatting格式化<br>freedom of information act of 1970信息自由法案<br>frustrated受挫折<br>Full-duplex communication全双通通信</p>\n<h3 id=\"G\"><a href=\"#G\" class=\"headerlink\" title=\"G\"></a>G</h3><p>General-purpose application通用运用程序<br>Gigahertz千兆赫<br>Graphic tablet绘图板<br>green pc绿色个人计算机</p>\n<h3 id=\"H\"><a href=\"#H\" class=\"headerlink\" title=\"H\"></a>H</h3><p>handheld computer手提电脑<br>Hard copy硬拷贝<br>hard disk硬盘<br>hardware硬件<br>Help帮助<br>Host computer主机<br>Home page主页<br>Hyperlink超链接<br>hacker黑客<br>Half-duplex communication半双通通信<br>Hard disk硬盘<br>Hard-disk cartridge硬盘盒<br>Hard-disk pack硬盘组<br>Head crash磁头碰撞<br>header标题<br>help desk specialist帮助办公专家<br>helper applications帮助软件<br>Hierarchical network层次型网络<br>history file历史文件<br>hits匹配记录<br>horizontal portal横向用户<br>hot site热战<br>Hybrid network混合网络<br>hyperlinks超连接</p>\n<h3 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"I\"></a>I</h3><p>Image capturing device图像获取设备<br>information technology信息技术<br>Ink-jet printer墨水喷射印刷机<br>Integrated package综合性组件<br>Intelligent terminal智能终端设备<br>Intergrated circuit集成电路<br>Interface cards接口卡<br>Internal modem内部调制解调器<br>internet telephony网络电话<br>internet terminal互联网终端<br>Identification识别<br>i-drive网络硬盘驱动器<br>illusion of anonymity匿名幻想<br>index search索引搜索<br>information pushers信息推送器<br>initializing 初始化<br>instant messaging计时信息<br>internal hard disk内置硬盘<br>Internal modem内部调制解调器<br>Internet hard drive 网络硬盘驱动器<br>intranet企业内部网</p>\n<h3 id=\"J\"><a href=\"#J\" class=\"headerlink\" title=\"J\"></a>J</h3><p>joystick操纵杆</p>\n<h3 id=\"K\"><a href=\"#K\" class=\"headerlink\" title=\"K\"></a>K</h3><p>keyword search关键字搜索</p>\n<h3 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h3><p>laser printer激光打印机<br>Layout files版式文件<br>Light pen光笔<br>Locate定位<br>Logical operations逻辑运算<br>Lands凸面<br>Line of sight communication视影通信<br>Low bandwidth低带宽<br>lurking潜伏</p>\n<h3 id=\"M\"><a href=\"#M\" class=\"headerlink\" title=\"M\"></a>M</h3><p>Main board主板<br>Mark sensing标志检测<br>Mechanical mouse机械鼠标<br>Memory内存<br>Menu菜单<br>Menu bar菜单条<br>Microprocessor微处理器<br>Microseconds微秒<br>Modem card调制解调器<br>Monitor显示器<br>Motherboard主板<br>Mouse 鼠标<br>Multifunctional device多功能设备<br>Magnetic tape reels磁带卷<br>Magnetic tape streamers磁带条<br>mailing list邮件列表<br>Medium band媒质带宽<br>metasearch engine整合搜索引擎<br>Microwave微波<br>Modem解调器<br>Modulation解调</p>\n<h3 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N\"></a>N</h3><p>Net PC网络计算机<br>Network adapter card网卡<br>Network personal computer网络个人电脑<br>Network terminal 网络终端<br>Notebook computer笔记本电脑<br>Notebook system unit笔记本系统单元<br>Numeric entry数字输入<br>na?ve天真的人<br>national information infrastructure protection act of1996国际信息保护法案<br>national service provider全国性服务供应商<br>Network architecture网络体系结构<br>Network bridge网桥<br>Network gateway网关<br>network manager网络管理员<br>newsgroup新闻组<br>no electronic theft act of1997无电子盗窃法<br>Node节点<br>Nonvolatile storage非易失性存储</p>\n<h3 id=\"O\"><a href=\"#O\" class=\"headerlink\" title=\"O\"></a>O</h3><p>Object embedding对象嵌入<br>Object linking目标链接<br>Open architecture开放式体系结构<br>Optical disk光盘<br>Optical mouse光电鼠标<br>Optical scanner光电扫描仪<br>Outline大纲<br>off-line browsers离线浏览器<br>Online storage联机存储</p>\n<h3 id=\"P\"><a href=\"#P\" class=\"headerlink\" title=\"P\"></a>P</h3><p>palmtop computer掌上电脑<br>Parallel ports并行端口<br>Passive-matrix被动矩阵<br>PC card个人计算机卡<br>Personal laser printer个人激光打印机<br>Personal video recorder card个人视频记录卡<br>Photo printer照片打印机<br>Pixel像素<br>Platform scanner平版式扫描仪<br>Plotter绘图仪<br>Plug and play即插即用<br>Plug-in boards插件卡<br>Pointer指示器<br>Pointing stick指示棍<br>Port端口<br>Portable scanner便携式扫描仪<br>Presentation files演示文稿<br>Presentation graphics电子文稿程序<br>Primary storage主存<br>Procedures规程<br>Processor处理机<br>Programming control lanugage程序控制语言<br>Packets数据包<br>Parallel data transmission平行数据传输<br>Peer-to-peer network system得等网络系统<br>person-person auction site个人对个人拍卖站点<br>physical security物理安全<br>Pits凹面<br>plug-in插件程序<br>Polling轮询<br>privacy隐私权<br>proactive主动地<br>programmer程序员<br>Protocols协议<br>provider供应商<br>proxy server代理服务<br>pull products推取程序<br>push products推送程序</p>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><p>RAM cache随机高速缓冲器<br>Range范围<br>Record记录<br>Relational database关系数据库<br>Replace替换<br>Resolution分辨率<br>Row行<br>Read-only只读<br>Reformatting重组<br>regional service provider区域性服务供应商<br>repetitive motion injury反复性动作损伤<br>reverse directory反向目录<br>right to financial privacy act of 1979财产隐私法案</p>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S\"></a>S</h3><p>Scanner扫描器<br>Search查找<br>Secondary storage device助存储设备<br>Semiconductor半导体<br>Serial ports串行端口<br>Server服务器<br>Shared laser printer共享激光打印机<br>Sheet表格<br>Silicon chip硅片<br>Slots插槽<br>Smart card智能卡<br>Soft copy软拷贝<br>Software suite软件协议<br>Sorting排序分类<br>Source file源文件<br>Special-purpose application专用文件<br>Spreadsheet电子数据表<br>Standard toolbar标准工具栏<br>Supercomputer巨型机<br>System cabine 系统箱<br>System clock时钟<br>System software系统软件<br>Satellite/air connection services卫星无线连接服务<br>search engines搜索引擎<br>search providers搜索供应者<br>search services 搜索服务器<br>Sectors扇区<br>security安全<br>Sending and receiving devices发送接收设备<br>Sequential access顺序存取<br>Serial data transmission单向通信<br>signature line签名档<br>snoopware监控软件<br>software copyright act of1980软件版权法案<br>software piracy软件盗版<br>Solid-state storage固态存储器<br>specialized search engine专用搜索引擎<br>spiders网页爬虫<br>spike尖峰电压<br>Star network星型网<br>Strategy方案<br>subject主题<br>subscription address预定地址<br>Superdisk超级磁盘<br>surfing网上冲浪<br>surge protector浪涌保护器<br>systems analyst系统分析师</p>\n<h3 id=\"T\"><a href=\"#T\" class=\"headerlink\" title=\"T\"></a>T</h3><p>Table二维表<br>Telephony电话学<br>Television boards电视扩展卡<br>Terminal 终端<br>Template模板<br>Text entry文本输入<br>Thermal printer 热印刷<br>Thin client瘦客<br>Toggle key触发键<br>Toolbar工具栏<br>Touch screen触摸屏<br>Trackball追踪球<br>TV tuner card电视调谐卡<br>Two-state system双状态系统<br>technical writer技术协作者<br>technostress重压技术<br>telnet远程登录<br>Time-sharing system分时系统<br>Topology拓扑结构<br>Tracks磁道<br>traditional cookies传统的信息记录程序<br>Twisted pair双绞线</p>\n<h3 id=\"U\"><a href=\"#U\" class=\"headerlink\" title=\"U\"></a>U</h3><p>Unicode统一字符标准<br>uploading上传<br>usenet世界性新闻组网络</p>\n<h3 id=\"V\"><a href=\"#V\" class=\"headerlink\" title=\"V\"></a>V</h3><p>Virtual memory虚拟内存<br>Video display screen视频显示屏<br>Voice recognition system声音识别系统<br>vertical portal纵向门户<br>video privacy protection act of 1988视频隐私权保护法案<br>virus checker病毒检测程序<br>virus病毒<br>Voiceband音频带宽<br>Volatile storage易失性存储<br>voltage surge冲击性电压</p>\n<h3 id=\"W\"><a href=\"#W\" class=\"headerlink\" title=\"W\"></a>W</h3><p>Wand reader 条形码读入<br>Web 网络<br>Web appliance 环球网设备<br>Web page网页<br>Web site address网络地址<br>Web terminal环球网终端<br>Webcam摄像头<br>What-if analysis假定分析<br>Wireless revolution无线革命<br>Word字长<br>Word processing文字处理<br>Word wrap自动换行<br>Worksheet file 工作表文件<br>web auctions网上拍卖<br>web broadcasters网络广播<br>web portals门户网站<br>web sites网站<br>web storefront creation packages网上商店创建包<br>web storefronts网上商店<br>web utilities网上应用程序<br>web-downloading utilities网页下载应用程序<br>webmaster web站点管理员<br>web万维网<br>Wireless modems无线调制解调器<br>wireless service provider无线服务供应商<br>world wide web万维网<br>worm蠕虫病毒<br>Write-protect notch写保护口</p>\n<h2 id=\"其他缩写\"><a href=\"#其他缩写\" class=\"headerlink\" title=\"其他缩写\"></a>其他缩写</h2><p>DVD digital bersatile 数字化通用光盘<br>IT ingormation technology信息技术<br>CD compact disc 压缩盘<br>PDA personal digital assistant个人数字助理<br>RAM random access memory随机存储器<br>WWW World Wide Web 万维网<br>DBMS database management system数据库管理系统<br>HTML Hypertext Markup Language超文本标示语言<br>OLE object linking and embedding对象链接潜入<br>SQL structured query language结构化查询语言<br>URL uniform resouice locator统一资源定位器<br>AGP accelerated graphics port加速图形接口<br>ALU arithmetic-logic unit算术逻辑单元<br>CPU central processing unit中央处理器<br>CMOS complementary metal-oxide semiconductor互补金属氧化物半导体<br>CISC complex instruction set computer复杂指令集计算机<br>HPSB high performance serial bus高性能串行总线<br>ISA industry standard architecture工业标准结构体系<br>PCI peripheral component interconnect外部设备互连总线<br>PCMCIA Personal Memory Card International Association个人计算机存储卡国际协会<br>RAM random-access memory随机存储器<br>ROM read-only memory只读存储器<br>USB universal serial bus通用串行总线<br>CRT cathode-ray tube阴极射线管<br>HDTV high-definition television高清晰度电视<br>LCD liquid crystal display monitor液晶显示器<br>MICRmagnetic-ink character recognition磁墨水字符识别器<br>OCR optical-character recognition光电字符识别器<br>OMR optical-mark recognition光标阅读器<br>TFT thin film transistor monitor薄膜晶体管显示器</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Zip disk压缩磁盘<br>Domain name system（DNS）域名服务器<br>file transfer protocol(FTP)文件传送协议<br>hypertext markup language(HTML)超文本链接标识语言<br>Local area network（LAN）局域网<br>internet relay chat(IRC)互联网多线交谈<br>Metropolitan area network(MAN)城域网<br>Network operation system(NOS)网络操作系统<br>uniform resource locator(URL)统一资源定位器<br>Wide area network(WAN)广域网</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjj5hvecu000pyhfyf3ft18es","category_id":"cjj5hvecw000ryhfyjeowhm9x","_id":"cjj5hvecy000wyhfyfdr4si6v"}],"PostTag":[{"post_id":"cjj5hvebz0000yhfymfsmlvur","tag_id":"cjj5hvec60004yhfy7f814928","_id":"cjj5hveca0008yhfyw9i7a91j"},{"post_id":"cjj5hvec90007yhfye0ymw42d","tag_id":"cjj5hvec60004yhfy7f814928","_id":"cjj5hvecc000ayhfy9u1nk337"},{"post_id":"cjj5hvece000cyhfygubpmv9v","tag_id":"cjj5hvecf000eyhfyt2qnthrx","_id":"cjj5hveci000iyhfy9lzcqdpv"},{"post_id":"cjj5hvech000hyhfyonytyfad","tag_id":"cjj5hvecj000kyhfyh8ezmaf3","_id":"cjj5hveck000nyhfyt0r6k0fy"},{"post_id":"cjj5hvech000hyhfyonytyfad","tag_id":"cjj5hveck000myhfy3putx9y9","_id":"cjj5hveck000oyhfyalqqs6j6"},{"post_id":"cjj5hvecu000pyhfyf3ft18es","tag_id":"cjj5hvecj000kyhfyh8ezmaf3","_id":"cjj5hvecx000syhfyy1deicvq"},{"post_id":"cjj5hvecu000pyhfyf3ft18es","tag_id":"cjj5hveck000myhfy3putx9y9","_id":"cjj5hvecx000uyhfyirsjrzh9"},{"post_id":"cjj5hvecv000qyhfyyaz6a7fo","tag_id":"cjj5hvecx000tyhfyxlnbba3g","_id":"cjj5hvecy000vyhfyt0i2md5e"},{"post_id":"cjj5hvee3000xyhfyyoxncd7l","tag_id":"cjj5hvec60004yhfy7f814928","_id":"cjj5hvee4000yyhfyduohl973"}],"Tag":[{"name":"[object Object]","_id":"cjj5hvec60004yhfy7f814928"},{"name":"Linux,mutt","_id":"cjj5hvecf000eyhfyt2qnthrx"},{"name":"golang","_id":"cjj5hvecj000kyhfyh8ezmaf3"},{"name":"struct","_id":"cjj5hveck000myhfy3putx9y9"},{"name":"Oauth","_id":"cjj5hvecx000tyhfyxlnbba3g"}]}}